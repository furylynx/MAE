Readme
==================

The Movement Analysis Engine is able to analyze movements and provide events based on a 
described movements sequence (Labanotation). The engine can be used by other applications 
for further movement processing and filtering in ambient spaces (i.e., smart environments).

This project is part of the Java bindings for the Movement Analysis Engine. It contains the 
Java wrapper classes that can be used to access the native library.


Installation
==================

This project has no dependencies beyond the standard Java API. It can be compiled to a jar
(currently there is a compiled jar in the jar/ folder.

When the wrapper is meant to be used in a project, the native library (libmae) must be loaded.
This is done in the main method of a custom Java project by invoking:

		System.loadLibrary("mae");
		
The library is required to be known to the project (e.g. path to libmae added to the PATH
environment variable).

Since SWIG does currently not support smart pointers when using directors (that enable callbacks
to the Java objects), inheritance from the provided classes is not possible. In order to get the
events on the three listeners (sequence_listener, recognition_listener and pose_listener), an
additional wrapper is provided within the "maejavawrapper" package. The "WrappedMovementController"
should be used instead of the raw fl_movement_controller in order to add listeners to the controller
and receive the events. Only the "addListener" methods for the "IJ*" listeners can be used. Any other 
would result in undefined behavior (like segmentation faults on the native side).


Documentation
==================

Currently no JavaDoc comments are generated by SWIG. Thus, for class or function documentation
the C++ documentation should be read. 

See the MAE-Java-Sample project's source code to get an idea on how to use the Movement Analysis Engine
from Java using the provided bindings.

