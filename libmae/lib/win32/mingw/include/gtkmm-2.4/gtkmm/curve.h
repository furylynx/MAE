// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GTKMM_CURVE_H
#define _GTKMM_CURVE_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm.h>

/* $Id: curve.hg,v 1.1 2003/01/21 13:38:47 murrayc Exp $ */

/* curve.h
 * 
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


#include <glibmm/arrayhandle.h>
#include <gtkmm/box.h>
#include <gtkmm/drawingarea.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkCurve GtkCurve;
typedef struct _GtkCurveClass GtkCurveClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class Curve_Class; } // namespace Gtk
#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkGammaCurve GtkGammaCurve;
typedef struct _GtkGammaCurveClass GtkGammaCurveClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class GammaCurve_Class; } // namespace Gtk
namespace Gtk
{

/** Allows direct editing of a curve.
 *
 * @deprecated As of gtkmm 2.20, this widget has been deprecated since it is too specialized. 
 */

class Curve : public DrawingArea
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Curve CppObjectType;
  typedef Curve_Class CppClassType;
  typedef GtkCurve BaseObjectType;
  typedef GtkCurveClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~Curve();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class Curve_Class;
  static CppClassType curve_class_;

  // noncopyable
  Curve(const Curve&);
  Curve& operator=(const Curve&);

protected:
  explicit Curve(const Glib::ConstructParams& construct_params);
  explicit Curve(GtkCurve* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkCurve*       gobj()       { return reinterpret_cast<GtkCurve*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkCurve* gobj() const { return reinterpret_cast<GtkCurve*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  virtual void on_curve_type_changed();


private:

  
public:

  Curve();
  

  void reset();
  
  void set_gamma(float gamma);
  
  void set_range(float min_x, float max_x, float min_y, float max_y);
  
  void get_vector(int veclen, float* data) const;

  Glib::ArrayHandle<float> get_vector(int veclen) const;
  void set_vector(const Glib::ArrayHandle<float>& array);

  
  void set_curve_type(CurveType type);

  
  /**
   * @par Prototype:
   * <tt>void on_my_%curve_type_changed()</tt>
   */

  Glib::SignalProxy0< void > signal_curve_type_changed();


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Is this curve linear, spline interpolated, or free-form.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<CurveType> property_curve_type() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Is this curve linear, spline interpolated, or free-form.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<CurveType> property_curve_type() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Minimum possible value for X.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<float> property_min_x() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Minimum possible value for X.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<float> property_min_x() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Maximum possible X value.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<float> property_max_x() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Maximum possible X value.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<float> property_max_x() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Minimum possible value for Y.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<float> property_min_y() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Minimum possible value for Y.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<float> property_min_y() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Maximum possible value for Y.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<float> property_max_y() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Maximum possible value for Y.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<float> property_max_y() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


};

/** A subclass of Gtk::Curve for editing gamma curves.
 *
 * @ingroup Widgets
 */

class GammaCurve : public VBox
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef GammaCurve CppObjectType;
  typedef GammaCurve_Class CppClassType;
  typedef GtkGammaCurve BaseObjectType;
  typedef GtkGammaCurveClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~GammaCurve();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class GammaCurve_Class;
  static CppClassType gammacurve_class_;

  // noncopyable
  GammaCurve(const GammaCurve&);
  GammaCurve& operator=(const GammaCurve&);

protected:
  explicit GammaCurve(const Glib::ConstructParams& construct_params);
  explicit GammaCurve(GtkGammaCurve* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkGammaCurve*       gobj()       { return reinterpret_cast<GtkGammaCurve*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkGammaCurve* gobj() const { return reinterpret_cast<GtkGammaCurve*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

public:
  GammaCurve();
  

};

} /* namespace Gtk */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::Curve
   */
  Gtk::Curve* wrap(GtkCurve* object, bool take_copy = false);
} //namespace Glib


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::GammaCurve
   */
  Gtk::GammaCurve* wrap(GtkGammaCurve* object, bool take_copy = false);
} //namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_CURVE_H */

