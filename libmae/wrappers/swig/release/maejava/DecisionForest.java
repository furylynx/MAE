/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package maejava;

public class DecisionForest {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public DecisionForest(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(DecisionForest obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        MaeJavaJNI.delete_DecisionForest(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure, long beat_duration, ETimeUnit time_unit, IMovementDecisionMaker dec_maker, RewritingForest rw, boolean cooldown) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_0(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure, beat_duration, time_unit.swigValue(), IMovementDecisionMaker.getCPtr(dec_maker), RewritingForest.getCPtr(rw), rw, cooldown), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure, long beat_duration, ETimeUnit time_unit, IMovementDecisionMaker dec_maker, RewritingForest rw) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_1(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure, beat_duration, time_unit.swigValue(), IMovementDecisionMaker.getCPtr(dec_maker), RewritingForest.getCPtr(rw), rw), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure, long beat_duration, ETimeUnit time_unit, IMovementDecisionMaker dec_maker) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_2(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure, beat_duration, time_unit.swigValue(), IMovementDecisionMaker.getCPtr(dec_maker)), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure, long beat_duration, ETimeUnit time_unit) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_3(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure, beat_duration, time_unit.swigValue()), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure, long beat_duration) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_4(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure, beat_duration), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns, long beats_per_measure) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_5(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns, beats_per_measure), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions, IntVector reserved_columns) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_6(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions, IntVector.getCPtr(reserved_columns), reserved_columns), true);
  }

  public DecisionForest(ColumnDefinitionVector column_definitions) {
    this(MaeJavaJNI.new_DecisionForest__SWIG_7(ColumnDefinitionVector.getCPtr(column_definitions), column_definitions), true);
  }

  public DecisionForest() {
    this(MaeJavaJNI.new_DecisionForest__SWIG_8(), true);
  }

  public void setRecognitionTolerance(double tolerance) {
    MaeJavaJNI.DecisionForest_setRecognitionTolerance(swigCPtr, this, tolerance);
  }

  public void setCooldown(boolean cooldown) {
    MaeJavaJNI.DecisionForest_setCooldown(swigCPtr, this, cooldown);
  }

  public boolean getCooldown() {
    return MaeJavaJNI.DecisionForest_getCooldown(swigCPtr, this);
  }

  public int getSequenceLength(LabanSequence sequence) {
    return MaeJavaJNI.DecisionForest_getSequenceLength(swigCPtr, this, LabanSequence.getCPtr(sequence), sequence);
  }

  public void addSequence(LabanSequence sequence) {
    MaeJavaJNI.DecisionForest_addSequence(swigCPtr, this, LabanSequence.getCPtr(sequence), sequence);
  }

  public boolean removeSequence(LabanSequence sequence) {
    return MaeJavaJNI.DecisionForest_removeSequence__SWIG_0(swigCPtr, this, LabanSequence.getCPtr(sequence), sequence);
  }

  public boolean removeSequence(long list_index) {
    return MaeJavaJNI.DecisionForest_removeSequence__SWIG_1(swigCPtr, this, list_index);
  }

  public void clear() {
    MaeJavaJNI.DecisionForest_clear(swigCPtr, this);
  }

  public void addRewritingRule(IMovementVector sequence, IMovementVectorVector replacements) {
    MaeJavaJNI.DecisionForest_addRewritingRule__SWIG_0(swigCPtr, this, IMovementVector.getCPtr(sequence), sequence, IMovementVectorVector.getCPtr(replacements));
  }

  public void addRewritingRule(IMovementVectorVectorDecisionValue rule) {
    MaeJavaJNI.DecisionForest_addRewritingRule__SWIG_1(swigCPtr, this, IMovementVectorVectorDecisionValue.getCPtr(rule));
  }

  public LabanSequence recreateSequence(LabanSequence sequence) {
    long cPtr = MaeJavaJNI.DecisionForest_recreateSequence(swigCPtr, this, LabanSequence.getCPtr(sequence), sequence);
    return (cPtr == 0) ? null : new LabanSequence(cPtr, true);
  }

  public LabanSequenceList getSequences() {
    return new LabanSequenceList(MaeJavaJNI.DecisionForest_getSequences(swigCPtr, this), true);
  }

  public LabanSequenceVector findSubmatches(double framerate, LabanSequence whole_sequence, BoneVector body_parts) {
    return new LabanSequenceVector(MaeJavaJNI.DecisionForest_findSubmatches(swigCPtr, this, framerate, LabanSequence.getCPtr(whole_sequence), whole_sequence, BoneVector.getCPtr(body_parts), body_parts), true);
  }

  public String str() {
    return MaeJavaJNI.DecisionForest_str(swigCPtr, this);
  }

}
