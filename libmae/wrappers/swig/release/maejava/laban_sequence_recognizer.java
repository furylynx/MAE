/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package maejava;

public class laban_sequence_recognizer extends laban_sequence_sequence_recognizer {
  private long swigCPtr;
  private boolean swigCMemOwnDerived;

  public laban_sequence_recognizer(long cPtr, boolean cMemoryOwn) {
    super(MaeJavaJNI.laban_sequence_recognizer_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(laban_sequence_recognizer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        MaeJavaJNI.delete_laban_sequence_recognizer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public laban_sequence_recognizer(double framerate, boolean debug) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_0(framerate, debug), true);
  }

  public laban_sequence_recognizer(double framerate) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_1(framerate), true);
  }

  public laban_sequence_recognizer() {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_2(), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions, long beats_per_measure, long beat_duration, e_time_unit time_unit, double framerate, boolean debug) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_3(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration, time_unit.swigValue(), framerate, debug), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions, long beats_per_measure, long beat_duration, e_time_unit time_unit, double framerate) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_4(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration, time_unit.swigValue(), framerate), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions, long beats_per_measure, long beat_duration, e_time_unit time_unit) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_5(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration, time_unit.swigValue()), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions, long beats_per_measure, long beat_duration) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_6(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions, long beats_per_measure) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_7(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure), true);
  }

  public laban_sequence_recognizer(coldef_vector column_definitions) {
    this(MaeJavaJNI.new_laban_sequence_recognizer__SWIG_8(coldef_vector.getCPtr(column_definitions), column_definitions), true);
  }

  public void set_recognition_tolerance(double tolerance) {
    MaeJavaJNI.laban_sequence_recognizer_set_recognition_tolerance(swigCPtr, this, tolerance);
  }

  public decision_forest get_decision_forest() {
    long cPtr = MaeJavaJNI.laban_sequence_recognizer_get_decision_forest(swigCPtr, this);
    return (cPtr == 0) ? null : new decision_forest(cPtr, true);
  }

  public void register_sequence(laban_sequence sequence) {
    MaeJavaJNI.laban_sequence_recognizer_register_sequence(swigCPtr, this, laban_sequence.getCPtr(sequence), sequence);
  }

  public boolean deregister_sequence(laban_sequence sequence) {
    return MaeJavaJNI.laban_sequence_recognizer_deregister_sequence__SWIG_0(swigCPtr, this, laban_sequence.getCPtr(sequence), sequence);
  }

  public boolean deregister_sequence(long list_index) {
    return MaeJavaJNI.laban_sequence_recognizer_deregister_sequence__SWIG_1(swigCPtr, this, list_index);
  }

  public void clear_registered_sequences() {
    MaeJavaJNI.laban_sequence_recognizer_clear_registered_sequences(swigCPtr, this);
  }

  public laban_sequence_list get_registered_sequences() {
    return new laban_sequence_list(MaeJavaJNI.laban_sequence_recognizer_get_registered_sequences(swigCPtr, this), true);
  }

  public int get_sequence_length(laban_sequence sequence) {
    return MaeJavaJNI.laban_sequence_recognizer_get_sequence_length(swigCPtr, this, laban_sequence.getCPtr(sequence), sequence);
  }

  public laban_sequence_vector recognize_sequence(laban_sequence sequence, bone_vector body_parts) {
    return new laban_sequence_vector(MaeJavaJNI.laban_sequence_recognizer_recognize_sequence(swigCPtr, this, laban_sequence.getCPtr(sequence), sequence, bone_vector.getCPtr(body_parts), body_parts), true);
  }

  public String str() {
    return MaeJavaJNI.laban_sequence_recognizer_str(swigCPtr, this);
  }

}
