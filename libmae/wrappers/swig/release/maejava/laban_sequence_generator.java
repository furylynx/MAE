/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package maejava;

public class laban_sequence_generator extends laban_sequence_sequence_generator {
  private long swigCPtr;
  private boolean swigCMemOwnDerived;

  public laban_sequence_generator(long cPtr, boolean cMemoryOwn) {
    super(MaeJavaJNI.laban_sequence_generator_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(laban_sequence_generator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        MaeJavaJNI.delete_laban_sequence_generator(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public laban_sequence_generator(boolean debug) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_0(debug), true);
  }

  public laban_sequence_generator() {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_1(), true);
  }

  public laban_sequence_generator(coldef_vector column_definitions, long beats_per_measure, long beat_duration, e_time_unit time_unit, boolean debug) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_2(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration, time_unit.swigValue(), debug), true);
  }

  public laban_sequence_generator(coldef_vector column_definitions, long beats_per_measure, long beat_duration, e_time_unit time_unit) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_3(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration, time_unit.swigValue()), true);
  }

  public laban_sequence_generator(coldef_vector column_definitions, long beats_per_measure, long beat_duration) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_4(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure, beat_duration), true);
  }

  public laban_sequence_generator(coldef_vector column_definitions, long beats_per_measure) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_5(coldef_vector.getCPtr(column_definitions), column_definitions, beats_per_measure), true);
  }

  public laban_sequence_generator(coldef_vector column_definitions) {
    this(MaeJavaJNI.new_laban_sequence_generator__SWIG_6(coldef_vector.getCPtr(column_definitions), column_definitions), true);
  }

  public laban_sequence generate_sequence(double framerate, enriched_pose_list key_poses, bone_vector body_parts) {
    long cPtr = MaeJavaJNI.laban_sequence_generator_generate_sequence(swigCPtr, this, framerate, enriched_pose_list.getCPtr(key_poses), key_poses, bone_vector.getCPtr(body_parts), body_parts);
    return (cPtr == 0) ? null : new laban_sequence(cPtr, true);
  }

}
