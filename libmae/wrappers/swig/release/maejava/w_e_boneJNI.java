/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package maejava;

public class w_e_boneJNI {
  public final static native int INVALID_BONE_get();
  public final static native int HEAD_get();
  public final static native int LEFT_UPPER_ARM_get();
  public final static native int LEFT_FOREARM_get();
  public final static native int LEFT_WHOLE_ARM_get();
  public final static native int RIGHT_UPPER_ARM_get();
  public final static native int RIGHT_FOREARM_get();
  public final static native int RIGHT_WHOLE_ARM_get();
  public final static native int LEFT_THIGH_get();
  public final static native int LEFT_SHANK_get();
  public final static native int LEFT_WHOLE_LEG_get();
  public final static native int RIGHT_THIGH_get();
  public final static native int RIGHT_SHANK_get();
  public final static native int RIGHT_WHOLE_LEG_get();
  public final static native String e_bone_c_str(int jarg1);
  public final static native int e_bone_c_to_int(int jarg1);
  public final static native long e_bone_c_vec();
  public final static native int e_bone_c_parse(String jarg1);
  public final static native long new_e_bone_c();
  public final static native void delete_e_bone_c(long jarg1);
  public final static native long new_int_vector__SWIG_0();
  public final static native long new_int_vector__SWIG_1(long jarg1);
  public final static native long int_vector_size(long jarg1, int_vector jarg1_);
  public final static native long int_vector_capacity(long jarg1, int_vector jarg1_);
  public final static native void int_vector_reserve(long jarg1, int_vector jarg1_, long jarg2);
  public final static native boolean int_vector_isEmpty(long jarg1, int_vector jarg1_);
  public final static native void int_vector_clear(long jarg1, int_vector jarg1_);
  public final static native void int_vector_add(long jarg1, int_vector jarg1_, int jarg2);
  public final static native int int_vector_get(long jarg1, int_vector jarg1_, int jarg2);
  public final static native void int_vector_set(long jarg1, int_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_int_vector(long jarg1);
  public final static native long new_e_bone_vector__SWIG_0();
  public final static native long new_e_bone_vector__SWIG_1(long jarg1);
  public final static native long e_bone_vector_size(long jarg1, e_bone_vector jarg1_);
  public final static native long e_bone_vector_capacity(long jarg1, e_bone_vector jarg1_);
  public final static native void e_bone_vector_reserve(long jarg1, e_bone_vector jarg1_, long jarg2);
  public final static native boolean e_bone_vector_isEmpty(long jarg1, e_bone_vector jarg1_);
  public final static native void e_bone_vector_clear(long jarg1, e_bone_vector jarg1_);
  public final static native void e_bone_vector_add(long jarg1, e_bone_vector jarg1_, int jarg2);
  public final static native int e_bone_vector_get(long jarg1, e_bone_vector jarg1_, int jarg2);
  public final static native void e_bone_vector_set(long jarg1, e_bone_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_bone_vector(long jarg1);
  public final static native long new_bone__SWIG_0();
  public final static native long new_bone__SWIG_1(int jarg1, String jarg2, int jarg3, int jarg4);
  public final static native long new_bone__SWIG_2(int jarg1, String jarg2, int jarg3, int jarg4, int jarg5);
  public final static native long new_bone__SWIG_3(int jarg1);
  public final static native void delete_bone(long jarg1);
  public final static native int bone_get_id(long jarg1, bone jarg1_);
  public final static native int bone_get_idSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native String bone_get_name(long jarg1, bone jarg1_);
  public final static native String bone_get_nameSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native int bone_get_from(long jarg1, bone jarg1_);
  public final static native int bone_get_fromSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native int bone_get_to(long jarg1, bone jarg1_);
  public final static native int bone_get_toSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native boolean bone_has_middle_joint(long jarg1, bone jarg1_);
  public final static native boolean bone_has_middle_jointSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native int bone_get_middle_joint(long jarg1, bone jarg1_);
  public final static native int bone_get_middle_jointSwigExplicitbone(long jarg1, bone jarg1_);
  public final static native long bone_default_bones();
  public final static native int bone_RESERVED_TOP_DOWN_get();
  public final static native int bone_RESERVED_RIGHT_LEFT_get();
  public final static native void bone_director_connect(bone obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void bone_change_ownership(bone obj, long cptr, boolean take_or_release);
  public final static native long new_bone_vector__SWIG_0();
  public final static native long new_bone_vector__SWIG_1(long jarg1);
  public final static native long bone_vector_size(long jarg1, bone_vector jarg1_);
  public final static native long bone_vector_capacity(long jarg1, bone_vector jarg1_);
  public final static native void bone_vector_reserve(long jarg1, bone_vector jarg1_, long jarg2);
  public final static native boolean bone_vector_isEmpty(long jarg1, bone_vector jarg1_);
  public final static native void bone_vector_clear(long jarg1, bone_vector jarg1_);
  public final static native void bone_vector_add(long jarg1, bone_vector jarg1_, long jarg2, bone jarg2_);
  public final static native long bone_vector_get(long jarg1, bone_vector jarg1_, int jarg2);
  public final static native void bone_vector_set(long jarg1, bone_vector jarg1_, int jarg2, long jarg3, bone jarg3_);
  public final static native void delete_bone_vector(long jarg1);
  public final static native long new_string_vector__SWIG_0();
  public final static native long new_string_vector__SWIG_1(long jarg1);
  public final static native long string_vector_size(long jarg1, string_vector jarg1_);
  public final static native long string_vector_capacity(long jarg1, string_vector jarg1_);
  public final static native void string_vector_reserve(long jarg1, string_vector jarg1_, long jarg2);
  public final static native boolean string_vector_isEmpty(long jarg1, string_vector jarg1_);
  public final static native void string_vector_clear(long jarg1, string_vector jarg1_);
  public final static native void string_vector_add(long jarg1, string_vector jarg1_, String jarg2);
  public final static native String string_vector_get(long jarg1, string_vector jarg1_, int jarg2);
  public final static native void string_vector_set(long jarg1, string_vector jarg1_, int jarg2, String jarg3);
  public final static native void delete_string_vector(long jarg1);
  public final static native long new_general_pose();
  public final static native void delete_general_pose(long jarg1);
  public final static native void general_pose_set_direction(long jarg1, general_pose jarg1_, int jarg2, int jarg3);
  public final static native void general_pose_set_directionSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2, int jarg3);
  public final static native int general_pose_get_direction(long jarg1, general_pose jarg1_, int jarg2);
  public final static native int general_pose_get_directionSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2);
  public final static native void general_pose_set_distance(long jarg1, general_pose jarg1_, int jarg2, int jarg3, double jarg4);
  public final static native void general_pose_set_distanceSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2, int jarg3, double jarg4);
  public final static native double general_pose_get_distance(long jarg1, general_pose jarg1_, int jarg2, int jarg3);
  public final static native double general_pose_get_distanceSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2, int jarg3);
  public final static native void general_pose_set_rotation(long jarg1, general_pose jarg1_, int jarg2, double jarg3);
  public final static native void general_pose_set_rotationSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2, double jarg3);
  public final static native double general_pose_get_rotation(long jarg1, general_pose jarg1_, int jarg2);
  public final static native double general_pose_get_rotationSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_, int jarg2);
  public final static native long general_pose_get_body_parts(long jarg1, general_pose jarg1_);
  public final static native long general_pose_get_body_partsSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_);
  public final static native long general_pose_get_directions(long jarg1, general_pose jarg1_);
  public final static native long general_pose_get_directionsSwigExplicitgeneral_pose(long jarg1, general_pose jarg1_);
  public final static native void general_pose_director_connect(general_pose obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void general_pose_change_ownership(general_pose obj, long cptr, boolean take_or_release);
  public final static native long new_int_list();
  public final static native long int_list_size(long jarg1, int_list jarg1_);
  public final static native boolean int_list_isEmpty(long jarg1, int_list jarg1_);
  public final static native void int_list_clear(long jarg1, int_list jarg1_);
  public final static native void int_list_add(long jarg1, int_list jarg1_, int jarg2);
  public final static native int int_list_get(long jarg1, int_list jarg1_, int jarg2);
  public final static native void delete_int_list(long jarg1);
  public final static native void delete_i_pose_listener(long jarg1);
  public final static native void i_pose_listener_on_pose(long jarg1, i_pose_listener jarg1_, int jarg2, long jarg3, general_pose jarg3_);
  public final static native long new_i_pose_listener();
  public final static native void i_pose_listener_director_connect(i_pose_listener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_pose_listener_change_ownership(i_pose_listener obj, long cptr, boolean take_or_release);
  public final static native long new_general_enriched_pose__SWIG_0();
  public final static native long new_general_enriched_pose__SWIG_1(long jarg1, general_pose jarg1_);
  public final static native void delete_general_enriched_pose(long jarg1);
  public final static native void general_enriched_pose_set_key_pose(long jarg1, general_enriched_pose jarg1_, int jarg2, boolean jarg3);
  public final static native void general_enriched_pose_set_key_poseSwigExplicitgeneral_enriched_pose(long jarg1, general_enriched_pose jarg1_, int jarg2, boolean jarg3);
  public final static native boolean general_enriched_pose_is_key_pose(long jarg1, general_enriched_pose jarg1_, int jarg2);
  public final static native boolean general_enriched_pose_is_key_poseSwigExplicitgeneral_enriched_pose(long jarg1, general_enriched_pose jarg1_, int jarg2);
  public final static native void general_enriched_pose_set_in_motion(long jarg1, general_enriched_pose jarg1_, int jarg2, boolean jarg3);
  public final static native void general_enriched_pose_set_in_motionSwigExplicitgeneral_enriched_pose(long jarg1, general_enriched_pose jarg1_, int jarg2, boolean jarg3);
  public final static native boolean general_enriched_pose_is_in_motion(long jarg1, general_enriched_pose jarg1_, int jarg2);
  public final static native boolean general_enriched_pose_is_in_motionSwigExplicitgeneral_enriched_pose(long jarg1, general_enriched_pose jarg1_, int jarg2);
  public final static native void general_enriched_pose_director_connect(general_enriched_pose obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void general_enriched_pose_change_ownership(general_enriched_pose obj, long cptr, boolean take_or_release);
  public final static native long new_enriched_pose_list();
  public final static native long enriched_pose_list_size(long jarg1, enriched_pose_list jarg1_);
  public final static native boolean enriched_pose_list_isEmpty(long jarg1, enriched_pose_list jarg1_);
  public final static native void enriched_pose_list_clear(long jarg1, enriched_pose_list jarg1_);
  public final static native void enriched_pose_list_add(long jarg1, enriched_pose_list jarg1_, long jarg2, general_enriched_pose jarg2_);
  public final static native long enriched_pose_list_get(long jarg1, enriched_pose_list jarg1_, int jarg2);
  public final static native void delete_enriched_pose_list(long jarg1);
  public final static native long new_hierarchy__SWIG_0();
  public final static native long new_hierarchy__SWIG_1(long jarg1, hierarchy_element jarg1_);
  public final static native void delete_hierarchy(long jarg1);
  public final static native long hierarchy_get_root(long jarg1, hierarchy jarg1_);
  public final static native void hierarchy_set_root(long jarg1, hierarchy jarg1_, long jarg2, hierarchy_element jarg2_);
  public final static native long hierarchy_get_element_sequence(long jarg1, hierarchy jarg1_);
  public final static native long hierarchy_at(long jarg1, hierarchy jarg1_, int jarg2);
  public final static native String hierarchy_str(long jarg1, hierarchy jarg1_);
  public final static native long hierarchy_default_hierarchy();
  public final static native long new_hierarchy_element_vector__SWIG_0();
  public final static native long new_hierarchy_element_vector__SWIG_1(long jarg1);
  public final static native long hierarchy_element_vector_size(long jarg1, hierarchy_element_vector jarg1_);
  public final static native long hierarchy_element_vector_capacity(long jarg1, hierarchy_element_vector jarg1_);
  public final static native void hierarchy_element_vector_reserve(long jarg1, hierarchy_element_vector jarg1_, long jarg2);
  public final static native boolean hierarchy_element_vector_isEmpty(long jarg1, hierarchy_element_vector jarg1_);
  public final static native void hierarchy_element_vector_clear(long jarg1, hierarchy_element_vector jarg1_);
  public final static native void hierarchy_element_vector_add(long jarg1, hierarchy_element_vector jarg1_, long jarg2, hierarchy_element jarg2_);
  public final static native long hierarchy_element_vector_get(long jarg1, hierarchy_element_vector jarg1_, int jarg2);
  public final static native void hierarchy_element_vector_set(long jarg1, hierarchy_element_vector jarg1_, int jarg2, long jarg3, hierarchy_element jarg3_);
  public final static native void delete_hierarchy_element_vector(long jarg1);
  public final static native long new_hierarchy_element__SWIG_0(int jarg1, String jarg2, boolean jarg3, boolean jarg4);
  public final static native long new_hierarchy_element__SWIG_1(int jarg1, String jarg2, boolean jarg3);
  public final static native long new_hierarchy_element__SWIG_2(int jarg1, String jarg2);
  public final static native void delete_hierarchy_element(long jarg1);
  public final static native int hierarchy_element_get_id(long jarg1, hierarchy_element jarg1_);
  public final static native String hierarchy_element_get_name(long jarg1, hierarchy_element jarg1_);
  public final static native boolean hierarchy_element_is_torso_joint(long jarg1, hierarchy_element jarg1_);
  public final static native boolean hierarchy_element_is_dummy(long jarg1, hierarchy_element jarg1_);
  public final static native long hierarchy_element_get_parent(long jarg1, hierarchy_element jarg1_);
  public final static native boolean hierarchy_element_is_parent(long jarg1, hierarchy_element jarg1_);
  public final static native boolean hierarchy_element_is_parent_of(long jarg1, hierarchy_element jarg1_, int jarg2);
  public final static native long hierarchy_element_get_children(long jarg1, hierarchy_element jarg1_);
  public final static native void hierarchy_element_push_front__SWIG_0(long jarg1, hierarchy_element jarg1_, long jarg2, hierarchy_element jarg2_, boolean jarg3);
  public final static native void hierarchy_element_push_front__SWIG_1(long jarg1, hierarchy_element jarg1_, long jarg2, hierarchy_element jarg2_);
  public final static native void hierarchy_element_insert__SWIG_0(long jarg1, hierarchy_element jarg1_, long jarg2, long jarg3, hierarchy_element jarg3_, boolean jarg4);
  public final static native void hierarchy_element_insert__SWIG_1(long jarg1, hierarchy_element jarg1_, long jarg2, long jarg3, hierarchy_element jarg3_);
  public final static native void hierarchy_element_push_back__SWIG_0(long jarg1, hierarchy_element jarg1_, long jarg2, hierarchy_element jarg2_, boolean jarg3);
  public final static native void hierarchy_element_push_back__SWIG_1(long jarg1, hierarchy_element jarg1_, long jarg2, hierarchy_element jarg2_);
  public final static native void hierarchy_element_erase__SWIG_0(long jarg1, hierarchy_element jarg1_, int jarg2, boolean jarg3);
  public final static native void hierarchy_element_erase__SWIG_1(long jarg1, hierarchy_element jarg1_, int jarg2);
  public final static native void hierarchy_element_erase_at__SWIG_0(long jarg1, hierarchy_element jarg1_, long jarg2, boolean jarg3);
  public final static native void hierarchy_element_erase_at__SWIG_1(long jarg1, hierarchy_element jarg1_, long jarg2);
  public final static native void hierarchy_element_clear__SWIG_0(long jarg1, hierarchy_element jarg1_, boolean jarg2);
  public final static native void hierarchy_element_clear__SWIG_1(long jarg1, hierarchy_element jarg1_);
  public final static native long hierarchy_element_get_element_sequence(long jarg1, hierarchy_element jarg1_);
  public final static native String hierarchy_element_str__SWIG_0(long jarg1, hierarchy_element jarg1_, int jarg2);
  public final static native String hierarchy_element_str__SWIG_1(long jarg1, hierarchy_element jarg1_);
  public final static native long new_vec3d__SWIG_0();
  public final static native long new_vec3d__SWIG_1(double jarg1, double jarg2, double jarg3);
  public final static native void delete_vec3d(long jarg1);
  public final static native void vec3d_set_x(long jarg1, vec3d jarg1_, double jarg2);
  public final static native void vec3d_set_xSwigExplicitvec3d(long jarg1, vec3d jarg1_, double jarg2);
  public final static native double vec3d_get_x(long jarg1, vec3d jarg1_);
  public final static native double vec3d_get_xSwigExplicitvec3d(long jarg1, vec3d jarg1_);
  public final static native void vec3d_set_y(long jarg1, vec3d jarg1_, double jarg2);
  public final static native void vec3d_set_ySwigExplicitvec3d(long jarg1, vec3d jarg1_, double jarg2);
  public final static native double vec3d_get_y(long jarg1, vec3d jarg1_);
  public final static native double vec3d_get_ySwigExplicitvec3d(long jarg1, vec3d jarg1_);
  public final static native void vec3d_set_z(long jarg1, vec3d jarg1_, double jarg2);
  public final static native void vec3d_set_zSwigExplicitvec3d(long jarg1, vec3d jarg1_, double jarg2);
  public final static native double vec3d_get_z(long jarg1, vec3d jarg1_);
  public final static native double vec3d_get_zSwigExplicitvec3d(long jarg1, vec3d jarg1_);
  public final static native String vec3d_str(long jarg1, vec3d jarg1_);
  public final static native String vec3d_strSwigExplicitvec3d(long jarg1, vec3d jarg1_);
  public final static native void vec3d_director_connect(vec3d obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void vec3d_change_ownership(vec3d obj, long cptr, boolean take_or_release);
  public final static native void delete_general_joint(long jarg1);
  public final static native long new_general_joint__SWIG_0();
  public final static native long new_general_joint__SWIG_1(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native long new_general_joint__SWIG_2(double jarg1, double jarg2, double jarg3, double jarg4);
  public final static native long new_general_joint__SWIG_3(double jarg1, double jarg2, double jarg3);
  public final static native long new_general_joint__SWIG_4(long jarg1, double jarg2, double jarg3);
  public final static native long new_general_joint__SWIG_5(long jarg1, double jarg2);
  public final static native long new_general_joint__SWIG_6(long jarg1);
  public final static native void general_joint_set_x(long jarg1, general_joint jarg1_, double jarg2);
  public final static native void general_joint_set_xSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, double jarg2);
  public final static native double general_joint_get_x(long jarg1, general_joint jarg1_);
  public final static native double general_joint_get_xSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_set_y(long jarg1, general_joint jarg1_, double jarg2);
  public final static native void general_joint_set_ySwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, double jarg2);
  public final static native double general_joint_get_y(long jarg1, general_joint jarg1_);
  public final static native double general_joint_get_ySwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_set_z(long jarg1, general_joint jarg1_, double jarg2);
  public final static native void general_joint_set_zSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, double jarg2);
  public final static native double general_joint_get_z(long jarg1, general_joint jarg1_);
  public final static native double general_joint_get_zSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_set_valid(long jarg1, general_joint jarg1_, boolean jarg2);
  public final static native void general_joint_set_validSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, boolean jarg2);
  public final static native boolean general_joint_is_valid(long jarg1, general_joint jarg1_);
  public final static native boolean general_joint_is_validSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_set_confidence(long jarg1, general_joint jarg1_, double jarg2);
  public final static native void general_joint_set_confidenceSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, double jarg2);
  public final static native double general_joint_get_confidence(long jarg1, general_joint jarg1_);
  public final static native double general_joint_get_confidenceSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_set_rotation(long jarg1, general_joint jarg1_, double jarg2);
  public final static native void general_joint_set_rotationSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, double jarg2);
  public final static native double general_joint_get_rotation(long jarg1, general_joint jarg1_);
  public final static native double general_joint_get_rotationSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native long general_joint_vec(long jarg1, general_joint jarg1_);
  public final static native long general_joint_vecSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native boolean general_joint_equals_val(long jarg1, general_joint jarg1_, long jarg2, general_joint jarg2_);
  public final static native boolean general_joint_equals_valSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, long jarg2, general_joint jarg2_);
  public final static native boolean general_joint_equals(long jarg1, general_joint jarg1_, long jarg2, general_joint jarg2_);
  public final static native boolean general_joint_equalsSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_, long jarg2, general_joint jarg2_);
  public final static native String general_joint_str(long jarg1, general_joint jarg1_);
  public final static native String general_joint_strSwigExplicitgeneral_joint(long jarg1, general_joint jarg1_);
  public final static native void general_joint_director_connect(general_joint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void general_joint_change_ownership(general_joint obj, long cptr, boolean take_or_release);
  public final static native long new_basis__SWIG_0();
  public final static native long new_basis__SWIG_1(long jarg1, vec3d jarg1_, long jarg2, vec3d jarg2_, long jarg3, vec3d jarg3_, long jarg4, vec3d jarg4_);
  public final static native void delete_basis(long jarg1);
  public final static native long basis_get_u(long jarg1, basis jarg1_);
  public final static native long basis_get_uSwigExplicitbasis(long jarg1, basis jarg1_);
  public final static native long basis_get_r(long jarg1, basis jarg1_);
  public final static native long basis_get_rSwigExplicitbasis(long jarg1, basis jarg1_);
  public final static native long basis_get_t(long jarg1, basis jarg1_);
  public final static native long basis_get_tSwigExplicitbasis(long jarg1, basis jarg1_);
  public final static native long basis_get_position_vector(long jarg1, basis jarg1_);
  public final static native long basis_get_position_vectorSwigExplicitbasis(long jarg1, basis jarg1_);
  public final static native void basis_set_u(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_uSwigExplicitbasis(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_r(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_rSwigExplicitbasis(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_t(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_tSwigExplicitbasis(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_position_vector(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native void basis_set_position_vectorSwigExplicitbasis(long jarg1, basis jarg1_, long jarg2, vec3d jarg2_);
  public final static native String basis_str(long jarg1, basis jarg1_);
  public final static native String basis_strSwigExplicitbasis(long jarg1, basis jarg1_);
  public final static native void basis_director_connect(basis obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void basis_change_ownership(basis obj, long cptr, boolean take_or_release);
  public final static native long new_general_skeleton__SWIG_0();
  public final static native long new_general_skeleton__SWIG_1(long jarg1, hierarchy jarg1_);
  public final static native void delete_general_skeleton(long jarg1);
  public final static native void general_skeleton_set_joint(long jarg1, general_skeleton jarg1_, int jarg2, long jarg3, general_joint jarg3_);
  public final static native void general_skeleton_set_jointSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, int jarg2, long jarg3, general_joint jarg3_);
  public final static native long general_skeleton_get_joint(long jarg1, general_skeleton jarg1_, int jarg2);
  public final static native long general_skeleton_get_jointSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, int jarg2);
  public final static native long general_skeleton_get_hierarchy(long jarg1, general_skeleton jarg1_);
  public final static native long general_skeleton_get_hierarchySwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native void general_skeleton_set_hierarchy(long jarg1, general_skeleton jarg1_, long jarg2, hierarchy jarg2_);
  public final static native void general_skeleton_set_hierarchySwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, long jarg2, hierarchy jarg2_);
  public final static native void general_skeleton_set_top_down(long jarg1, general_skeleton jarg1_, long jarg2, bone jarg2_);
  public final static native void general_skeleton_set_top_downSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, long jarg2, bone jarg2_);
  public final static native long general_skeleton_get_top_down(long jarg1, general_skeleton jarg1_);
  public final static native long general_skeleton_get_top_downSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native void general_skeleton_set_right_left(long jarg1, general_skeleton jarg1_, long jarg2, bone jarg2_);
  public final static native void general_skeleton_set_right_leftSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, long jarg2, bone jarg2_);
  public final static native long general_skeleton_get_right_left(long jarg1, general_skeleton jarg1_);
  public final static native long general_skeleton_get_right_leftSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native void general_skeleton_set_weight(long jarg1, general_skeleton jarg1_, long jarg2, vec3d jarg2_);
  public final static native void general_skeleton_set_weightSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, long jarg2, vec3d jarg2_);
  public final static native long general_skeleton_get_weight(long jarg1, general_skeleton jarg1_);
  public final static native long general_skeleton_get_weightSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native String general_skeleton_str(long jarg1, general_skeleton jarg1_);
  public final static native String general_skeleton_strSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native String general_skeleton_ply_str(long jarg1, general_skeleton jarg1_);
  public final static native String general_skeleton_ply_strSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_);
  public final static native void general_skeleton_ply_file(long jarg1, general_skeleton jarg1_, String jarg2);
  public final static native void general_skeleton_ply_fileSwigExplicitgeneral_skeleton(long jarg1, general_skeleton jarg1_, String jarg2);
  public final static native void general_skeleton_director_connect(general_skeleton obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void general_skeleton_change_ownership(general_skeleton obj, long cptr, boolean take_or_release);
  public final static native long new_fl_skeleton();
  public final static native void delete_fl_skeleton(long jarg1);
  public final static native void fl_skeleton_set_torso_basis(long jarg1, fl_skeleton jarg1_, long jarg2, basis jarg2_);
  public final static native void fl_skeleton_set_torso_basisSwigExplicitfl_skeleton(long jarg1, fl_skeleton jarg1_, long jarg2, basis jarg2_);
  public final static native long fl_skeleton_get_torso_basis(long jarg1, fl_skeleton jarg1_);
  public final static native long fl_skeleton_get_torso_basisSwigExplicitfl_skeleton(long jarg1, fl_skeleton jarg1_);
  public final static native void fl_skeleton_set_orig_skeleton(long jarg1, fl_skeleton jarg1_, long jarg2, general_skeleton jarg2_);
  public final static native void fl_skeleton_set_orig_skeletonSwigExplicitfl_skeleton(long jarg1, fl_skeleton jarg1_, long jarg2, general_skeleton jarg2_);
  public final static native long fl_skeleton_get_orig_skeleton(long jarg1, fl_skeleton jarg1_);
  public final static native long fl_skeleton_get_orig_skeletonSwigExplicitfl_skeleton(long jarg1, fl_skeleton jarg1_);
  public final static native String fl_skeleton_str(long jarg1, fl_skeleton jarg1_);
  public final static native String fl_skeleton_strSwigExplicitfl_skeleton(long jarg1, fl_skeleton jarg1_);
  public final static native void fl_skeleton_director_connect(fl_skeleton obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_skeleton_change_ownership(fl_skeleton obj, long cptr, boolean take_or_release);
  public final static native void delete_fl_skeleton_pose_detector(long jarg1);
  public final static native long fl_skeleton_pose_detector_pose(long jarg1, fl_skeleton_pose_detector jarg1_, long jarg2, fl_skeleton jarg2_, long jarg3, bone_vector jarg3_, long jarg4, general_pose jarg4_);
  public final static native long new_fl_skeleton_pose_detector();
  public final static native void fl_skeleton_pose_detector_director_connect(fl_skeleton_pose_detector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_skeleton_pose_detector_change_ownership(fl_skeleton_pose_detector obj, long cptr, boolean take_or_release);
  public final static native long new_fl_pose_detector__SWIG_0(double jarg1, boolean jarg2);
  public final static native long new_fl_pose_detector__SWIG_1(double jarg1);
  public final static native long new_fl_pose_detector__SWIG_2();
  public final static native void delete_fl_pose_detector(long jarg1);
  public final static native void fl_pose_detector_set_hysteresis_val(long jarg1, fl_pose_detector jarg1_, double jarg2);
  public final static native void fl_pose_detector_set_hysteresis_valSwigExplicitfl_pose_detector(long jarg1, fl_pose_detector jarg1_, double jarg2);
  public final static native double fl_pose_detector_get_hysteresis_val(long jarg1, fl_pose_detector jarg1_);
  public final static native double fl_pose_detector_get_hysteresis_valSwigExplicitfl_pose_detector(long jarg1, fl_pose_detector jarg1_);
  public final static native long fl_pose_detector_pose(long jarg1, fl_pose_detector jarg1_, long jarg2, fl_skeleton jarg2_, long jarg3, bone_vector jarg3_, long jarg4, general_pose jarg4_);
  public final static native long fl_pose_detector_poseSwigExplicitfl_pose_detector(long jarg1, fl_pose_detector jarg1_, long jarg2, fl_skeleton jarg2_, long jarg3, bone_vector jarg3_, long jarg4, general_pose jarg4_);
  public final static native long fl_pose_detector_vector_pose(long jarg1, fl_pose_detector jarg1_, long jarg2, fl_skeleton jarg2_, long jarg3, bone_vector jarg3_, long jarg4, general_pose jarg4_);
  public final static native long fl_pose_detector_vector_poseSwigExplicitfl_pose_detector(long jarg1, fl_pose_detector jarg1_, long jarg2, fl_skeleton jarg2_, long jarg3, bone_vector jarg3_, long jarg4, general_pose jarg4_);
  public final static native double fl_pose_detector_default_hysteresis_val();
  public final static native void fl_pose_detector_director_connect(fl_pose_detector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_pose_detector_change_ownership(fl_pose_detector obj, long cptr, boolean take_or_release);
  public final static native void delete_i_pre_sign(long jarg1);
  public final static native String i_pre_sign_xml__SWIG_0(long jarg1, i_pre_sign jarg1_, long jarg2, String jarg3);
  public final static native String i_pre_sign_xml__SWIG_1(long jarg1, i_pre_sign jarg1_, long jarg2);
  public final static native String i_pre_sign_xml__SWIG_2(long jarg1, i_pre_sign jarg1_);
  public final static native String i_pre_sign_svg__SWIG_0(long jarg1, i_pre_sign jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String i_pre_sign_svg__SWIG_1(long jarg1, i_pre_sign jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean i_pre_sign_equals(long jarg1, i_pre_sign jarg1_, long jarg2, i_pre_sign jarg2_);
  public final static native long new_i_pre_sign();
  public final static native void i_pre_sign_director_connect(i_pre_sign obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_pre_sign_change_ownership(i_pre_sign obj, long cptr, boolean take_or_release);
  public final static native long new_column_definition__SWIG_0(int jarg1, long jarg2, i_pre_sign jarg2_);
  public final static native long new_column_definition__SWIG_1(int jarg1);
  public final static native void delete_column_definition(long jarg1);
  public final static native int column_definition_get_column_index(long jarg1, column_definition jarg1_);
  public final static native long column_definition_get_pre_sign(long jarg1, column_definition jarg1_);
  public final static native String column_definition_xml__SWIG_0(long jarg1, column_definition jarg1_, long jarg2, String jarg3);
  public final static native String column_definition_xmlSwigExplicitcolumn_definition__SWIG_0(long jarg1, column_definition jarg1_, long jarg2, String jarg3);
  public final static native String column_definition_xml__SWIG_1(long jarg1, column_definition jarg1_, long jarg2);
  public final static native String column_definition_xmlSwigExplicitcolumn_definition__SWIG_1(long jarg1, column_definition jarg1_, long jarg2);
  public final static native String column_definition_xml__SWIG_2(long jarg1, column_definition jarg1_);
  public final static native String column_definition_xmlSwigExplicitcolumn_definition__SWIG_2(long jarg1, column_definition jarg1_);
  public final static native String column_definition_svg(long jarg1, column_definition jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native String column_definition_svgSwigExplicitcolumn_definition(long jarg1, column_definition jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native boolean column_definition_equals(long jarg1, column_definition jarg1_, long jarg2, column_definition jarg2_);
  public final static native boolean column_definition_equalsSwigExplicitcolumn_definition(long jarg1, column_definition jarg1_, long jarg2, column_definition jarg2_);
  public final static native long column_definition_default_definitions();
  public final static native void column_definition_director_connect(column_definition obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void column_definition_change_ownership(column_definition obj, long cptr, boolean take_or_release);
  public final static native long new_coldef_vector__SWIG_0();
  public final static native long new_coldef_vector__SWIG_1(long jarg1);
  public final static native long coldef_vector_size(long jarg1, coldef_vector jarg1_);
  public final static native long coldef_vector_capacity(long jarg1, coldef_vector jarg1_);
  public final static native void coldef_vector_reserve(long jarg1, coldef_vector jarg1_, long jarg2);
  public final static native boolean coldef_vector_isEmpty(long jarg1, coldef_vector jarg1_);
  public final static native void coldef_vector_clear(long jarg1, coldef_vector jarg1_);
  public final static native void coldef_vector_add(long jarg1, coldef_vector jarg1_, long jarg2, column_definition jarg2_);
  public final static native long coldef_vector_get(long jarg1, coldef_vector jarg1_, int jarg2);
  public final static native void coldef_vector_set(long jarg1, coldef_vector jarg1_, int jarg2, long jarg3, column_definition jarg3_);
  public final static native void delete_coldef_vector(long jarg1);
  public final static native void delete_i_movement(long jarg1);
  public final static native int i_movement_get_column(long jarg1, i_movement jarg1_);
  public final static native long i_movement_get_measure(long jarg1, i_movement jarg1_);
  public final static native double i_movement_get_beat(long jarg1, i_movement jarg1_);
  public final static native double i_movement_get_duration(long jarg1, i_movement jarg1_);
  public final static native boolean i_movement_equals(long jarg1, i_movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean i_movement_symbol_equals(long jarg1, i_movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native String i_movement_xml__SWIG_0(long jarg1, i_movement jarg1_, long jarg2, String jarg3);
  public final static native String i_movement_xml__SWIG_1(long jarg1, i_movement jarg1_, long jarg2);
  public final static native String i_movement_xml__SWIG_2(long jarg1, i_movement jarg1_);
  public final static native String i_movement_svg(long jarg1, i_movement jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long i_movement_recreate(long jarg1, i_movement jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native String i_movement_str(long jarg1, i_movement jarg1_);
  public final static native long new_i_movement();
  public final static native void i_movement_director_connect(i_movement obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_movement_change_ownership(i_movement obj, long cptr, boolean take_or_release);
  public final static native long new_int_int_map__SWIG_0();
  public final static native long new_int_int_map__SWIG_1(long jarg1, int_int_map jarg1_);
  public final static native long int_int_map_size(long jarg1, int_int_map jarg1_);
  public final static native boolean int_int_map_empty(long jarg1, int_int_map jarg1_);
  public final static native void int_int_map_clear(long jarg1, int_int_map jarg1_);
  public final static native int int_int_map_get(long jarg1, int_int_map jarg1_, int jarg2);
  public final static native void int_int_map_set(long jarg1, int_int_map jarg1_, int jarg2, int jarg3);
  public final static native void int_int_map_del(long jarg1, int_int_map jarg1_, int jarg2);
  public final static native boolean int_int_map_has_key(long jarg1, int_int_map jarg1_, int jarg2);
  public final static native void delete_int_int_map(long jarg1);
  public final static native String e_time_unit_c_str(int jarg1);
  public final static native long e_time_unit_c_vec();
  public final static native int e_time_unit_c_parse(String jarg1);
  public final static native long new_e_time_unit_c();
  public final static native void delete_e_time_unit_c(long jarg1);
  public final static native long new_e_time_unit_vector__SWIG_0();
  public final static native long new_e_time_unit_vector__SWIG_1(long jarg1);
  public final static native long e_time_unit_vector_size(long jarg1, e_time_unit_vector jarg1_);
  public final static native long e_time_unit_vector_capacity(long jarg1, e_time_unit_vector jarg1_);
  public final static native void e_time_unit_vector_reserve(long jarg1, e_time_unit_vector jarg1_, long jarg2);
  public final static native boolean e_time_unit_vector_isEmpty(long jarg1, e_time_unit_vector jarg1_);
  public final static native void e_time_unit_vector_clear(long jarg1, e_time_unit_vector jarg1_);
  public final static native void e_time_unit_vector_add(long jarg1, e_time_unit_vector jarg1_, int jarg2);
  public final static native int e_time_unit_vector_get(long jarg1, e_time_unit_vector jarg1_, int jarg2);
  public final static native void e_time_unit_vector_set(long jarg1, e_time_unit_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_time_unit_vector(long jarg1);
  public final static native long new_laban_sequence__SWIG_0();
  public final static native long new_laban_sequence__SWIG_1(String jarg1, String jarg2, long jarg3, int jarg4, long jarg5, long jarg6);
  public final static native void delete_laban_sequence(long jarg1);
  public final static native String laban_sequence_get_version(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_get_versionSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_authors(long jarg1, laban_sequence jarg1_, long jarg2, string_vector jarg2_);
  public final static native void laban_sequence_set_authorsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, string_vector jarg2_);
  public final static native void laban_sequence_add_author(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native void laban_sequence_add_authorSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native long laban_sequence_get_authors(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_authorsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_title(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native void laban_sequence_set_titleSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_get_title(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_get_titleSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_description(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native void laban_sequence_set_descriptionSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_get_description(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_get_descriptionSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_measures(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native void laban_sequence_set_measuresSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native long laban_sequence_get_measures(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_measuresSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_time_unit(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native void laban_sequence_set_time_unitSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native int laban_sequence_get_time_unit(long jarg1, laban_sequence jarg1_);
  public final static native int laban_sequence_get_time_unitSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_beat_duration(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native void laban_sequence_set_beat_durationSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native long laban_sequence_get_beat_duration(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_beat_durationSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_beats(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native void laban_sequence_set_beatsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2);
  public final static native long laban_sequence_get_beats(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_beatsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_column_definitions(long jarg1, laban_sequence jarg1_, long jarg2, coldef_vector jarg2_);
  public final static native void laban_sequence_set_column_definitionsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, coldef_vector jarg2_);
  public final static native void laban_sequence_add_column_definition(long jarg1, laban_sequence jarg1_, long jarg2, column_definition jarg2_);
  public final static native void laban_sequence_add_column_definitionSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, column_definition jarg2_);
  public final static native long laban_sequence_get_column_definitions(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_column_definitionsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_column_definition(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native long laban_sequence_get_column_definitionSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native void laban_sequence_clear_column_definitions(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_clear_column_definitionsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_columns(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_columnsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_set_movements(long jarg1, laban_sequence jarg1_, long jarg2, i_mov_vector jarg2_);
  public final static native void laban_sequence_set_movementsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, i_mov_vector jarg2_);
  public final static native long laban_sequence_get_movements(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_movementsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_add_movement(long jarg1, laban_sequence jarg1_, long jarg2, i_movement jarg2_);
  public final static native void laban_sequence_add_movementSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, i_movement jarg2_);
  public final static native long laban_sequence_get_column_movements(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native long laban_sequence_get_column_movementsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, int jarg2);
  public final static native long laban_sequence_get_last_movement(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_get_last_movementSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_clear_movements(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_clear_movementsSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml__SWIG_0(long jarg1, laban_sequence jarg1_, boolean jarg2, long jarg3, String jarg4);
  public final static native String laban_sequence_xmlSwigExplicitlaban_sequence__SWIG_0(long jarg1, laban_sequence jarg1_, boolean jarg2, long jarg3, String jarg4);
  public final static native String laban_sequence_xml__SWIG_1(long jarg1, laban_sequence jarg1_, boolean jarg2, long jarg3);
  public final static native String laban_sequence_xmlSwigExplicitlaban_sequence__SWIG_1(long jarg1, laban_sequence jarg1_, boolean jarg2, long jarg3);
  public final static native String laban_sequence_xml__SWIG_2(long jarg1, laban_sequence jarg1_, boolean jarg2);
  public final static native String laban_sequence_xmlSwigExplicitlaban_sequence__SWIG_2(long jarg1, laban_sequence jarg1_, boolean jarg2);
  public final static native String laban_sequence_xml__SWIG_3(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xmlSwigExplicitlaban_sequence__SWIG_3(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_namespace_header__SWIG_0(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_xml_namespace_headerSwigExplicitlaban_sequence__SWIG_0(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_xml_namespace_header__SWIG_1(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_namespace_headerSwigExplicitlaban_sequence__SWIG_1(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_schema_location(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_schema_locationSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_namespace_uri(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_xml_namespace_uriSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native void laban_sequence_xml_file(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native void laban_sequence_xml_fileSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_svg(long jarg1, laban_sequence jarg1_, long jarg2, long jarg3);
  public final static native String laban_sequence_svgSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, long jarg2, long jarg3);
  public final static native void laban_sequence_svg_file__SWIG_0(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native void laban_sequence_svg_fileSwigExplicitlaban_sequence__SWIG_0(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native void laban_sequence_svg_file__SWIG_1(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3);
  public final static native void laban_sequence_svg_fileSwigExplicitlaban_sequence__SWIG_1(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3);
  public final static native void laban_sequence_svg_file__SWIG_2(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native void laban_sequence_svg_fileSwigExplicitlaban_sequence__SWIG_2(long jarg1, laban_sequence jarg1_, String jarg2);
  public final static native String laban_sequence_str(long jarg1, laban_sequence jarg1_);
  public final static native String laban_sequence_strSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_);
  public final static native long laban_sequence_default_beat_duration();
  public final static native long laban_sequence_default_beats_per_measure();
  public final static native int laban_sequence_default_time_unit();
  public final static native long laban_sequence_default_columns();
  public final static native String laban_sequence_svg_fill_pattern(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native String laban_sequence_svg_fill_patternSwigExplicitlaban_sequence(long jarg1, laban_sequence jarg1_, String jarg2, long jarg3, long jarg4);
  public final static native void laban_sequence_director_connect(laban_sequence obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_change_ownership(laban_sequence obj, long cptr, boolean take_or_release);
  public final static native long new_i_mov_vector__SWIG_0();
  public final static native long new_i_mov_vector__SWIG_1(long jarg1);
  public final static native long i_mov_vector_size(long jarg1, i_mov_vector jarg1_);
  public final static native long i_mov_vector_capacity(long jarg1, i_mov_vector jarg1_);
  public final static native void i_mov_vector_reserve(long jarg1, i_mov_vector jarg1_, long jarg2);
  public final static native boolean i_mov_vector_isEmpty(long jarg1, i_mov_vector jarg1_);
  public final static native void i_mov_vector_clear(long jarg1, i_mov_vector jarg1_);
  public final static native void i_mov_vector_add(long jarg1, i_mov_vector jarg1_, long jarg2, i_movement jarg2_);
  public final static native long i_mov_vector_get(long jarg1, i_mov_vector jarg1_, int jarg2);
  public final static native void i_mov_vector_set(long jarg1, i_mov_vector jarg1_, int jarg2, long jarg3, i_movement jarg3_);
  public final static native void delete_i_mov_vector(long jarg1);
  public final static native void delete_i_movement_decision_maker(long jarg1);
  public final static native void i_movement_decision_maker_set_recognition_tolerance(long jarg1, i_movement_decision_maker jarg1_, double jarg2);
  public final static native double i_movement_decision_maker_get_recognition_tolerance(long jarg1, i_movement_decision_maker jarg1_);
  public final static native boolean i_movement_decision_maker_decide_match(long jarg1, i_movement_decision_maker jarg1_, long jarg2, i_movement jarg2_, long jarg3, i_movement jarg3_, long jarg4, i_movement jarg4_, long jarg5, i_movement jarg5_);
  public final static native boolean i_movement_decision_maker_decide_insertion(long jarg1, i_movement_decision_maker jarg1_, long jarg2, i_movement jarg2_, long jarg3, i_movement jarg3_, long jarg4, i_movement jarg4_, long jarg5, i_movement jarg5_);
  public final static native boolean i_movement_decision_maker_position_okay(long jarg1, i_movement_decision_maker jarg1_, double jarg2, double jarg3, boolean jarg4);
  public final static native long new_i_movement_decision_maker();
  public final static native void i_movement_decision_maker_director_connect(i_movement_decision_maker obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_movement_decision_maker_change_ownership(i_movement_decision_maker obj, long cptr, boolean take_or_release);
  public final static native long new_rewriting_forest__SWIG_0(long jarg1, long jarg2, int jarg3, double jarg4);
  public final static native long new_rewriting_forest__SWIG_1(long jarg1, long jarg2, int jarg3);
  public final static native long new_rewriting_forest__SWIG_2(long jarg1, long jarg2);
  public final static native long new_rewriting_forest__SWIG_3(long jarg1);
  public final static native long new_rewriting_forest__SWIG_4();
  public final static native long new_rewriting_forest__SWIG_5(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2, long jarg3, int jarg4, double jarg5);
  public final static native long new_rewriting_forest__SWIG_6(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_rewriting_forest__SWIG_7(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2, long jarg3);
  public final static native long new_rewriting_forest__SWIG_8(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2);
  public final static native long new_rewriting_forest__SWIG_9(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_);
  public final static native void delete_rewriting_forest(long jarg1);
  public final static native double rewriting_forest_get_tolerance(long jarg1, rewriting_forest jarg1_);
  public final static native double rewriting_forest_get_toleranceSwigExplicitrewriting_forest(long jarg1, rewriting_forest jarg1_);
  public final static native void rewriting_forest_set_tolerance(long jarg1, rewriting_forest jarg1_, double jarg2);
  public final static native void rewriting_forest_set_toleranceSwigExplicitrewriting_forest(long jarg1, rewriting_forest jarg1_, double jarg2);
  public final static native long rewriting_forest_replacements(long jarg1, rewriting_forest jarg1_, long jarg2, i_mov_vector jarg2_);
  public final static native long rewriting_forest_replacementsSwigExplicitrewriting_forest(long jarg1, rewriting_forest jarg1_, long jarg2, i_mov_vector jarg2_);
  public final static native void rewriting_forest_add_rule__SWIG_0(long jarg1, rewriting_forest jarg1_, long jarg2, i_mov_vector jarg2_, long jarg3);
  public final static native void rewriting_forest_add_ruleSwigExplicitrewriting_forest__SWIG_0(long jarg1, rewriting_forest jarg1_, long jarg2, i_mov_vector jarg2_, long jarg3);
  public final static native void rewriting_forest_add_rule__SWIG_1(long jarg1, rewriting_forest jarg1_, long jarg2);
  public final static native void rewriting_forest_add_ruleSwigExplicitrewriting_forest__SWIG_1(long jarg1, rewriting_forest jarg1_, long jarg2);
  public final static native String rewriting_forest_str(long jarg1, rewriting_forest jarg1_);
  public final static native String rewriting_forest_strSwigExplicitrewriting_forest(long jarg1, rewriting_forest jarg1_);
  public final static native void rewriting_forest_director_connect(rewriting_forest obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void rewriting_forest_change_ownership(rewriting_forest obj, long cptr, boolean take_or_release);
  public final static native long new_i_mov_vector_vector__SWIG_0();
  public final static native long new_i_mov_vector_vector__SWIG_1(long jarg1);
  public final static native long i_mov_vector_vector_size(long jarg1, i_mov_vector_vector jarg1_);
  public final static native long i_mov_vector_vector_capacity(long jarg1, i_mov_vector_vector jarg1_);
  public final static native void i_mov_vector_vector_reserve(long jarg1, i_mov_vector_vector jarg1_, long jarg2);
  public final static native boolean i_mov_vector_vector_isEmpty(long jarg1, i_mov_vector_vector jarg1_);
  public final static native void i_mov_vector_vector_clear(long jarg1, i_mov_vector_vector jarg1_);
  public final static native void i_mov_vector_vector_add(long jarg1, i_mov_vector_vector jarg1_, long jarg2, i_mov_vector jarg2_);
  public final static native long i_mov_vector_vector_get(long jarg1, i_mov_vector_vector jarg1_, int jarg2);
  public final static native void i_mov_vector_vector_set(long jarg1, i_mov_vector_vector jarg1_, int jarg2, long jarg3, i_mov_vector jarg3_);
  public final static native void delete_i_mov_vector_vector(long jarg1);
  public final static native long new_i_mov_vector_vector_dec_val__SWIG_0(long jarg1, i_mov_vector jarg1_, long jarg2);
  public final static native long new_i_mov_vector_vector_dec_val__SWIG_1(long jarg1);
  public final static native void delete_i_mov_vector_vector_dec_val(long jarg1);
  public final static native long i_mov_vector_vector_dec_val_get_sequence(long jarg1, i_mov_vector_vector_dec_val jarg1_);
  public final static native long i_mov_vector_vector_dec_val_get_sequenceSwigExpliciti_mov_vector_vector_dec_val(long jarg1, i_mov_vector_vector_dec_val jarg1_);
  public final static native long i_mov_vector_vector_dec_val_get_value(long jarg1, i_mov_vector_vector_dec_val jarg1_);
  public final static native long i_mov_vector_vector_dec_val_get_valueSwigExpliciti_mov_vector_vector_dec_val(long jarg1, i_mov_vector_vector_dec_val jarg1_);
  public final static native void i_mov_vector_vector_dec_val_director_connect(i_mov_vector_vector_dec_val obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_mov_vector_vector_dec_val_change_ownership(i_mov_vector_vector_dec_val obj, long cptr, boolean take_or_release);
  public final static native long new_i_mov_vector_vector_dec_val_vector__SWIG_0();
  public final static native long new_i_mov_vector_vector_dec_val_vector__SWIG_1(long jarg1);
  public final static native long i_mov_vector_vector_dec_val_vector_size(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_);
  public final static native long i_mov_vector_vector_dec_val_vector_capacity(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_);
  public final static native void i_mov_vector_vector_dec_val_vector_reserve(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2);
  public final static native boolean i_mov_vector_vector_dec_val_vector_isEmpty(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_);
  public final static native void i_mov_vector_vector_dec_val_vector_clear(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_);
  public final static native void i_mov_vector_vector_dec_val_vector_add(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, long jarg2);
  public final static native long i_mov_vector_vector_dec_val_vector_get(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, int jarg2);
  public final static native void i_mov_vector_vector_dec_val_vector_set(long jarg1, i_mov_vector_vector_dec_val_vector jarg1_, int jarg2, long jarg3);
  public final static native void delete_i_mov_vector_vector_dec_val_vector(long jarg1);
  public final static native long new_decision_forest__SWIG_0(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4, int jarg5, double jarg6, long jarg7, long jarg8, rewriting_forest jarg8_, boolean jarg9);
  public final static native long new_decision_forest__SWIG_1(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4, int jarg5, double jarg6, long jarg7, long jarg8, rewriting_forest jarg8_);
  public final static native long new_decision_forest__SWIG_2(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4, int jarg5, double jarg6, long jarg7);
  public final static native long new_decision_forest__SWIG_3(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4, int jarg5, double jarg6);
  public final static native long new_decision_forest__SWIG_4(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4, int jarg5);
  public final static native long new_decision_forest__SWIG_5(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3, long jarg4);
  public final static native long new_decision_forest__SWIG_6(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_, long jarg3);
  public final static native long new_decision_forest__SWIG_7(long jarg1, coldef_vector jarg1_, long jarg2, int_vector jarg2_);
  public final static native long new_decision_forest__SWIG_8(long jarg1, coldef_vector jarg1_);
  public final static native long new_decision_forest__SWIG_9();
  public final static native void delete_decision_forest(long jarg1);
  public final static native void decision_forest_set_recognition_tolerance(long jarg1, decision_forest jarg1_, double jarg2);
  public final static native void decision_forest_set_recognition_toleranceSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_, double jarg2);
  public final static native void decision_forest_set_cooldown(long jarg1, decision_forest jarg1_, boolean jarg2);
  public final static native void decision_forest_set_cooldownSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_, boolean jarg2);
  public final static native boolean decision_forest_get_cooldown(long jarg1, decision_forest jarg1_);
  public final static native boolean decision_forest_get_cooldownSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_);
  public final static native int decision_forest_get_sequence_length(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native int decision_forest_get_sequence_lengthSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void decision_forest_add_sequence(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void decision_forest_add_sequenceSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean decision_forest_remove_sequence__SWIG_0(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean decision_forest_remove_sequenceSwigExplicitdecision_forest__SWIG_0(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean decision_forest_remove_sequence__SWIG_1(long jarg1, decision_forest jarg1_, long jarg2);
  public final static native boolean decision_forest_remove_sequenceSwigExplicitdecision_forest__SWIG_1(long jarg1, decision_forest jarg1_, long jarg2);
  public final static native void decision_forest_clear(long jarg1, decision_forest jarg1_);
  public final static native void decision_forest_clearSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_);
  public final static native void decision_forest_add_rewriting_rule__SWIG_0(long jarg1, decision_forest jarg1_, long jarg2, i_mov_vector jarg2_, long jarg3);
  public final static native void decision_forest_add_rewriting_ruleSwigExplicitdecision_forest__SWIG_0(long jarg1, decision_forest jarg1_, long jarg2, i_mov_vector jarg2_, long jarg3);
  public final static native void decision_forest_add_rewriting_rule__SWIG_1(long jarg1, decision_forest jarg1_, long jarg2);
  public final static native void decision_forest_add_rewriting_ruleSwigExplicitdecision_forest__SWIG_1(long jarg1, decision_forest jarg1_, long jarg2);
  public final static native long decision_forest_recreate_sequence(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native long decision_forest_get_sequences(long jarg1, decision_forest jarg1_);
  public final static native long decision_forest_get_sequencesSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_);
  public final static native long decision_forest_find_submatches(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_, long jarg3, bone_vector jarg3_);
  public final static native long decision_forest_find_submatchesSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_, long jarg2, laban_sequence jarg2_, long jarg3, bone_vector jarg3_);
  public final static native String decision_forest_str(long jarg1, decision_forest jarg1_);
  public final static native String decision_forest_strSwigExplicitdecision_forest(long jarg1, decision_forest jarg1_);
  public final static native void decision_forest_director_connect(decision_forest obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void decision_forest_change_ownership(decision_forest obj, long cptr, boolean take_or_release);
  public final static native void delete_i_dec_maker(long jarg1);
  public final static native void i_dec_maker_set_recognition_tolerance(long jarg1, i_movement_decision_maker jarg1_, double jarg2);
  public final static native double i_dec_maker_get_recognition_tolerance(long jarg1, i_movement_decision_maker jarg1_);
  public final static native boolean i_dec_maker_decide_match(long jarg1, i_movement_decision_maker jarg1_, long jarg2, i_movement jarg2_, long jarg3, i_movement jarg3_, long jarg4, i_movement jarg4_, long jarg5, i_movement jarg5_);
  public final static native boolean i_dec_maker_decide_insertion(long jarg1, i_movement_decision_maker jarg1_, long jarg2, i_movement jarg2_, long jarg3, i_movement jarg3_, long jarg4, i_movement jarg4_, long jarg5, i_movement jarg5_);
  public final static native boolean i_dec_maker_position_okay(long jarg1, i_movement_decision_maker jarg1_, double jarg2, double jarg3, boolean jarg4);
  public final static native long new_i_dec_maker();
  public final static native void i_dec_maker_director_connect(i_dec_maker obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_dec_maker_change_ownership(i_dec_maker obj, long cptr, boolean take_or_release);
  public final static native long new_laban_sequence_vector__SWIG_0();
  public final static native long new_laban_sequence_vector__SWIG_1(long jarg1);
  public final static native long laban_sequence_vector_size(long jarg1, laban_sequence_vector jarg1_);
  public final static native long laban_sequence_vector_capacity(long jarg1, laban_sequence_vector jarg1_);
  public final static native void laban_sequence_vector_reserve(long jarg1, laban_sequence_vector jarg1_, long jarg2);
  public final static native boolean laban_sequence_vector_isEmpty(long jarg1, laban_sequence_vector jarg1_);
  public final static native void laban_sequence_vector_clear(long jarg1, laban_sequence_vector jarg1_);
  public final static native void laban_sequence_vector_add(long jarg1, laban_sequence_vector jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native long laban_sequence_vector_get(long jarg1, laban_sequence_vector jarg1_, int jarg2);
  public final static native void laban_sequence_vector_set(long jarg1, laban_sequence_vector jarg1_, int jarg2, long jarg3, laban_sequence jarg3_);
  public final static native void delete_laban_sequence_vector(long jarg1);
  public final static native long new_laban_sequence_list();
  public final static native long laban_sequence_list_size(long jarg1, laban_sequence_list jarg1_);
  public final static native boolean laban_sequence_list_isEmpty(long jarg1, laban_sequence_list jarg1_);
  public final static native void laban_sequence_list_clear(long jarg1, laban_sequence_list jarg1_);
  public final static native void laban_sequence_list_add(long jarg1, laban_sequence_list jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native long laban_sequence_list_get(long jarg1, laban_sequence_list jarg1_, int jarg2);
  public final static native void delete_laban_sequence_list(long jarg1);
  public final static native void delete_laban_sequence_sequence_recognizer(long jarg1);
  public final static native void laban_sequence_sequence_recognizer_register_sequence(long jarg1, laban_sequence_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean laban_sequence_sequence_recognizer_deregister_sequence__SWIG_0(long jarg1, laban_sequence_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean laban_sequence_sequence_recognizer_deregister_sequence__SWIG_1(long jarg1, laban_sequence_sequence_recognizer jarg1_, long jarg2);
  public final static native void laban_sequence_sequence_recognizer_clear_registered_sequences(long jarg1, laban_sequence_sequence_recognizer jarg1_);
  public final static native int laban_sequence_sequence_recognizer_get_sequence_length(long jarg1, laban_sequence_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native long laban_sequence_sequence_recognizer_recognize_sequence(long jarg1, laban_sequence_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_, long jarg3, bone_vector jarg3_);
  public final static native long new_laban_sequence_sequence_recognizer();
  public final static native void laban_sequence_sequence_recognizer_director_connect(laban_sequence_sequence_recognizer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_sequence_recognizer_change_ownership(laban_sequence_sequence_recognizer obj, long cptr, boolean take_or_release);
  public final static native long new_laban_sequence_recognizer__SWIG_0(double jarg1, boolean jarg2);
  public final static native long new_laban_sequence_recognizer__SWIG_1(double jarg1);
  public final static native long new_laban_sequence_recognizer__SWIG_2();
  public final static native long new_laban_sequence_recognizer__SWIG_3(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3, int jarg4, double jarg5, boolean jarg6);
  public final static native long new_laban_sequence_recognizer__SWIG_4(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3, int jarg4, double jarg5);
  public final static native long new_laban_sequence_recognizer__SWIG_5(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_laban_sequence_recognizer__SWIG_6(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3);
  public final static native long new_laban_sequence_recognizer__SWIG_7(long jarg1, coldef_vector jarg1_, long jarg2);
  public final static native long new_laban_sequence_recognizer__SWIG_8(long jarg1, coldef_vector jarg1_);
  public final static native void delete_laban_sequence_recognizer(long jarg1);
  public final static native void laban_sequence_recognizer_set_recognition_tolerance(long jarg1, laban_sequence_recognizer jarg1_, double jarg2);
  public final static native void laban_sequence_recognizer_set_recognition_toleranceSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_, double jarg2);
  public final static native long laban_sequence_recognizer_get_decision_forest(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native long laban_sequence_recognizer_get_decision_forestSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native void laban_sequence_recognizer_register_sequence(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void laban_sequence_recognizer_register_sequenceSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean laban_sequence_recognizer_deregister_sequence__SWIG_0(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean laban_sequence_recognizer_deregister_sequenceSwigExplicitlaban_sequence_recognizer__SWIG_0(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native boolean laban_sequence_recognizer_deregister_sequence__SWIG_1(long jarg1, laban_sequence_recognizer jarg1_, long jarg2);
  public final static native boolean laban_sequence_recognizer_deregister_sequenceSwigExplicitlaban_sequence_recognizer__SWIG_1(long jarg1, laban_sequence_recognizer jarg1_, long jarg2);
  public final static native void laban_sequence_recognizer_clear_registered_sequences(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native void laban_sequence_recognizer_clear_registered_sequencesSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native long laban_sequence_recognizer_get_registered_sequences(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native long laban_sequence_recognizer_get_registered_sequencesSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native int laban_sequence_recognizer_get_sequence_length(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native int laban_sequence_recognizer_get_sequence_lengthSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native long laban_sequence_recognizer_recognize_sequence(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_, long jarg3, bone_vector jarg3_);
  public final static native long laban_sequence_recognizer_recognize_sequenceSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_, long jarg2, laban_sequence jarg2_, long jarg3, bone_vector jarg3_);
  public final static native String laban_sequence_recognizer_str(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native String laban_sequence_recognizer_strSwigExplicitlaban_sequence_recognizer(long jarg1, laban_sequence_recognizer jarg1_);
  public final static native void laban_sequence_recognizer_director_connect(laban_sequence_recognizer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_recognizer_change_ownership(laban_sequence_recognizer obj, long cptr, boolean take_or_release);
  public final static native void delete_laban_sequence_sequence_generator(long jarg1);
  public final static native long laban_sequence_sequence_generator_generate_sequence(long jarg1, laban_sequence_sequence_generator jarg1_, double jarg2, long jarg3, enriched_pose_list jarg3_, long jarg4, bone_vector jarg4_);
  public final static native long new_laban_sequence_sequence_generator();
  public final static native void laban_sequence_sequence_generator_director_connect(laban_sequence_sequence_generator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_sequence_generator_change_ownership(laban_sequence_sequence_generator obj, long cptr, boolean take_or_release);
  public final static native long new_laban_sequence_generator__SWIG_0(boolean jarg1);
  public final static native long new_laban_sequence_generator__SWIG_1();
  public final static native long new_laban_sequence_generator__SWIG_2(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3, int jarg4, boolean jarg5);
  public final static native long new_laban_sequence_generator__SWIG_3(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native long new_laban_sequence_generator__SWIG_4(long jarg1, coldef_vector jarg1_, long jarg2, long jarg3);
  public final static native long new_laban_sequence_generator__SWIG_5(long jarg1, coldef_vector jarg1_, long jarg2);
  public final static native long new_laban_sequence_generator__SWIG_6(long jarg1, coldef_vector jarg1_);
  public final static native void delete_laban_sequence_generator(long jarg1);
  public final static native long laban_sequence_generator_generate_sequence(long jarg1, laban_sequence_generator jarg1_, double jarg2, long jarg3, enriched_pose_list jarg3_, long jarg4, bone_vector jarg4_);
  public final static native long laban_sequence_generator_generate_sequenceSwigExplicitlaban_sequence_generator(long jarg1, laban_sequence_generator jarg1_, double jarg2, long jarg3, enriched_pose_list jarg3_, long jarg4, bone_vector jarg4_);
  public final static native void laban_sequence_generator_director_connect(laban_sequence_generator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_generator_change_ownership(laban_sequence_generator obj, long cptr, boolean take_or_release);
  public final static native void delete_laban_sequence_sequence_listener(long jarg1);
  public final static native void laban_sequence_sequence_listener_on_sequence(long jarg1, laban_sequence_sequence_listener jarg1_, int jarg2, long jarg3, laban_sequence jarg3_);
  public final static native long new_laban_sequence_sequence_listener();
  public final static native void laban_sequence_sequence_listener_director_connect(laban_sequence_sequence_listener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_sequence_listener_change_ownership(laban_sequence_sequence_listener obj, long cptr, boolean take_or_release);
  public final static native void delete_laban_sequence_recognition_listener(long jarg1);
  public final static native void laban_sequence_recognition_listener_on_recognition__SWIG_0(long jarg1, laban_sequence_recognition_listener jarg1_, int jarg2, long jarg3, laban_sequence_vector jarg3_);
  public final static native void laban_sequence_recognition_listener_on_recognition__SWIG_1(long jarg1, laban_sequence_recognition_listener jarg1_, int jarg2, long jarg3, string_vector jarg3_);
  public final static native long new_laban_sequence_recognition_listener();
  public final static native void laban_sequence_recognition_listener_director_connect(laban_sequence_recognition_listener obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_recognition_listener_change_ownership(laban_sequence_recognition_listener obj, long cptr, boolean take_or_release);
  public final static native void delete_fl_skeleton_laban_sequence_movement_detector(long jarg1);
  public final static native long fl_skeleton_laban_sequence_movement_detector_detect_movement(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, int jarg2, double jarg3, long jarg4, fl_skeleton jarg4_, long jarg5, bone_vector jarg5_);
  public final static native void fl_skeleton_laban_sequence_movement_detector_set_buffer(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, int jarg2);
  public final static native void fl_skeleton_laban_sequence_movement_detector_clear_buffer(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_detector_add_listener(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_detector_remove_listener(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_detector_clear_listeners(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_detector_notify_listeners(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, int jarg2, long jarg3, general_pose jarg3_);
  public final static native long new_fl_skeleton_laban_sequence_movement_detector();
  public final static native void fl_skeleton_laban_sequence_movement_detector_director_connect(fl_skeleton_laban_sequence_movement_detector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_skeleton_laban_sequence_movement_detector_change_ownership(fl_skeleton_laban_sequence_movement_detector obj, long cptr, boolean take_or_release);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_0(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, long jarg3, bone_vector jarg3_, int jarg4, double jarg5, boolean jarg6);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_1(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, long jarg3, bone_vector jarg3_, int jarg4, double jarg5);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_2(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, long jarg3, bone_vector jarg3_, int jarg4);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_3(long jarg1, fl_skeleton_laban_sequence_movement_detector jarg1_, long jarg2, long jarg3, bone_vector jarg3_);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_4(long jarg1, long jarg2, long jarg3, long jarg4, bone_vector jarg4_, int jarg5, double jarg6, boolean jarg7);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_5(long jarg1, long jarg2, long jarg3, long jarg4, bone_vector jarg4_, int jarg5, double jarg6);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_6(long jarg1, long jarg2, long jarg3, long jarg4, bone_vector jarg4_, int jarg5);
  public final static native long new_fl_skeleton_laban_sequence_movement_controller__SWIG_7(long jarg1, long jarg2, long jarg3, long jarg4, bone_vector jarg4_);
  public final static native void delete_fl_skeleton_laban_sequence_movement_controller(long jarg1);
  public final static native void fl_skeleton_laban_sequence_movement_controller_next_frame(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, fl_skeleton jarg3_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_next_frameSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, fl_skeleton jarg3_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_register_sequence(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_register_sequenceSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_deregister_sequence(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_deregister_sequenceSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_registered_sequences(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_registered_sequencesSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_set_no_buffer_size_update(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, boolean jarg2);
  public final static native void fl_skeleton_laban_sequence_movement_controller_set_no_buffer_size_updateSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, boolean jarg2);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_buffer(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_bufferSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_current_sequence(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_current_sequenceSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_0(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_0(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_0(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_0(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, i_pose_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_1(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_sequence_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_1(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_sequence_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_1(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_sequence_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_1(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_sequence_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_2(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_recognition_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_add_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_2(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_recognition_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_2(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_recognition_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_remove_listenerSwigExplicitfl_skeleton_laban_sequence_movement_controller__SWIG_2(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, long jarg2, laban_sequence_recognition_listener jarg2_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_listeners(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_clear_listenersSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_notify_sequence_listeners(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, laban_sequence jarg3_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_notify_sequence_listenersSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, laban_sequence jarg3_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_notify_recognition_listeners(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, laban_sequence_vector jarg3_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_notify_recognition_listenersSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_, int jarg2, long jarg3, laban_sequence_vector jarg3_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_movement_detector(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_movement_detectorSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_sequence_recognizer(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native long fl_skeleton_laban_sequence_movement_controller_get_sequence_recognizerSwigExplicitfl_skeleton_laban_sequence_movement_controller(long jarg1, fl_skeleton_laban_sequence_movement_controller jarg1_);
  public final static native void fl_skeleton_laban_sequence_movement_controller_director_connect(fl_skeleton_laban_sequence_movement_controller obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_skeleton_laban_sequence_movement_controller_change_ownership(fl_skeleton_laban_sequence_movement_controller obj, long cptr, boolean take_or_release);
  public final static native long new_fl_movement_controller__SWIG_0(long jarg1, double jarg2, boolean jarg3);
  public final static native long new_fl_movement_controller__SWIG_1(long jarg1, double jarg2);
  public final static native long new_fl_movement_controller__SWIG_2(long jarg1);
  public final static native long new_fl_movement_controller__SWIG_3();
  public final static native long new_fl_movement_controller__SWIG_4(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, long jarg4, long jarg5, int jarg6, double jarg7, boolean jarg8);
  public final static native long new_fl_movement_controller__SWIG_5(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, long jarg4, long jarg5, int jarg6, double jarg7);
  public final static native long new_fl_movement_controller__SWIG_6(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, long jarg4, long jarg5, int jarg6);
  public final static native long new_fl_movement_controller__SWIG_7(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, long jarg4, long jarg5);
  public final static native long new_fl_movement_controller__SWIG_8(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, long jarg4);
  public final static native long new_fl_movement_controller__SWIG_9(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3);
  public final static native long new_fl_movement_controller__SWIG_10(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_);
  public final static native long new_fl_movement_controller__SWIG_11(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4, long jarg5, long jarg6, int jarg7, double jarg8, boolean jarg9);
  public final static native long new_fl_movement_controller__SWIG_12(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4, long jarg5, long jarg6, int jarg7, double jarg8);
  public final static native long new_fl_movement_controller__SWIG_13(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4, long jarg5, long jarg6, int jarg7);
  public final static native long new_fl_movement_controller__SWIG_14(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4, long jarg5, long jarg6);
  public final static native long new_fl_movement_controller__SWIG_15(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4, long jarg5);
  public final static native long new_fl_movement_controller__SWIG_16(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_, long jarg4);
  public final static native long new_fl_movement_controller__SWIG_17(long jarg1, bone_vector jarg1_, long jarg2, coldef_vector jarg2_, long jarg3, laban_sequence_generator jarg3_);
  public final static native void delete_fl_movement_controller(long jarg1);
  public final static native void fl_movement_controller_next_frame(long jarg1, fl_movement_controller jarg1_, int jarg2, long jarg3, general_skeleton jarg3_);
  public final static native void fl_movement_controller_next_frameSwigExplicitfl_movement_controller(long jarg1, fl_movement_controller jarg1_, int jarg2, long jarg3, general_skeleton jarg3_);
  public final static native void fl_movement_controller_set_recognition_tolerance(long jarg1, fl_movement_controller jarg1_, double jarg2);
  public final static native void fl_movement_controller_set_recognition_toleranceSwigExplicitfl_movement_controller(long jarg1, fl_movement_controller jarg1_, double jarg2);
  public final static native long fl_movement_controller_get_laban_sequence_recognizer(long jarg1, fl_movement_controller jarg1_);
  public final static native long fl_movement_controller_get_laban_sequence_recognizerSwigExplicitfl_movement_controller(long jarg1, fl_movement_controller jarg1_);
  public final static native long fl_movement_controller_get_laban_sequence_generator(long jarg1, fl_movement_controller jarg1_);
  public final static native long fl_movement_controller_get_laban_sequence_generatorSwigExplicitfl_movement_controller(long jarg1, fl_movement_controller jarg1_);
  public final static native long fl_movement_controller_get_fl_pose_detector(long jarg1, fl_movement_controller jarg1_);
  public final static native long fl_movement_controller_get_fl_pose_detectorSwigExplicitfl_movement_controller(long jarg1, fl_movement_controller jarg1_);
  public final static native void fl_movement_controller_director_connect(fl_movement_controller obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void fl_movement_controller_change_ownership(fl_movement_controller obj, long cptr, boolean take_or_release);
  public final static native long new_bvh_spec(String jarg1, String jarg2, String jarg3, String jarg4, long jarg5, string_int_map jarg5_, long jarg6, string_bool_map jarg6_);
  public final static native void delete_bvh_spec(long jarg1);
  public final static native long bvh_spec_get_id_map(long jarg1, bvh_spec jarg1_);
  public final static native long bvh_spec_get_id_mapSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native long bvh_spec_get_torso_map(long jarg1, bvh_spec jarg1_);
  public final static native long bvh_spec_get_torso_mapSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_left_anchor(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_left_anchorSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_right_anchor(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_right_anchorSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_top_anchor(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_top_anchorSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_bottom_anchor(long jarg1, bvh_spec jarg1_);
  public final static native String bvh_spec_get_bottom_anchorSwigExplicitbvh_spec(long jarg1, bvh_spec jarg1_);
  public final static native long bvh_spec_default_spec();
  public final static native void bvh_spec_director_connect(bvh_spec obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void bvh_spec_change_ownership(bvh_spec obj, long cptr, boolean take_or_release);
  public final static native long new_string_int_map__SWIG_0();
  public final static native long new_string_int_map__SWIG_1(long jarg1, string_int_map jarg1_);
  public final static native long string_int_map_size(long jarg1, string_int_map jarg1_);
  public final static native boolean string_int_map_empty(long jarg1, string_int_map jarg1_);
  public final static native void string_int_map_clear(long jarg1, string_int_map jarg1_);
  public final static native int string_int_map_get(long jarg1, string_int_map jarg1_, String jarg2);
  public final static native void string_int_map_set(long jarg1, string_int_map jarg1_, String jarg2, int jarg3);
  public final static native void string_int_map_del(long jarg1, string_int_map jarg1_, String jarg2);
  public final static native boolean string_int_map_has_key(long jarg1, string_int_map jarg1_, String jarg2);
  public final static native void delete_string_int_map(long jarg1);
  public final static native long new_string_bool_map__SWIG_0();
  public final static native long new_string_bool_map__SWIG_1(long jarg1, string_bool_map jarg1_);
  public final static native long string_bool_map_size(long jarg1, string_bool_map jarg1_);
  public final static native boolean string_bool_map_empty(long jarg1, string_bool_map jarg1_);
  public final static native void string_bool_map_clear(long jarg1, string_bool_map jarg1_);
  public final static native boolean string_bool_map_get(long jarg1, string_bool_map jarg1_, String jarg2);
  public final static native void string_bool_map_set(long jarg1, string_bool_map jarg1_, String jarg2, boolean jarg3);
  public final static native void string_bool_map_del(long jarg1, string_bool_map jarg1_, String jarg2);
  public final static native boolean string_bool_map_has_key(long jarg1, string_bool_map jarg1_, String jarg2);
  public final static native void delete_string_bool_map(long jarg1);
  public final static native long new_bvh_controller();
  public final static native void delete_bvh_controller(long jarg1);
  public final static native String bvh_controller_bvh_str__SWIG_0(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_);
  public final static native String bvh_controller_bvh_strSwigExplicitbvh_controller__SWIG_0(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_);
  public final static native String bvh_controller_bvh_str__SWIG_1(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_, double jarg3);
  public final static native String bvh_controller_bvh_strSwigExplicitbvh_controller__SWIG_1(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_, double jarg3);
  public final static native String bvh_controller_bvh_str__SWIG_2(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton jarg2_);
  public final static native String bvh_controller_bvh_strSwigExplicitbvh_controller__SWIG_2(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton jarg2_);
  public final static native void bvh_controller_print_bvh_file__SWIG_0(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_, String jarg3);
  public final static native void bvh_controller_print_bvh_fileSwigExplicitbvh_controller__SWIG_0(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton_vector jarg2_, String jarg3);
  public final static native void bvh_controller_print_bvh_file__SWIG_1(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton jarg2_, String jarg3);
  public final static native void bvh_controller_print_bvh_fileSwigExplicitbvh_controller__SWIG_1(long jarg1, bvh_controller jarg1_, long jarg2, general_skeleton jarg2_, String jarg3);
  public final static native long bvh_controller_read_bvh_str(long jarg1, bvh_controller jarg1_, String jarg2, long jarg3, bvh_spec jarg3_);
  public final static native long bvh_controller_read_bvh_strSwigExplicitbvh_controller(long jarg1, bvh_controller jarg1_, String jarg2, long jarg3, bvh_spec jarg3_);
  public final static native long bvh_controller_read_bvh_file(long jarg1, bvh_controller jarg1_, String jarg2, long jarg3, bvh_spec jarg3_);
  public final static native long bvh_controller_read_bvh_fileSwigExplicitbvh_controller(long jarg1, bvh_controller jarg1_, String jarg2, long jarg3, bvh_spec jarg3_);
  public final static native void bvh_controller_director_connect(bvh_controller obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void bvh_controller_change_ownership(bvh_controller obj, long cptr, boolean take_or_release);
  public final static native long new_general_skeleton_vector__SWIG_0();
  public final static native long new_general_skeleton_vector__SWIG_1(long jarg1);
  public final static native long general_skeleton_vector_size(long jarg1, general_skeleton_vector jarg1_);
  public final static native long general_skeleton_vector_capacity(long jarg1, general_skeleton_vector jarg1_);
  public final static native void general_skeleton_vector_reserve(long jarg1, general_skeleton_vector jarg1_, long jarg2);
  public final static native boolean general_skeleton_vector_isEmpty(long jarg1, general_skeleton_vector jarg1_);
  public final static native void general_skeleton_vector_clear(long jarg1, general_skeleton_vector jarg1_);
  public final static native void general_skeleton_vector_add(long jarg1, general_skeleton_vector jarg1_, long jarg2, general_skeleton jarg2_);
  public final static native long general_skeleton_vector_get(long jarg1, general_skeleton_vector jarg1_, int jarg2);
  public final static native void general_skeleton_vector_set(long jarg1, general_skeleton_vector jarg1_, int jarg2, long jarg3, general_skeleton jarg3_);
  public final static native void delete_general_skeleton_vector(long jarg1);
  public final static native long new_general_skeleton_vector_double_pair__SWIG_0();
  public final static native long new_general_skeleton_vector_double_pair__SWIG_1(long jarg1, general_skeleton_vector jarg1_, double jarg2);
  public final static native long new_general_skeleton_vector_double_pair__SWIG_2(long jarg1, general_skeleton_vector_double_pair jarg1_);
  public final static native void general_skeleton_vector_double_pair_first_set(long jarg1, general_skeleton_vector_double_pair jarg1_, long jarg2, general_skeleton_vector jarg2_);
  public final static native long general_skeleton_vector_double_pair_first_get(long jarg1, general_skeleton_vector_double_pair jarg1_);
  public final static native void general_skeleton_vector_double_pair_second_set(long jarg1, general_skeleton_vector_double_pair jarg1_, double jarg2);
  public final static native double general_skeleton_vector_double_pair_second_get(long jarg1, general_skeleton_vector_double_pair jarg1_);
  public final static native void delete_general_skeleton_vector_double_pair(long jarg1);
  public final static native long new_laban_sequence_reader();
  public final static native void delete_laban_sequence_reader(long jarg1);
  public final static native long laban_sequence_reader_read_sequence_file(long jarg1, laban_sequence_reader jarg1_, String jarg2);
  public final static native long laban_sequence_reader_read_sequence_fileSwigExplicitlaban_sequence_reader(long jarg1, laban_sequence_reader jarg1_, String jarg2);
  public final static native long laban_sequence_reader_read_sequence_str(long jarg1, laban_sequence_reader jarg1_, String jarg2);
  public final static native long laban_sequence_reader_read_sequence_strSwigExplicitlaban_sequence_reader(long jarg1, laban_sequence_reader jarg1_, String jarg2);
  public final static native void laban_sequence_reader_director_connect(laban_sequence_reader obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void laban_sequence_reader_change_ownership(laban_sequence_reader obj, long cptr, boolean take_or_release);
  public final static native void delete_i_symbol(long jarg1);
  public final static native boolean i_symbol_equals(long jarg1, i_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native String i_symbol_xml__SWIG_0(long jarg1, i_symbol jarg1_, long jarg2, String jarg3);
  public final static native String i_symbol_xml__SWIG_1(long jarg1, i_symbol jarg1_, long jarg2);
  public final static native String i_symbol_xml__SWIG_2(long jarg1, i_symbol jarg1_);
  public final static native String i_symbol_svg__SWIG_0(long jarg1, i_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String i_symbol_svg__SWIG_1(long jarg1, i_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String i_symbol_str(long jarg1, i_symbol jarg1_);
  public final static native long new_i_symbol();
  public final static native void i_symbol_director_connect(i_symbol obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_symbol_change_ownership(i_symbol obj, long cptr, boolean take_or_release);
  public final static native long new_movement__SWIG_0(int jarg1, long jarg2, double jarg3, double jarg4, long jarg5, i_symbol jarg5_, boolean jarg6, long jarg7, i_pre_sign jarg7_);
  public final static native long new_movement__SWIG_1(int jarg1, long jarg2, double jarg3, double jarg4, long jarg5, i_symbol jarg5_, boolean jarg6);
  public final static native long new_movement__SWIG_2(int jarg1, long jarg2, double jarg3, double jarg4, long jarg5, i_symbol jarg5_);
  public final static native void delete_movement(long jarg1);
  public final static native int movement_get_column(long jarg1, movement jarg1_);
  public final static native int movement_get_columnSwigExplicitmovement(long jarg1, movement jarg1_);
  public final static native long movement_get_measure(long jarg1, movement jarg1_);
  public final static native long movement_get_measureSwigExplicitmovement(long jarg1, movement jarg1_);
  public final static native double movement_get_beat(long jarg1, movement jarg1_);
  public final static native double movement_get_beatSwigExplicitmovement(long jarg1, movement jarg1_);
  public final static native double movement_get_duration(long jarg1, movement jarg1_);
  public final static native double movement_get_durationSwigExplicitmovement(long jarg1, movement jarg1_);
  public final static native long movement_get_pre_sign(long jarg1, movement jarg1_);
  public final static native boolean movement_get_hold(long jarg1, movement jarg1_);
  public final static native long movement_get_symbol(long jarg1, movement jarg1_);
  public final static native boolean movement_equals(long jarg1, movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean movement_equalsSwigExplicitmovement(long jarg1, movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean movement_symbol_equals(long jarg1, movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean movement_symbol_equalsSwigExplicitmovement(long jarg1, movement jarg1_, long jarg2, i_movement jarg2_);
  public final static native String movement_xml__SWIG_0(long jarg1, movement jarg1_, long jarg2, String jarg3);
  public final static native String movement_xmlSwigExplicitmovement__SWIG_0(long jarg1, movement jarg1_, long jarg2, String jarg3);
  public final static native String movement_xml__SWIG_1(long jarg1, movement jarg1_, long jarg2);
  public final static native String movement_xmlSwigExplicitmovement__SWIG_1(long jarg1, movement jarg1_, long jarg2);
  public final static native String movement_xml__SWIG_2(long jarg1, movement jarg1_);
  public final static native String movement_xmlSwigExplicitmovement__SWIG_2(long jarg1, movement jarg1_);
  public final static native String movement_svg(long jarg1, movement jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native String movement_svgSwigExplicitmovement(long jarg1, movement jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long movement_recreate(long jarg1, movement jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native long movement_recreateSwigExplicitmovement(long jarg1, movement jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native String movement_str(long jarg1, movement jarg1_);
  public final static native String movement_strSwigExplicitmovement(long jarg1, movement jarg1_);
  public final static native void movement_director_connect(movement obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void movement_change_ownership(movement obj, long cptr, boolean take_or_release);
  public final static native String e_path_type_c_str(int jarg1);
  public final static native long e_path_type_c_vec();
  public final static native int e_path_type_c_parse(String jarg1);
  public final static native long new_e_path_type_c();
  public final static native void delete_e_path_type_c(long jarg1);
  public final static native long new_e_path_type_vector__SWIG_0();
  public final static native long new_e_path_type_vector__SWIG_1(long jarg1);
  public final static native long e_path_type_vector_size(long jarg1, e_path_type_vector jarg1_);
  public final static native long e_path_type_vector_capacity(long jarg1, e_path_type_vector jarg1_);
  public final static native void e_path_type_vector_reserve(long jarg1, e_path_type_vector jarg1_, long jarg2);
  public final static native boolean e_path_type_vector_isEmpty(long jarg1, e_path_type_vector jarg1_);
  public final static native void e_path_type_vector_clear(long jarg1, e_path_type_vector jarg1_);
  public final static native void e_path_type_vector_add(long jarg1, e_path_type_vector jarg1_, int jarg2);
  public final static native int e_path_type_vector_get(long jarg1, e_path_type_vector jarg1_, int jarg2);
  public final static native void e_path_type_vector_set(long jarg1, e_path_type_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_path_type_vector(long jarg1);
  public final static native long new_path(int jarg1, long jarg2, double jarg3, double jarg4);
  public final static native void delete_path(long jarg1);
  public final static native int path_get_type(long jarg1, path jarg1_);
  public final static native int path_get_column(long jarg1, path jarg1_);
  public final static native int path_get_columnSwigExplicitpath(long jarg1, path jarg1_);
  public final static native long path_get_measure(long jarg1, path jarg1_);
  public final static native long path_get_measureSwigExplicitpath(long jarg1, path jarg1_);
  public final static native double path_get_beat(long jarg1, path jarg1_);
  public final static native double path_get_beatSwigExplicitpath(long jarg1, path jarg1_);
  public final static native double path_get_duration(long jarg1, path jarg1_);
  public final static native double path_get_durationSwigExplicitpath(long jarg1, path jarg1_);
  public final static native boolean path_equals(long jarg1, path jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean path_equalsSwigExplicitpath(long jarg1, path jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean path_symbol_equals(long jarg1, path jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean path_symbol_equalsSwigExplicitpath(long jarg1, path jarg1_, long jarg2, i_movement jarg2_);
  public final static native String path_xml__SWIG_0(long jarg1, path jarg1_, long jarg2, String jarg3);
  public final static native String path_xmlSwigExplicitpath__SWIG_0(long jarg1, path jarg1_, long jarg2, String jarg3);
  public final static native String path_xml__SWIG_1(long jarg1, path jarg1_, long jarg2);
  public final static native String path_xmlSwigExplicitpath__SWIG_1(long jarg1, path jarg1_, long jarg2);
  public final static native String path_xml__SWIG_2(long jarg1, path jarg1_);
  public final static native String path_xmlSwigExplicitpath__SWIG_2(long jarg1, path jarg1_);
  public final static native String path_svg(long jarg1, path jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native String path_svgSwigExplicitpath(long jarg1, path jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long path_recreate(long jarg1, path jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native long path_recreateSwigExplicitpath(long jarg1, path jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native String path_str(long jarg1, path jarg1_);
  public final static native String path_strSwigExplicitpath(long jarg1, path jarg1_);
  public final static native void path_director_connect(path obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void path_change_ownership(path obj, long cptr, boolean take_or_release);
  public final static native String e_relationship_type_c_str(int jarg1);
  public final static native long e_relationship_type_c_vec();
  public final static native int e_relationship_type_c_parse(String jarg1);
  public final static native long new_e_relationship_type_c();
  public final static native void delete_e_relationship_type_c(long jarg1);
  public final static native long new_e_relationship_type_vector__SWIG_0();
  public final static native long new_e_relationship_type_vector__SWIG_1(long jarg1);
  public final static native long e_relationship_type_vector_size(long jarg1, e_relationship_type_vector jarg1_);
  public final static native long e_relationship_type_vector_capacity(long jarg1, e_relationship_type_vector jarg1_);
  public final static native void e_relationship_type_vector_reserve(long jarg1, e_relationship_type_vector jarg1_, long jarg2);
  public final static native boolean e_relationship_type_vector_isEmpty(long jarg1, e_relationship_type_vector jarg1_);
  public final static native void e_relationship_type_vector_clear(long jarg1, e_relationship_type_vector jarg1_);
  public final static native void e_relationship_type_vector_add(long jarg1, e_relationship_type_vector jarg1_, int jarg2);
  public final static native int e_relationship_type_vector_get(long jarg1, e_relationship_type_vector jarg1_, int jarg2);
  public final static native void e_relationship_type_vector_set(long jarg1, e_relationship_type_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_relationship_type_vector(long jarg1);
  public final static native void delete_i_dynamics_sign(long jarg1);
  public final static native boolean i_dynamics_sign_equals(long jarg1, i_dynamics_sign jarg1_, long jarg2, i_dynamics_sign jarg2_);
  public final static native String i_dynamics_sign_xml__SWIG_0(long jarg1, i_dynamics_sign jarg1_, long jarg2, String jarg3);
  public final static native String i_dynamics_sign_xml__SWIG_1(long jarg1, i_dynamics_sign jarg1_, long jarg2);
  public final static native String i_dynamics_sign_xml__SWIG_2(long jarg1, i_dynamics_sign jarg1_);
  public final static native long new_i_dynamics_sign();
  public final static native void i_dynamics_sign_director_connect(i_dynamics_sign obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_dynamics_sign_change_ownership(i_dynamics_sign obj, long cptr, boolean take_or_release);
  public final static native long new_relationship_endpoint__SWIG_0(int jarg1, boolean jarg2, long jarg3, i_pre_sign jarg3_, long jarg4, i_dynamics_sign jarg4_);
  public final static native long new_relationship_endpoint__SWIG_1(int jarg1, boolean jarg2, long jarg3, i_pre_sign jarg3_);
  public final static native long new_relationship_endpoint__SWIG_2(int jarg1, boolean jarg2);
  public final static native void delete_relationship_endpoint(long jarg1);
  public final static native int relationship_endpoint_get_column(long jarg1, relationship_endpoint jarg1_);
  public final static native long relationship_endpoint_get_pre_sign(long jarg1, relationship_endpoint jarg1_);
  public final static native long relationship_endpoint_get_dynamics(long jarg1, relationship_endpoint jarg1_);
  public final static native boolean relationship_endpoint_get_active(long jarg1, relationship_endpoint jarg1_);
  public final static native String relationship_endpoint_xml__SWIG_0(long jarg1, relationship_endpoint jarg1_, long jarg2, String jarg3);
  public final static native String relationship_endpoint_xmlSwigExplicitrelationship_endpoint__SWIG_0(long jarg1, relationship_endpoint jarg1_, long jarg2, String jarg3);
  public final static native String relationship_endpoint_xml__SWIG_1(long jarg1, relationship_endpoint jarg1_, long jarg2);
  public final static native String relationship_endpoint_xmlSwigExplicitrelationship_endpoint__SWIG_1(long jarg1, relationship_endpoint jarg1_, long jarg2);
  public final static native String relationship_endpoint_xml__SWIG_2(long jarg1, relationship_endpoint jarg1_);
  public final static native String relationship_endpoint_xmlSwigExplicitrelationship_endpoint__SWIG_2(long jarg1, relationship_endpoint jarg1_);
  public final static native long relationship_endpoint_recreate(long jarg1, relationship_endpoint jarg1_, long jarg2, int_int_map jarg2_);
  public final static native long relationship_endpoint_recreateSwigExplicitrelationship_endpoint(long jarg1, relationship_endpoint jarg1_, long jarg2, int_int_map jarg2_);
  public final static native boolean relationship_endpoint_equals(long jarg1, relationship_endpoint jarg1_, long jarg2, relationship_endpoint jarg2_);
  public final static native boolean relationship_endpoint_equalsSwigExplicitrelationship_endpoint(long jarg1, relationship_endpoint jarg1_, long jarg2, relationship_endpoint jarg2_);
  public final static native void relationship_endpoint_director_connect(relationship_endpoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void relationship_endpoint_change_ownership(relationship_endpoint obj, long cptr, boolean take_or_release);
  public final static native long new_relationship_bow(int jarg1, boolean jarg2, boolean jarg3, boolean jarg4, long jarg5, double jarg6, long jarg7, relationship_endpoint jarg7_, long jarg8, relationship_endpoint jarg8_);
  public final static native void delete_relationship_bow(long jarg1);
  public final static native int relationship_bow_get_type(long jarg1, relationship_bow jarg1_);
  public final static native boolean relationship_bow_get_grasping(long jarg1, relationship_bow jarg1_);
  public final static native boolean relationship_bow_get_passing(long jarg1, relationship_bow jarg1_);
  public final static native boolean relationship_bow_get_hold(long jarg1, relationship_bow jarg1_);
  public final static native long relationship_bow_get_left_endpoint(long jarg1, relationship_bow jarg1_);
  public final static native long relationship_bow_get_right_endpoint(long jarg1, relationship_bow jarg1_);
  public final static native int relationship_bow_get_column(long jarg1, relationship_bow jarg1_);
  public final static native int relationship_bow_get_columnSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_);
  public final static native long relationship_bow_get_measure(long jarg1, relationship_bow jarg1_);
  public final static native long relationship_bow_get_measureSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_);
  public final static native double relationship_bow_get_beat(long jarg1, relationship_bow jarg1_);
  public final static native double relationship_bow_get_beatSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_);
  public final static native double relationship_bow_get_duration(long jarg1, relationship_bow jarg1_);
  public final static native double relationship_bow_get_durationSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_);
  public final static native boolean relationship_bow_equals(long jarg1, relationship_bow jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean relationship_bow_equalsSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean relationship_bow_symbol_equals(long jarg1, relationship_bow jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean relationship_bow_symbol_equalsSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_, long jarg2, i_movement jarg2_);
  public final static native String relationship_bow_xml__SWIG_0(long jarg1, relationship_bow jarg1_, long jarg2, String jarg3);
  public final static native String relationship_bow_xmlSwigExplicitrelationship_bow__SWIG_0(long jarg1, relationship_bow jarg1_, long jarg2, String jarg3);
  public final static native String relationship_bow_xml__SWIG_1(long jarg1, relationship_bow jarg1_, long jarg2);
  public final static native String relationship_bow_xmlSwigExplicitrelationship_bow__SWIG_1(long jarg1, relationship_bow jarg1_, long jarg2);
  public final static native String relationship_bow_xml__SWIG_2(long jarg1, relationship_bow jarg1_);
  public final static native String relationship_bow_xmlSwigExplicitrelationship_bow__SWIG_2(long jarg1, relationship_bow jarg1_);
  public final static native String relationship_bow_svg(long jarg1, relationship_bow jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native String relationship_bow_svgSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long relationship_bow_recreate(long jarg1, relationship_bow jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native long relationship_bow_recreateSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native String relationship_bow_str(long jarg1, relationship_bow jarg1_);
  public final static native String relationship_bow_strSwigExplicitrelationship_bow(long jarg1, relationship_bow jarg1_);
  public final static native void relationship_bow_director_connect(relationship_bow obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void relationship_bow_change_ownership(relationship_bow obj, long cptr, boolean take_or_release);
  public final static native void delete_i_degree_sign(long jarg1);
  public final static native boolean i_degree_sign_equals(long jarg1, i_degree_sign jarg1_, long jarg2, i_degree_sign jarg2_);
  public final static native String i_degree_sign_xml__SWIG_0(long jarg1, i_degree_sign jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native String i_degree_sign_xml__SWIG_1(long jarg1, i_degree_sign jarg1_, long jarg2, String jarg3);
  public final static native String i_degree_sign_xml__SWIG_2(long jarg1, i_degree_sign jarg1_, long jarg2);
  public final static native String i_degree_sign_xml__SWIG_3(long jarg1, i_degree_sign jarg1_);
  public final static native String i_degree_sign_svg__SWIG_0(long jarg1, i_degree_sign jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String i_degree_sign_svg__SWIG_1(long jarg1, i_degree_sign jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native long new_i_degree_sign();
  public final static native void i_degree_sign_director_connect(i_degree_sign obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_degree_sign_change_ownership(i_degree_sign obj, long cptr, boolean take_or_release);
  public final static native String e_level_c_str(int jarg1);
  public final static native int e_level_c_lvl(int jarg1);
  public final static native long e_level_c_vec();
  public final static native int e_level_c_parse(String jarg1);
  public final static native long new_e_level_c();
  public final static native void delete_e_level_c(long jarg1);
  public final static native long new_e_level_vector__SWIG_0();
  public final static native long new_e_level_vector__SWIG_1(long jarg1);
  public final static native long e_level_vector_size(long jarg1, e_level_vector jarg1_);
  public final static native long e_level_vector_capacity(long jarg1, e_level_vector jarg1_);
  public final static native void e_level_vector_reserve(long jarg1, e_level_vector jarg1_, long jarg2);
  public final static native boolean e_level_vector_isEmpty(long jarg1, e_level_vector jarg1_);
  public final static native void e_level_vector_clear(long jarg1, e_level_vector jarg1_);
  public final static native void e_level_vector_add(long jarg1, e_level_vector jarg1_, int jarg2);
  public final static native int e_level_vector_get(long jarg1, e_level_vector jarg1_, int jarg2);
  public final static native void e_level_vector_set(long jarg1, e_level_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_level_vector(long jarg1);
  public final static native long new_pin(int jarg1, int jarg2);
  public final static native void delete_pin(long jarg1);
  public final static native int pin_get_level(long jarg1, pin jarg1_);
  public final static native int pin_get_horizontal(long jarg1, pin jarg1_);
  public final static native boolean pin_equals(long jarg1, pin jarg1_, long jarg2, i_degree_sign jarg2_);
  public final static native boolean pin_equalsSwigExplicitpin(long jarg1, pin jarg1_, long jarg2, i_degree_sign jarg2_);
  public final static native String pin_xml__SWIG_0(long jarg1, pin jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native String pin_xmlSwigExplicitpin__SWIG_0(long jarg1, pin jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native String pin_xml__SWIG_1(long jarg1, pin jarg1_, long jarg2, String jarg3);
  public final static native String pin_xmlSwigExplicitpin__SWIG_1(long jarg1, pin jarg1_, long jarg2, String jarg3);
  public final static native String pin_xml__SWIG_2(long jarg1, pin jarg1_, long jarg2);
  public final static native String pin_xmlSwigExplicitpin__SWIG_2(long jarg1, pin jarg1_, long jarg2);
  public final static native String pin_xml__SWIG_3(long jarg1, pin jarg1_);
  public final static native String pin_xmlSwigExplicitpin__SWIG_3(long jarg1, pin jarg1_);
  public final static native String pin_svg__SWIG_0(long jarg1, pin jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String pin_svgSwigExplicitpin__SWIG_0(long jarg1, pin jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String pin_svg__SWIG_1(long jarg1, pin jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String pin_svgSwigExplicitpin__SWIG_1(long jarg1, pin jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native void pin_director_connect(pin obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void pin_change_ownership(pin obj, long cptr, boolean take_or_release);
  public final static native long new_room_direction(long jarg1, double jarg2, long jarg3, pin jarg3_);
  public final static native void delete_room_direction(long jarg1);
  public final static native int room_direction_get_column(long jarg1, room_direction jarg1_);
  public final static native int room_direction_get_columnSwigExplicitroom_direction(long jarg1, room_direction jarg1_);
  public final static native long room_direction_get_measure(long jarg1, room_direction jarg1_);
  public final static native long room_direction_get_measureSwigExplicitroom_direction(long jarg1, room_direction jarg1_);
  public final static native double room_direction_get_beat(long jarg1, room_direction jarg1_);
  public final static native double room_direction_get_beatSwigExplicitroom_direction(long jarg1, room_direction jarg1_);
  public final static native double room_direction_get_duration(long jarg1, room_direction jarg1_);
  public final static native double room_direction_get_durationSwigExplicitroom_direction(long jarg1, room_direction jarg1_);
  public final static native long room_direction_get_direction(long jarg1, room_direction jarg1_);
  public final static native boolean room_direction_equals(long jarg1, room_direction jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean room_direction_equalsSwigExplicitroom_direction(long jarg1, room_direction jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean room_direction_symbol_equals(long jarg1, room_direction jarg1_, long jarg2, i_movement jarg2_);
  public final static native boolean room_direction_symbol_equalsSwigExplicitroom_direction(long jarg1, room_direction jarg1_, long jarg2, i_movement jarg2_);
  public final static native String room_direction_xml__SWIG_0(long jarg1, room_direction jarg1_, long jarg2, String jarg3);
  public final static native String room_direction_xmlSwigExplicitroom_direction__SWIG_0(long jarg1, room_direction jarg1_, long jarg2, String jarg3);
  public final static native String room_direction_xml__SWIG_1(long jarg1, room_direction jarg1_, long jarg2);
  public final static native String room_direction_xmlSwigExplicitroom_direction__SWIG_1(long jarg1, room_direction jarg1_, long jarg2);
  public final static native String room_direction_xml__SWIG_2(long jarg1, room_direction jarg1_);
  public final static native String room_direction_xmlSwigExplicitroom_direction__SWIG_2(long jarg1, room_direction jarg1_);
  public final static native String room_direction_svg(long jarg1, room_direction jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native String room_direction_svgSwigExplicitroom_direction(long jarg1, room_direction jarg1_, long jarg2, long jarg3, long jarg4, long jarg5, long jarg6);
  public final static native long room_direction_recreate(long jarg1, room_direction jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native long room_direction_recreateSwigExplicitroom_direction(long jarg1, room_direction jarg1_, long jarg2, int_int_map jarg2_, long jarg3, double jarg4, double jarg5);
  public final static native String room_direction_str(long jarg1, room_direction jarg1_);
  public final static native String room_direction_strSwigExplicitroom_direction(long jarg1, room_direction jarg1_);
  public final static native void room_direction_director_connect(room_direction obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void room_direction_change_ownership(room_direction obj, long cptr, boolean take_or_release);
  public final static native long new_accent_sign(long jarg1);
  public final static native void delete_accent_sign(long jarg1);
  public final static native long accent_sign_get_accent(long jarg1, accent_sign jarg1_);
  public final static native boolean accent_sign_equals(long jarg1, accent_sign jarg1_, long jarg2, i_dynamics_sign jarg2_);
  public final static native boolean accent_sign_equalsSwigExplicitaccent_sign(long jarg1, accent_sign jarg1_, long jarg2, i_dynamics_sign jarg2_);
  public final static native String accent_sign_xml__SWIG_0(long jarg1, accent_sign jarg1_, long jarg2, String jarg3);
  public final static native String accent_sign_xmlSwigExplicitaccent_sign__SWIG_0(long jarg1, accent_sign jarg1_, long jarg2, String jarg3);
  public final static native String accent_sign_xml__SWIG_1(long jarg1, accent_sign jarg1_, long jarg2);
  public final static native String accent_sign_xmlSwigExplicitaccent_sign__SWIG_1(long jarg1, accent_sign jarg1_, long jarg2);
  public final static native String accent_sign_xml__SWIG_2(long jarg1, accent_sign jarg1_);
  public final static native String accent_sign_xmlSwigExplicitaccent_sign__SWIG_2(long jarg1, accent_sign jarg1_);
  public final static native void accent_sign_director_connect(accent_sign obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void accent_sign_change_ownership(accent_sign obj, long cptr, boolean take_or_release);
  public final static native String e_dynamic_c_str(int jarg1);
  public final static native long e_dynamic_c_vec();
  public final static native int e_dynamic_c_parse(String jarg1);
  public final static native long new_e_dynamic_c();
  public final static native void delete_e_dynamic_c(long jarg1);
  public final static native long new_e_dynamic_vector__SWIG_0();
  public final static native long new_e_dynamic_vector__SWIG_1(long jarg1);
  public final static native long e_dynamic_vector_size(long jarg1, e_dynamic_vector jarg1_);
  public final static native long e_dynamic_vector_capacity(long jarg1, e_dynamic_vector jarg1_);
  public final static native void e_dynamic_vector_reserve(long jarg1, e_dynamic_vector jarg1_, long jarg2);
  public final static native boolean e_dynamic_vector_isEmpty(long jarg1, e_dynamic_vector jarg1_);
  public final static native void e_dynamic_vector_clear(long jarg1, e_dynamic_vector jarg1_);
  public final static native void e_dynamic_vector_add(long jarg1, e_dynamic_vector jarg1_, int jarg2);
  public final static native int e_dynamic_vector_get(long jarg1, e_dynamic_vector jarg1_, int jarg2);
  public final static native void e_dynamic_vector_set(long jarg1, e_dynamic_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_dynamic_vector(long jarg1);
  public final static native long new_dynamic_sign(int jarg1);
  public final static native void delete_dynamic_sign(long jarg1);
  public final static native int dynamic_sign_get_dynamic(long jarg1, dynamic_sign jarg1_);
  public final static native boolean dynamic_sign_equals(long jarg1, dynamic_sign jarg1_, long jarg2, i_dynamics_sign jarg2_);
  public final static native boolean dynamic_sign_equalsSwigExplicitdynamic_sign(long jarg1, dynamic_sign jarg1_, long jarg2, i_dynamics_sign jarg2_);
  public final static native String dynamic_sign_xml__SWIG_0(long jarg1, dynamic_sign jarg1_, long jarg2, String jarg3);
  public final static native String dynamic_sign_xmlSwigExplicitdynamic_sign__SWIG_0(long jarg1, dynamic_sign jarg1_, long jarg2, String jarg3);
  public final static native String dynamic_sign_xml__SWIG_1(long jarg1, dynamic_sign jarg1_, long jarg2);
  public final static native String dynamic_sign_xmlSwigExplicitdynamic_sign__SWIG_1(long jarg1, dynamic_sign jarg1_, long jarg2);
  public final static native String dynamic_sign_xml__SWIG_2(long jarg1, dynamic_sign jarg1_);
  public final static native String dynamic_sign_xmlSwigExplicitdynamic_sign__SWIG_2(long jarg1, dynamic_sign jarg1_);
  public final static native void dynamic_sign_director_connect(dynamic_sign obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void dynamic_sign_change_ownership(dynamic_sign obj, long cptr, boolean take_or_release);
  public final static native String e_cancel_c_str(int jarg1);
  public final static native long e_cancel_c_vec();
  public final static native int e_cancel_c_parse(String jarg1);
  public final static native long new_e_cancel_c();
  public final static native void delete_e_cancel_c(long jarg1);
  public final static native long new_e_cancel_vector__SWIG_0();
  public final static native long new_e_cancel_vector__SWIG_1(long jarg1);
  public final static native long e_cancel_vector_size(long jarg1, e_cancel_vector jarg1_);
  public final static native long e_cancel_vector_capacity(long jarg1, e_cancel_vector jarg1_);
  public final static native void e_cancel_vector_reserve(long jarg1, e_cancel_vector jarg1_, long jarg2);
  public final static native boolean e_cancel_vector_isEmpty(long jarg1, e_cancel_vector jarg1_);
  public final static native void e_cancel_vector_clear(long jarg1, e_cancel_vector jarg1_);
  public final static native void e_cancel_vector_add(long jarg1, e_cancel_vector jarg1_, int jarg2);
  public final static native int e_cancel_vector_get(long jarg1, e_cancel_vector jarg1_, int jarg2);
  public final static native void e_cancel_vector_set(long jarg1, e_cancel_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_cancel_vector(long jarg1);
  public final static native long new_cancellation_symbol(int jarg1);
  public final static native void delete_cancellation_symbol(long jarg1);
  public final static native int cancellation_symbol_get_cancel(long jarg1, cancellation_symbol jarg1_);
  public final static native boolean cancellation_symbol_equals(long jarg1, cancellation_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native boolean cancellation_symbol_equalsSwigExplicitcancellation_symbol(long jarg1, cancellation_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native String cancellation_symbol_xml__SWIG_0(long jarg1, cancellation_symbol jarg1_, long jarg2, String jarg3);
  public final static native String cancellation_symbol_xmlSwigExplicitcancellation_symbol__SWIG_0(long jarg1, cancellation_symbol jarg1_, long jarg2, String jarg3);
  public final static native String cancellation_symbol_xml__SWIG_1(long jarg1, cancellation_symbol jarg1_, long jarg2);
  public final static native String cancellation_symbol_xmlSwigExplicitcancellation_symbol__SWIG_1(long jarg1, cancellation_symbol jarg1_, long jarg2);
  public final static native String cancellation_symbol_xml__SWIG_2(long jarg1, cancellation_symbol jarg1_);
  public final static native String cancellation_symbol_xmlSwigExplicitcancellation_symbol__SWIG_2(long jarg1, cancellation_symbol jarg1_);
  public final static native String cancellation_symbol_svg__SWIG_0(long jarg1, cancellation_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String cancellation_symbol_svgSwigExplicitcancellation_symbol__SWIG_0(long jarg1, cancellation_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String cancellation_symbol_svg__SWIG_1(long jarg1, cancellation_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String cancellation_symbol_svgSwigExplicitcancellation_symbol__SWIG_1(long jarg1, cancellation_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String cancellation_symbol_str(long jarg1, cancellation_symbol jarg1_);
  public final static native String cancellation_symbol_strSwigExplicitcancellation_symbol(long jarg1, cancellation_symbol jarg1_);
  public final static native void cancellation_symbol_director_connect(cancellation_symbol obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void cancellation_symbol_change_ownership(cancellation_symbol obj, long cptr, boolean take_or_release);
  public final static native String e_space_c_str(int jarg1);
  public final static native long e_space_c_vec();
  public final static native int e_space_c_parse(String jarg1);
  public final static native long new_e_space_c();
  public final static native void delete_e_space_c(long jarg1);
  public final static native long new_e_space_vector__SWIG_0();
  public final static native long new_e_space_vector__SWIG_1(long jarg1);
  public final static native long e_space_vector_size(long jarg1, e_space_vector jarg1_);
  public final static native long e_space_vector_capacity(long jarg1, e_space_vector jarg1_);
  public final static native void e_space_vector_reserve(long jarg1, e_space_vector jarg1_, long jarg2);
  public final static native boolean e_space_vector_isEmpty(long jarg1, e_space_vector jarg1_);
  public final static native void e_space_vector_clear(long jarg1, e_space_vector jarg1_);
  public final static native void e_space_vector_add(long jarg1, e_space_vector jarg1_, int jarg2);
  public final static native int e_space_vector_get(long jarg1, e_space_vector jarg1_, int jarg2);
  public final static native void e_space_vector_set(long jarg1, e_space_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_space_vector(long jarg1);
  public final static native String e_space_direction_c_str(int jarg1);
  public final static native long e_space_direction_c_vec();
  public final static native int e_space_direction_c_parse(String jarg1);
  public final static native long new_e_space_direction_c();
  public final static native void delete_e_space_direction_c(long jarg1);
  public final static native long new_e_space_direction_vector__SWIG_0();
  public final static native long new_e_space_direction_vector__SWIG_1(long jarg1);
  public final static native long e_space_direction_vector_size(long jarg1, e_space_direction_vector jarg1_);
  public final static native long e_space_direction_vector_capacity(long jarg1, e_space_direction_vector jarg1_);
  public final static native void e_space_direction_vector_reserve(long jarg1, e_space_direction_vector jarg1_, long jarg2);
  public final static native boolean e_space_direction_vector_isEmpty(long jarg1, e_space_direction_vector jarg1_);
  public final static native void e_space_direction_vector_clear(long jarg1, e_space_direction_vector jarg1_);
  public final static native void e_space_direction_vector_add(long jarg1, e_space_direction_vector jarg1_, int jarg2);
  public final static native int e_space_direction_vector_get(long jarg1, e_space_direction_vector jarg1_, int jarg2);
  public final static native void e_space_direction_vector_set(long jarg1, e_space_direction_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_space_direction_vector(long jarg1);
  public final static native long new_space_measurement__SWIG_0(int jarg1, long jarg2, int jarg3);
  public final static native long new_space_measurement__SWIG_1(int jarg1, long jarg2);
  public final static native void delete_space_measurement(long jarg1);
  public final static native int space_measurement_get_type(long jarg1, space_measurement jarg1_);
  public final static native long space_measurement_get_degree(long jarg1, space_measurement jarg1_);
  public final static native int space_measurement_get_direction(long jarg1, space_measurement jarg1_);
  public final static native boolean space_measurement_equals(long jarg1, space_measurement jarg1_, long jarg2, i_degree_sign jarg2_);
  public final static native boolean space_measurement_equalsSwigExplicitspace_measurement(long jarg1, space_measurement jarg1_, long jarg2, i_degree_sign jarg2_);
  public final static native String space_measurement_xml__SWIG_0(long jarg1, space_measurement jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native String space_measurement_xmlSwigExplicitspace_measurement__SWIG_0(long jarg1, space_measurement jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native String space_measurement_xml__SWIG_1(long jarg1, space_measurement jarg1_, long jarg2, String jarg3);
  public final static native String space_measurement_xmlSwigExplicitspace_measurement__SWIG_1(long jarg1, space_measurement jarg1_, long jarg2, String jarg3);
  public final static native String space_measurement_xml__SWIG_2(long jarg1, space_measurement jarg1_, long jarg2);
  public final static native String space_measurement_xmlSwigExplicitspace_measurement__SWIG_2(long jarg1, space_measurement jarg1_, long jarg2);
  public final static native String space_measurement_xml__SWIG_3(long jarg1, space_measurement jarg1_);
  public final static native String space_measurement_xmlSwigExplicitspace_measurement__SWIG_3(long jarg1, space_measurement jarg1_);
  public final static native String space_measurement_svg__SWIG_0(long jarg1, space_measurement jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String space_measurement_svgSwigExplicitspace_measurement__SWIG_0(long jarg1, space_measurement jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String space_measurement_svg__SWIG_1(long jarg1, space_measurement jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String space_measurement_svgSwigExplicitspace_measurement__SWIG_1(long jarg1, space_measurement jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String space_measurement_str(long jarg1, space_measurement jarg1_);
  public final static native String space_measurement_strSwigExplicitspace_measurement(long jarg1, space_measurement jarg1_);
  public final static native void space_measurement_director_connect(space_measurement obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void space_measurement_change_ownership(space_measurement obj, long cptr, boolean take_or_release);
  public final static native String e_direction_c_str(int jarg1);
  public final static native int e_direction_c_dir(int jarg1);
  public final static native long e_direction_c_vec();
  public final static native int e_direction_c_parse(String jarg1);
  public final static native long new_e_direction_c();
  public final static native void delete_e_direction_c(long jarg1);
  public final static native long new_e_direction_vector__SWIG_0();
  public final static native long new_e_direction_vector__SWIG_1(long jarg1);
  public final static native long e_direction_vector_size(long jarg1, e_direction_vector jarg1_);
  public final static native long e_direction_vector_capacity(long jarg1, e_direction_vector jarg1_);
  public final static native void e_direction_vector_reserve(long jarg1, e_direction_vector jarg1_, long jarg2);
  public final static native boolean e_direction_vector_isEmpty(long jarg1, e_direction_vector jarg1_);
  public final static native void e_direction_vector_clear(long jarg1, e_direction_vector jarg1_);
  public final static native void e_direction_vector_add(long jarg1, e_direction_vector jarg1_, int jarg2);
  public final static native int e_direction_vector_get(long jarg1, e_direction_vector jarg1_, int jarg2);
  public final static native void e_direction_vector_set(long jarg1, e_direction_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_direction_vector(long jarg1);
  public final static native String e_contact_hook_c_str(int jarg1);
  public final static native long e_contact_hook_c_vec();
  public final static native int e_contact_hook_c_parse(String jarg1);
  public final static native long new_e_contact_hook_c();
  public final static native void delete_e_contact_hook_c(long jarg1);
  public final static native long new_e_contact_hook_vector__SWIG_0();
  public final static native long new_e_contact_hook_vector__SWIG_1(long jarg1);
  public final static native long e_contact_hook_vector_size(long jarg1, e_contact_hook_vector jarg1_);
  public final static native long e_contact_hook_vector_capacity(long jarg1, e_contact_hook_vector jarg1_);
  public final static native void e_contact_hook_vector_reserve(long jarg1, e_contact_hook_vector jarg1_, long jarg2);
  public final static native boolean e_contact_hook_vector_isEmpty(long jarg1, e_contact_hook_vector jarg1_);
  public final static native void e_contact_hook_vector_clear(long jarg1, e_contact_hook_vector jarg1_);
  public final static native void e_contact_hook_vector_add(long jarg1, e_contact_hook_vector jarg1_, int jarg2);
  public final static native int e_contact_hook_vector_get(long jarg1, e_contact_hook_vector jarg1_, int jarg2);
  public final static native void e_contact_hook_vector_set(long jarg1, e_contact_hook_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_contact_hook_vector(long jarg1);
  public final static native long new_direction_symbol__SWIG_0(int jarg1, int jarg2, long jarg3, pin jarg3_, long jarg4, pin jarg4_, long jarg5, i_dynamics_sign jarg5_, long jarg6, space_measurement jarg6_, int jarg7);
  public final static native long new_direction_symbol__SWIG_1(int jarg1, int jarg2, long jarg3, pin jarg3_, long jarg4, pin jarg4_, long jarg5, i_dynamics_sign jarg5_, long jarg6, space_measurement jarg6_);
  public final static native long new_direction_symbol__SWIG_2(int jarg1, int jarg2, long jarg3, pin jarg3_, long jarg4, pin jarg4_, long jarg5, i_dynamics_sign jarg5_);
  public final static native long new_direction_symbol__SWIG_3(int jarg1, int jarg2, long jarg3, pin jarg3_, long jarg4, pin jarg4_);
  public final static native long new_direction_symbol__SWIG_4(int jarg1, int jarg2, long jarg3, pin jarg3_);
  public final static native long new_direction_symbol__SWIG_5(int jarg1, int jarg2);
  public final static native void delete_direction_symbol(long jarg1);
  public final static native int direction_symbol_get_vertical(long jarg1, direction_symbol jarg1_);
  public final static native int direction_symbol_get_horizontal(long jarg1, direction_symbol jarg1_);
  public final static native long direction_symbol_get_modification_pin(long jarg1, direction_symbol jarg1_);
  public final static native long direction_symbol_get_relationship_pin(long jarg1, direction_symbol jarg1_);
  public final static native long direction_symbol_get_dynamics(long jarg1, direction_symbol jarg1_);
  public final static native long direction_symbol_get_space_measurement(long jarg1, direction_symbol jarg1_);
  public final static native int direction_symbol_get_contact_hook(long jarg1, direction_symbol jarg1_);
  public final static native boolean direction_symbol_equals(long jarg1, direction_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native boolean direction_symbol_equalsSwigExplicitdirection_symbol(long jarg1, direction_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native String direction_symbol_xml__SWIG_0(long jarg1, direction_symbol jarg1_, long jarg2, String jarg3);
  public final static native String direction_symbol_xmlSwigExplicitdirection_symbol__SWIG_0(long jarg1, direction_symbol jarg1_, long jarg2, String jarg3);
  public final static native String direction_symbol_xml__SWIG_1(long jarg1, direction_symbol jarg1_, long jarg2);
  public final static native String direction_symbol_xmlSwigExplicitdirection_symbol__SWIG_1(long jarg1, direction_symbol jarg1_, long jarg2);
  public final static native String direction_symbol_xml__SWIG_2(long jarg1, direction_symbol jarg1_);
  public final static native String direction_symbol_xmlSwigExplicitdirection_symbol__SWIG_2(long jarg1, direction_symbol jarg1_);
  public final static native String direction_symbol_svg__SWIG_0(long jarg1, direction_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String direction_symbol_svgSwigExplicitdirection_symbol__SWIG_0(long jarg1, direction_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String direction_symbol_svg__SWIG_1(long jarg1, direction_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String direction_symbol_svgSwigExplicitdirection_symbol__SWIG_1(long jarg1, direction_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String direction_symbol_str(long jarg1, direction_symbol jarg1_);
  public final static native String direction_symbol_strSwigExplicitdirection_symbol(long jarg1, direction_symbol jarg1_);
  public final static native void direction_symbol_director_connect(direction_symbol obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void direction_symbol_change_ownership(direction_symbol obj, long cptr, boolean take_or_release);
  public final static native String e_turn_direction_c_str(int jarg1);
  public final static native long e_turn_direction_c_vec();
  public final static native int e_turn_direction_c_parse(String jarg1);
  public final static native long new_e_turn_direction_c();
  public final static native void delete_e_turn_direction_c(long jarg1);
  public final static native long new_e_turn_direction_vector__SWIG_0();
  public final static native long new_e_turn_direction_vector__SWIG_1(long jarg1);
  public final static native long e_turn_direction_vector_size(long jarg1, e_turn_direction_vector jarg1_);
  public final static native long e_turn_direction_vector_capacity(long jarg1, e_turn_direction_vector jarg1_);
  public final static native void e_turn_direction_vector_reserve(long jarg1, e_turn_direction_vector jarg1_, long jarg2);
  public final static native boolean e_turn_direction_vector_isEmpty(long jarg1, e_turn_direction_vector jarg1_);
  public final static native void e_turn_direction_vector_clear(long jarg1, e_turn_direction_vector jarg1_);
  public final static native void e_turn_direction_vector_add(long jarg1, e_turn_direction_vector jarg1_, int jarg2);
  public final static native int e_turn_direction_vector_get(long jarg1, e_turn_direction_vector jarg1_, int jarg2);
  public final static native void e_turn_direction_vector_set(long jarg1, e_turn_direction_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_turn_direction_vector(long jarg1);
  public final static native long new_turn_symbol__SWIG_0(int jarg1, long jarg2, i_dynamics_sign jarg2_, long jarg3, i_degree_sign jarg3_);
  public final static native long new_turn_symbol__SWIG_1(int jarg1, long jarg2, i_dynamics_sign jarg2_);
  public final static native long new_turn_symbol__SWIG_2(int jarg1);
  public final static native void delete_turn_symbol(long jarg1);
  public final static native int turn_symbol_get_direction(long jarg1, turn_symbol jarg1_);
  public final static native long turn_symbol_get_dynamics(long jarg1, turn_symbol jarg1_);
  public final static native long turn_symbol_get_degree(long jarg1, turn_symbol jarg1_);
  public final static native boolean turn_symbol_equals(long jarg1, turn_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native boolean turn_symbol_equalsSwigExplicitturn_symbol(long jarg1, turn_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native String turn_symbol_xml__SWIG_0(long jarg1, turn_symbol jarg1_, long jarg2, String jarg3);
  public final static native String turn_symbol_xmlSwigExplicitturn_symbol__SWIG_0(long jarg1, turn_symbol jarg1_, long jarg2, String jarg3);
  public final static native String turn_symbol_xml__SWIG_1(long jarg1, turn_symbol jarg1_, long jarg2);
  public final static native String turn_symbol_xmlSwigExplicitturn_symbol__SWIG_1(long jarg1, turn_symbol jarg1_, long jarg2);
  public final static native String turn_symbol_xml__SWIG_2(long jarg1, turn_symbol jarg1_);
  public final static native String turn_symbol_xmlSwigExplicitturn_symbol__SWIG_2(long jarg1, turn_symbol jarg1_);
  public final static native String turn_symbol_svg__SWIG_0(long jarg1, turn_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String turn_symbol_svgSwigExplicitturn_symbol__SWIG_0(long jarg1, turn_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String turn_symbol_svg__SWIG_1(long jarg1, turn_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String turn_symbol_svgSwigExplicitturn_symbol__SWIG_1(long jarg1, turn_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String turn_symbol_str(long jarg1, turn_symbol jarg1_);
  public final static native String turn_symbol_strSwigExplicitturn_symbol(long jarg1, turn_symbol jarg1_);
  public final static native void turn_symbol_director_connect(turn_symbol obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void turn_symbol_change_ownership(turn_symbol obj, long cptr, boolean take_or_release);
  public final static native long new_vibration_symbol__SWIG_0(long jarg1, pin jarg1_, long jarg2, pin jarg2_, long jarg3, i_dynamics_sign jarg3_);
  public final static native long new_vibration_symbol__SWIG_1(long jarg1, pin jarg1_, long jarg2, pin jarg2_);
  public final static native void delete_vibration_symbol(long jarg1);
  public final static native long vibration_symbol_get_dynamics(long jarg1, vibration_symbol jarg1_);
  public final static native long vibration_symbol_get_displacement1(long jarg1, vibration_symbol jarg1_);
  public final static native long vibration_symbol_get_displacement2(long jarg1, vibration_symbol jarg1_);
  public final static native boolean vibration_symbol_equals(long jarg1, vibration_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native boolean vibration_symbol_equalsSwigExplicitvibration_symbol(long jarg1, vibration_symbol jarg1_, long jarg2, i_symbol jarg2_);
  public final static native String vibration_symbol_xml__SWIG_0(long jarg1, vibration_symbol jarg1_, long jarg2, String jarg3);
  public final static native String vibration_symbol_xmlSwigExplicitvibration_symbol__SWIG_0(long jarg1, vibration_symbol jarg1_, long jarg2, String jarg3);
  public final static native String vibration_symbol_xml__SWIG_1(long jarg1, vibration_symbol jarg1_, long jarg2);
  public final static native String vibration_symbol_xmlSwigExplicitvibration_symbol__SWIG_1(long jarg1, vibration_symbol jarg1_, long jarg2);
  public final static native String vibration_symbol_xml__SWIG_2(long jarg1, vibration_symbol jarg1_);
  public final static native String vibration_symbol_xmlSwigExplicitvibration_symbol__SWIG_2(long jarg1, vibration_symbol jarg1_);
  public final static native String vibration_symbol_svg__SWIG_0(long jarg1, vibration_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String vibration_symbol_svgSwigExplicitvibration_symbol__SWIG_0(long jarg1, vibration_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String vibration_symbol_svg__SWIG_1(long jarg1, vibration_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String vibration_symbol_svgSwigExplicitvibration_symbol__SWIG_1(long jarg1, vibration_symbol jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String vibration_symbol_str(long jarg1, vibration_symbol jarg1_);
  public final static native String vibration_symbol_strSwigExplicitvibration_symbol(long jarg1, vibration_symbol jarg1_);
  public final static native void vibration_symbol_director_connect(vibration_symbol obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void vibration_symbol_change_ownership(vibration_symbol obj, long cptr, boolean take_or_release);
  public final static native void delete_i_part(long jarg1);
  public final static native String i_part_xml__SWIG_0(long jarg1, i_part jarg1_, long jarg2, String jarg3);
  public final static native String i_part_xml__SWIG_1(long jarg1, i_part jarg1_, long jarg2);
  public final static native String i_part_xml__SWIG_2(long jarg1, i_part jarg1_);
  public final static native String i_part_svg__SWIG_0(long jarg1, i_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String i_part_svg__SWIG_1(long jarg1, i_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean i_part_equals(long jarg1, i_part jarg1_, long jarg2, i_part jarg2_);
  public final static native long new_i_part();
  public final static native void i_part_director_connect(i_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_part_change_ownership(i_part obj, long cptr, boolean take_or_release);
  public final static native void delete_i_endpoint(long jarg1);
  public final static native String i_endpoint_xml__SWIG_0(long jarg1, i_endpoint jarg1_, long jarg2, String jarg3);
  public final static native String i_endpoint_xml__SWIG_1(long jarg1, i_endpoint jarg1_, long jarg2);
  public final static native String i_endpoint_xml__SWIG_2(long jarg1, i_endpoint jarg1_);
  public final static native long i_endpoint_get_fixed_end(long jarg1, i_endpoint jarg1_);
  public final static native boolean i_endpoint_equals__SWIG_0(long jarg1, i_endpoint jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean i_endpoint_equals__SWIG_1(long jarg1, i_endpoint jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native long new_i_endpoint();
  public final static native void i_endpoint_director_connect(i_endpoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_endpoint_change_ownership(i_endpoint obj, long cptr, boolean take_or_release);
  public final static native String e_area_c_str(int jarg1);
  public final static native long e_area_c_vec();
  public final static native int e_area_c_parse(String jarg1);
  public final static native long new_e_area_c();
  public final static native void delete_e_area_c(long jarg1);
  public final static native long new_e_area_vector__SWIG_0();
  public final static native long new_e_area_vector__SWIG_1(long jarg1);
  public final static native long e_area_vector_size(long jarg1, e_area_vector jarg1_);
  public final static native long e_area_vector_capacity(long jarg1, e_area_vector jarg1_);
  public final static native void e_area_vector_reserve(long jarg1, e_area_vector jarg1_, long jarg2);
  public final static native boolean e_area_vector_isEmpty(long jarg1, e_area_vector jarg1_);
  public final static native void e_area_vector_clear(long jarg1, e_area_vector jarg1_);
  public final static native void e_area_vector_add(long jarg1, e_area_vector jarg1_, int jarg2);
  public final static native int e_area_vector_get(long jarg1, e_area_vector jarg1_, int jarg2);
  public final static native void e_area_vector_set(long jarg1, e_area_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_area_vector(long jarg1);
  public final static native long new_area_part(int jarg1);
  public final static native void delete_area_part(long jarg1);
  public final static native int area_part_get_area(long jarg1, area_part jarg1_);
  public final static native String area_part_xml__SWIG_0(long jarg1, area_part jarg1_, long jarg2, String jarg3);
  public final static native String area_part_xmlSwigExplicitarea_part__SWIG_0(long jarg1, area_part jarg1_, long jarg2, String jarg3);
  public final static native String area_part_xml__SWIG_1(long jarg1, area_part jarg1_, long jarg2);
  public final static native String area_part_xmlSwigExplicitarea_part__SWIG_1(long jarg1, area_part jarg1_, long jarg2);
  public final static native String area_part_xml__SWIG_2(long jarg1, area_part jarg1_);
  public final static native String area_part_xmlSwigExplicitarea_part__SWIG_2(long jarg1, area_part jarg1_);
  public final static native String area_part_svg__SWIG_0(long jarg1, area_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String area_part_svgSwigExplicitarea_part__SWIG_0(long jarg1, area_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String area_part_svg__SWIG_1(long jarg1, area_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String area_part_svgSwigExplicitarea_part__SWIG_1(long jarg1, area_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native long area_part_get_fixed_end(long jarg1, area_part jarg1_);
  public final static native long area_part_get_fixed_endSwigExplicitarea_part(long jarg1, area_part jarg1_);
  public final static native boolean area_part_equals__SWIG_0(long jarg1, area_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean area_part_equalsSwigExplicitarea_part__SWIG_0(long jarg1, area_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean area_part_equals__SWIG_1(long jarg1, area_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native boolean area_part_equalsSwigExplicitarea_part__SWIG_1(long jarg1, area_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native void area_part_director_connect(area_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void area_part_change_ownership(area_part obj, long cptr, boolean take_or_release);
  public final static native String e_side_c_str(int jarg1);
  public final static native long e_side_c_vec();
  public final static native int e_side_c_parse(String jarg1);
  public final static native long new_e_side_c();
  public final static native void delete_e_side_c(long jarg1);
  public final static native long new_e_side_vector__SWIG_0();
  public final static native long new_e_side_vector__SWIG_1(long jarg1);
  public final static native long e_side_vector_size(long jarg1, e_side_vector jarg1_);
  public final static native long e_side_vector_capacity(long jarg1, e_side_vector jarg1_);
  public final static native void e_side_vector_reserve(long jarg1, e_side_vector jarg1_, long jarg2);
  public final static native boolean e_side_vector_isEmpty(long jarg1, e_side_vector jarg1_);
  public final static native void e_side_vector_clear(long jarg1, e_side_vector jarg1_);
  public final static native void e_side_vector_add(long jarg1, e_side_vector jarg1_, int jarg2);
  public final static native int e_side_vector_get(long jarg1, e_side_vector jarg1_, int jarg2);
  public final static native void e_side_vector_set(long jarg1, e_side_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_side_vector(long jarg1);
  public final static native long new_body_part(int jarg1, long jarg2, i_part jarg2_);
  public final static native void delete_body_part(long jarg1);
  public final static native int body_part_get_side(long jarg1, body_part jarg1_);
  public final static native long body_part_get_part(long jarg1, body_part jarg1_);
  public final static native String body_part_xml__SWIG_0(long jarg1, body_part jarg1_, long jarg2, String jarg3);
  public final static native String body_part_xmlSwigExplicitbody_part__SWIG_0(long jarg1, body_part jarg1_, long jarg2, String jarg3);
  public final static native String body_part_xml__SWIG_1(long jarg1, body_part jarg1_, long jarg2);
  public final static native String body_part_xmlSwigExplicitbody_part__SWIG_1(long jarg1, body_part jarg1_, long jarg2);
  public final static native String body_part_xml__SWIG_2(long jarg1, body_part jarg1_);
  public final static native String body_part_xmlSwigExplicitbody_part__SWIG_2(long jarg1, body_part jarg1_);
  public final static native String body_part_svg__SWIG_0(long jarg1, body_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String body_part_svgSwigExplicitbody_part__SWIG_0(long jarg1, body_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String body_part_svg__SWIG_1(long jarg1, body_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String body_part_svgSwigExplicitbody_part__SWIG_1(long jarg1, body_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean body_part_equals(long jarg1, body_part jarg1_, long jarg2, i_pre_sign jarg2_);
  public final static native boolean body_part_equalsSwigExplicitbody_part(long jarg1, body_part jarg1_, long jarg2, i_pre_sign jarg2_);
  public final static native void body_part_director_connect(body_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void body_part_change_ownership(body_part obj, long cptr, boolean take_or_release);
  public final static native void delete_i_limb(long jarg1);
  public final static native String i_limb_xml__SWIG_0(long jarg1, i_limb jarg1_, long jarg2, String jarg3);
  public final static native String i_limb_xml__SWIG_1(long jarg1, i_limb jarg1_, long jarg2);
  public final static native String i_limb_xml__SWIG_2(long jarg1, i_limb jarg1_);
  public final static native boolean i_limb_equals__SWIG_0(long jarg1, i_limb jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean i_limb_equals__SWIG_1(long jarg1, i_limb jarg1_, long jarg2, i_limb jarg2_);
  public final static native long new_i_limb();
  public final static native void i_limb_director_connect(i_limb obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void i_limb_change_ownership(i_limb obj, long cptr, boolean take_or_release);
  public final static native long new_custom_limb__SWIG_0(long jarg1, i_endpoint jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native long new_custom_limb__SWIG_1(long jarg1, i_endpoint jarg1_);
  public final static native void delete_custom_limb(long jarg1);
  public final static native long custom_limb_get_fixed_end(long jarg1, custom_limb jarg1_);
  public final static native long custom_limb_get_extremity(long jarg1, custom_limb jarg1_);
  public final static native String custom_limb_xml__SWIG_0(long jarg1, custom_limb jarg1_, long jarg2, String jarg3);
  public final static native String custom_limb_xmlSwigExplicitcustom_limb__SWIG_0(long jarg1, custom_limb jarg1_, long jarg2, String jarg3);
  public final static native String custom_limb_xml__SWIG_1(long jarg1, custom_limb jarg1_, long jarg2);
  public final static native String custom_limb_xmlSwigExplicitcustom_limb__SWIG_1(long jarg1, custom_limb jarg1_, long jarg2);
  public final static native String custom_limb_xml__SWIG_2(long jarg1, custom_limb jarg1_);
  public final static native String custom_limb_xmlSwigExplicitcustom_limb__SWIG_2(long jarg1, custom_limb jarg1_);
  public final static native String custom_limb_svg__SWIG_0(long jarg1, custom_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String custom_limb_svgSwigExplicitcustom_limb__SWIG_0(long jarg1, custom_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String custom_limb_svg__SWIG_1(long jarg1, custom_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String custom_limb_svgSwigExplicitcustom_limb__SWIG_1(long jarg1, custom_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean custom_limb_equals__SWIG_0(long jarg1, custom_limb jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean custom_limb_equalsSwigExplicitcustom_limb__SWIG_0(long jarg1, custom_limb jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean custom_limb_equals__SWIG_1(long jarg1, custom_limb jarg1_, long jarg2, i_limb jarg2_);
  public final static native boolean custom_limb_equalsSwigExplicitcustom_limb__SWIG_1(long jarg1, custom_limb jarg1_, long jarg2, i_limb jarg2_);
  public final static native void custom_limb_director_connect(custom_limb obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void custom_limb_change_ownership(custom_limb obj, long cptr, boolean take_or_release);
  public final static native String e_limb_c_str(int jarg1);
  public final static native long e_limb_c_vec();
  public final static native int e_limb_c_parse(String jarg1);
  public final static native long new_e_limb_c();
  public final static native void delete_e_limb_c(long jarg1);
  public final static native long new_e_limb_vector__SWIG_0();
  public final static native long new_e_limb_vector__SWIG_1(long jarg1);
  public final static native long e_limb_vector_size(long jarg1, e_limb_vector jarg1_);
  public final static native long e_limb_vector_capacity(long jarg1, e_limb_vector jarg1_);
  public final static native void e_limb_vector_reserve(long jarg1, e_limb_vector jarg1_, long jarg2);
  public final static native boolean e_limb_vector_isEmpty(long jarg1, e_limb_vector jarg1_);
  public final static native void e_limb_vector_clear(long jarg1, e_limb_vector jarg1_);
  public final static native void e_limb_vector_add(long jarg1, e_limb_vector jarg1_, int jarg2);
  public final static native int e_limb_vector_get(long jarg1, e_limb_vector jarg1_, int jarg2);
  public final static native void e_limb_vector_set(long jarg1, e_limb_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_limb_vector(long jarg1);
  public final static native long new_default_limb(int jarg1);
  public final static native void delete_default_limb(long jarg1);
  public final static native int default_limb_get_limb(long jarg1, default_limb jarg1_);
  public final static native String default_limb_xml__SWIG_0(long jarg1, default_limb jarg1_, long jarg2, String jarg3);
  public final static native String default_limb_xmlSwigExplicitdefault_limb__SWIG_0(long jarg1, default_limb jarg1_, long jarg2, String jarg3);
  public final static native String default_limb_xml__SWIG_1(long jarg1, default_limb jarg1_, long jarg2);
  public final static native String default_limb_xmlSwigExplicitdefault_limb__SWIG_1(long jarg1, default_limb jarg1_, long jarg2);
  public final static native String default_limb_xml__SWIG_2(long jarg1, default_limb jarg1_);
  public final static native String default_limb_xmlSwigExplicitdefault_limb__SWIG_2(long jarg1, default_limb jarg1_);
  public final static native String default_limb_svg__SWIG_0(long jarg1, default_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String default_limb_svgSwigExplicitdefault_limb__SWIG_0(long jarg1, default_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String default_limb_svg__SWIG_1(long jarg1, default_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String default_limb_svgSwigExplicitdefault_limb__SWIG_1(long jarg1, default_limb jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean default_limb_equals__SWIG_0(long jarg1, default_limb jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean default_limb_equalsSwigExplicitdefault_limb__SWIG_0(long jarg1, default_limb jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean default_limb_equals__SWIG_1(long jarg1, default_limb jarg1_, long jarg2, i_limb jarg2_);
  public final static native boolean default_limb_equalsSwigExplicitdefault_limb__SWIG_1(long jarg1, default_limb jarg1_, long jarg2, i_limb jarg2_);
  public final static native void default_limb_director_connect(default_limb obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void default_limb_change_ownership(default_limb obj, long cptr, boolean take_or_release);
  public final static native String e_digit_c_str(int jarg1);
  public final static native long e_digit_c_vec();
  public final static native int e_digit_c_parse(String jarg1);
  public final static native long new_e_digit_c();
  public final static native void delete_e_digit_c(long jarg1);
  public final static native long new_e_digit_vector__SWIG_0();
  public final static native long new_e_digit_vector__SWIG_1(long jarg1);
  public final static native long e_digit_vector_size(long jarg1, e_digit_vector jarg1_);
  public final static native long e_digit_vector_capacity(long jarg1, e_digit_vector jarg1_);
  public final static native void e_digit_vector_reserve(long jarg1, e_digit_vector jarg1_, long jarg2);
  public final static native boolean e_digit_vector_isEmpty(long jarg1, e_digit_vector jarg1_);
  public final static native void e_digit_vector_clear(long jarg1, e_digit_vector jarg1_);
  public final static native void e_digit_vector_add(long jarg1, e_digit_vector jarg1_, int jarg2);
  public final static native int e_digit_vector_get(long jarg1, e_digit_vector jarg1_, int jarg2);
  public final static native void e_digit_vector_set(long jarg1, e_digit_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_digit_vector(long jarg1);
  public final static native long new_digit_part(int jarg1, long jarg2);
  public final static native void delete_digit_part(long jarg1);
  public final static native int digit_part_get_digit(long jarg1, digit_part jarg1_);
  public final static native long digit_part_get_knuckle(long jarg1, digit_part jarg1_);
  public final static native String digit_part_xml__SWIG_0(long jarg1, digit_part jarg1_, long jarg2, String jarg3);
  public final static native String digit_part_xmlSwigExplicitdigit_part__SWIG_0(long jarg1, digit_part jarg1_, long jarg2, String jarg3);
  public final static native String digit_part_xml__SWIG_1(long jarg1, digit_part jarg1_, long jarg2);
  public final static native String digit_part_xmlSwigExplicitdigit_part__SWIG_1(long jarg1, digit_part jarg1_, long jarg2);
  public final static native String digit_part_xml__SWIG_2(long jarg1, digit_part jarg1_);
  public final static native String digit_part_xmlSwigExplicitdigit_part__SWIG_2(long jarg1, digit_part jarg1_);
  public final static native String digit_part_svg__SWIG_0(long jarg1, digit_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String digit_part_svgSwigExplicitdigit_part__SWIG_0(long jarg1, digit_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String digit_part_svg__SWIG_1(long jarg1, digit_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String digit_part_svgSwigExplicitdigit_part__SWIG_1(long jarg1, digit_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native long digit_part_get_fixed_end(long jarg1, digit_part jarg1_);
  public final static native long digit_part_get_fixed_endSwigExplicitdigit_part(long jarg1, digit_part jarg1_);
  public final static native boolean digit_part_equals__SWIG_0(long jarg1, digit_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean digit_part_equalsSwigExplicitdigit_part__SWIG_0(long jarg1, digit_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean digit_part_equals__SWIG_1(long jarg1, digit_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native boolean digit_part_equalsSwigExplicitdigit_part__SWIG_1(long jarg1, digit_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native void digit_part_director_connect(digit_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void digit_part_change_ownership(digit_part obj, long cptr, boolean take_or_release);
  public final static native String e_limb_side_c_str(int jarg1);
  public final static native long e_limb_side_c_vec();
  public final static native int e_limb_side_c_parse(String jarg1);
  public final static native long new_e_limb_side_c();
  public final static native void delete_e_limb_side_c(long jarg1);
  public final static native long new_e_limb_side_vector__SWIG_0();
  public final static native long new_e_limb_side_vector__SWIG_1(long jarg1);
  public final static native long e_limb_side_vector_size(long jarg1, e_limb_side_vector jarg1_);
  public final static native long e_limb_side_vector_capacity(long jarg1, e_limb_side_vector jarg1_);
  public final static native void e_limb_side_vector_reserve(long jarg1, e_limb_side_vector jarg1_, long jarg2);
  public final static native boolean e_limb_side_vector_isEmpty(long jarg1, e_limb_side_vector jarg1_);
  public final static native void e_limb_side_vector_clear(long jarg1, e_limb_side_vector jarg1_);
  public final static native void e_limb_side_vector_add(long jarg1, e_limb_side_vector jarg1_, int jarg2);
  public final static native int e_limb_side_vector_get(long jarg1, e_limb_side_vector jarg1_, int jarg2);
  public final static native void e_limb_side_vector_set(long jarg1, e_limb_side_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_limb_side_vector(long jarg1);
  public final static native long new_surface_part(int jarg1, long jarg2, i_limb jarg2_);
  public final static native void delete_surface_part(long jarg1);
  public final static native int surface_part_get_limb_side(long jarg1, surface_part jarg1_);
  public final static native long surface_part_get_limb(long jarg1, surface_part jarg1_);
  public final static native String surface_part_xml__SWIG_0(long jarg1, surface_part jarg1_, long jarg2, String jarg3);
  public final static native String surface_part_xmlSwigExplicitsurface_part__SWIG_0(long jarg1, surface_part jarg1_, long jarg2, String jarg3);
  public final static native String surface_part_xml__SWIG_1(long jarg1, surface_part jarg1_, long jarg2);
  public final static native String surface_part_xmlSwigExplicitsurface_part__SWIG_1(long jarg1, surface_part jarg1_, long jarg2);
  public final static native String surface_part_xml__SWIG_2(long jarg1, surface_part jarg1_);
  public final static native String surface_part_xmlSwigExplicitsurface_part__SWIG_2(long jarg1, surface_part jarg1_);
  public final static native String surface_part_svg__SWIG_0(long jarg1, surface_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String surface_part_svgSwigExplicitsurface_part__SWIG_0(long jarg1, surface_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String surface_part_svg__SWIG_1(long jarg1, surface_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String surface_part_svgSwigExplicitsurface_part__SWIG_1(long jarg1, surface_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean surface_part_equals(long jarg1, surface_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean surface_part_equalsSwigExplicitsurface_part(long jarg1, surface_part jarg1_, long jarg2, i_part jarg2_);
  public final static native void surface_part_director_connect(surface_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void surface_part_change_ownership(surface_part obj, long cptr, boolean take_or_release);
  public final static native String e_joint_c_str(int jarg1);
  public final static native long e_joint_c_vec();
  public final static native int e_joint_c_parse(String jarg1);
  public final static native long new_e_joint_c();
  public final static native void delete_e_joint_c(long jarg1);
  public final static native long new_e_joint_vector__SWIG_0();
  public final static native long new_e_joint_vector__SWIG_1(long jarg1);
  public final static native long e_joint_vector_size(long jarg1, e_joint_vector jarg1_);
  public final static native long e_joint_vector_capacity(long jarg1, e_joint_vector jarg1_);
  public final static native void e_joint_vector_reserve(long jarg1, e_joint_vector jarg1_, long jarg2);
  public final static native boolean e_joint_vector_isEmpty(long jarg1, e_joint_vector jarg1_);
  public final static native void e_joint_vector_clear(long jarg1, e_joint_vector jarg1_);
  public final static native void e_joint_vector_add(long jarg1, e_joint_vector jarg1_, int jarg2);
  public final static native int e_joint_vector_get(long jarg1, e_joint_vector jarg1_, int jarg2);
  public final static native void e_joint_vector_set(long jarg1, e_joint_vector jarg1_, int jarg2, int jarg3);
  public final static native void delete_e_joint_vector(long jarg1);
  public final static native long new_joint_part(int jarg1);
  public final static native void delete_joint_part(long jarg1);
  public final static native int joint_part_get_joint(long jarg1, joint_part jarg1_);
  public final static native String joint_part_xml__SWIG_0(long jarg1, joint_part jarg1_, long jarg2, String jarg3);
  public final static native String joint_part_xmlSwigExplicitjoint_part__SWIG_0(long jarg1, joint_part jarg1_, long jarg2, String jarg3);
  public final static native String joint_part_xml__SWIG_1(long jarg1, joint_part jarg1_, long jarg2);
  public final static native String joint_part_xmlSwigExplicitjoint_part__SWIG_1(long jarg1, joint_part jarg1_, long jarg2);
  public final static native String joint_part_xml__SWIG_2(long jarg1, joint_part jarg1_);
  public final static native String joint_part_xmlSwigExplicitjoint_part__SWIG_2(long jarg1, joint_part jarg1_);
  public final static native String joint_part_svg__SWIG_0(long jarg1, joint_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String joint_part_svgSwigExplicitjoint_part__SWIG_0(long jarg1, joint_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String joint_part_svg__SWIG_1(long jarg1, joint_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String joint_part_svgSwigExplicitjoint_part__SWIG_1(long jarg1, joint_part jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native long joint_part_get_fixed_end(long jarg1, joint_part jarg1_);
  public final static native long joint_part_get_fixed_endSwigExplicitjoint_part(long jarg1, joint_part jarg1_);
  public final static native boolean joint_part_equals__SWIG_0(long jarg1, joint_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean joint_part_equalsSwigExplicitjoint_part__SWIG_0(long jarg1, joint_part jarg1_, long jarg2, i_part jarg2_);
  public final static native boolean joint_part_equals__SWIG_1(long jarg1, joint_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native boolean joint_part_equalsSwigExplicitjoint_part__SWIG_1(long jarg1, joint_part jarg1_, long jarg2, i_endpoint jarg2_);
  public final static native void joint_part_director_connect(joint_part obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void joint_part_change_ownership(joint_part obj, long cptr, boolean take_or_release);
  public final static native long new_prop__SWIG_0(String jarg1, String jarg2);
  public final static native long new_prop__SWIG_1(String jarg1);
  public final static native void delete_prop(long jarg1);
  public final static native String prop_get_name(long jarg1, prop jarg1_);
  public final static native String prop_get_description(long jarg1, prop jarg1_);
  public final static native String prop_xml__SWIG_0(long jarg1, prop jarg1_, long jarg2, String jarg3);
  public final static native String prop_xmlSwigExplicitprop__SWIG_0(long jarg1, prop jarg1_, long jarg2, String jarg3);
  public final static native String prop_xml__SWIG_1(long jarg1, prop jarg1_, long jarg2);
  public final static native String prop_xmlSwigExplicitprop__SWIG_1(long jarg1, prop jarg1_, long jarg2);
  public final static native String prop_xml__SWIG_2(long jarg1, prop jarg1_);
  public final static native String prop_xmlSwigExplicitprop__SWIG_2(long jarg1, prop jarg1_);
  public final static native String prop_svg__SWIG_0(long jarg1, prop jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String prop_svgSwigExplicitprop__SWIG_0(long jarg1, prop jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6, boolean jarg7);
  public final static native String prop_svg__SWIG_1(long jarg1, prop jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native String prop_svgSwigExplicitprop__SWIG_1(long jarg1, prop jarg1_, String jarg2, double jarg3, double jarg4, double jarg5, double jarg6);
  public final static native boolean prop_equals(long jarg1, prop jarg1_, long jarg2, i_pre_sign jarg2_);
  public final static native boolean prop_equalsSwigExplicitprop(long jarg1, prop jarg1_, long jarg2, i_pre_sign jarg2_);
  public final static native void prop_director_connect(prop obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void prop_change_ownership(prop obj, long cptr, boolean take_or_release);
  public final static native long general_enriched_pose_SWIGSmartPtrUpcast(long jarg1);
  public final static native long fl_skeleton_SWIGSmartPtrUpcast(long jarg1);
  public final static native long fl_pose_detector_SWIGSmartPtrUpcast(long jarg1);
  public final static native long laban_sequence_recognizer_SWIGSmartPtrUpcast(long jarg1);
  public final static native long laban_sequence_generator_SWIGSmartPtrUpcast(long jarg1);
  public final static native long fl_movement_controller_SWIGUpcast(long jarg1);
  public final static native long movement_SWIGSmartPtrUpcast(long jarg1);
  public final static native long path_SWIGSmartPtrUpcast(long jarg1);
  public final static native long relationship_bow_SWIGSmartPtrUpcast(long jarg1);
  public final static native long pin_SWIGSmartPtrUpcast(long jarg1);
  public final static native long room_direction_SWIGSmartPtrUpcast(long jarg1);
  public final static native long accent_sign_SWIGSmartPtrUpcast(long jarg1);
  public final static native long dynamic_sign_SWIGSmartPtrUpcast(long jarg1);
  public final static native long cancellation_symbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long space_measurement_SWIGSmartPtrUpcast(long jarg1);
  public final static native long direction_symbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long turn_symbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long vibration_symbol_SWIGSmartPtrUpcast(long jarg1);
  public final static native long i_endpoint_SWIGSmartPtrUpcast(long jarg1);
  public final static native long area_part_SWIGSmartPtrUpcast(long jarg1);
  public final static native long body_part_SWIGSmartPtrUpcast(long jarg1);
  public final static native long i_limb_SWIGSmartPtrUpcast(long jarg1);
  public final static native long custom_limb_SWIGSmartPtrUpcast(long jarg1);
  public final static native long default_limb_SWIGSmartPtrUpcast(long jarg1);
  public final static native long digit_part_SWIGSmartPtrUpcast(long jarg1);
  public final static native long surface_part_SWIGSmartPtrUpcast(long jarg1);
  public final static native long joint_part_SWIGSmartPtrUpcast(long jarg1);
  public final static native long prop_SWIGSmartPtrUpcast(long jarg1);

  public static int SwigDirector_bone_get_id(bone self) {
    return self.get_id();
  }
  public static String SwigDirector_bone_get_name(bone self) {
    return self.get_name();
  }
  public static int SwigDirector_bone_get_from(bone self) {
    return self.get_from();
  }
  public static int SwigDirector_bone_get_to(bone self) {
    return self.get_to();
  }
  public static boolean SwigDirector_bone_has_middle_joint(bone self) {
    return self.has_middle_joint();
  }
  public static int SwigDirector_bone_get_middle_joint(bone self) {
    return self.get_middle_joint();
  }
  public static void SwigDirector_general_pose_set_direction(general_pose self, int body_part, int direction) {
    self.set_direction(body_part, direction);
  }
  public static int SwigDirector_general_pose_get_direction(general_pose self, int body_part) {
    return self.get_direction(body_part);
  }
  public static void SwigDirector_general_pose_set_distance(general_pose self, int body_part, int direction, double distance) {
    self.set_distance(body_part, direction, distance);
  }
  public static double SwigDirector_general_pose_get_distance(general_pose self, int body_part, int direction) {
    return self.get_distance(body_part, direction);
  }
  public static void SwigDirector_general_pose_set_rotation(general_pose self, int body_part, double rotation) {
    self.set_rotation(body_part, rotation);
  }
  public static double SwigDirector_general_pose_get_rotation(general_pose self, int body_part) {
    return self.get_rotation(body_part);
  }
  public static long SwigDirector_general_pose_get_body_parts(general_pose self) {
    return int_list.getCPtr(self.get_body_parts());
  }
  public static long SwigDirector_general_pose_get_directions(general_pose self) {
    return int_list.getCPtr(self.get_directions());
  }
  public static void SwigDirector_i_pose_listener_on_pose(i_pose_listener self, int timestamp, long pose) {
    self.on_pose(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t(pose, false));
  }
  public static void SwigDirector_general_enriched_pose_set_direction(general_enriched_pose self, int body_part, int direction) {
    self.set_direction(body_part, direction);
  }
  public static int SwigDirector_general_enriched_pose_get_direction(general_enriched_pose self, int body_part) {
    return self.get_direction(body_part);
  }
  public static void SwigDirector_general_enriched_pose_set_distance(general_enriched_pose self, int body_part, int direction, double distance) {
    self.set_distance(body_part, direction, distance);
  }
  public static double SwigDirector_general_enriched_pose_get_distance(general_enriched_pose self, int body_part, int direction) {
    return self.get_distance(body_part, direction);
  }
  public static void SwigDirector_general_enriched_pose_set_rotation(general_enriched_pose self, int body_part, double rotation) {
    self.set_rotation(body_part, rotation);
  }
  public static double SwigDirector_general_enriched_pose_get_rotation(general_enriched_pose self, int body_part) {
    return self.get_rotation(body_part);
  }
  public static long SwigDirector_general_enriched_pose_get_body_parts(general_enriched_pose self) {
    return int_list.getCPtr(self.get_body_parts());
  }
  public static long SwigDirector_general_enriched_pose_get_directions(general_enriched_pose self) {
    return int_list.getCPtr(self.get_directions());
  }
  public static void SwigDirector_general_enriched_pose_set_key_pose(general_enriched_pose self, int body_part, boolean is_key_pose) {
    self.set_key_pose(body_part, is_key_pose);
  }
  public static boolean SwigDirector_general_enriched_pose_is_key_pose(general_enriched_pose self, int body_part) {
    return self.is_key_pose(body_part);
  }
  public static void SwigDirector_general_enriched_pose_set_in_motion(general_enriched_pose self, int body_part, boolean is_in_motion) {
    self.set_in_motion(body_part, is_in_motion);
  }
  public static boolean SwigDirector_general_enriched_pose_is_in_motion(general_enriched_pose self, int body_part) {
    return self.is_in_motion(body_part);
  }
  public static void SwigDirector_vec3d_set_x(vec3d self, double x) {
    self.set_x(x);
  }
  public static double SwigDirector_vec3d_get_x(vec3d self) {
    return self.get_x();
  }
  public static void SwigDirector_vec3d_set_y(vec3d self, double y) {
    self.set_y(y);
  }
  public static double SwigDirector_vec3d_get_y(vec3d self) {
    return self.get_y();
  }
  public static void SwigDirector_vec3d_set_z(vec3d self, double z) {
    self.set_z(z);
  }
  public static double SwigDirector_vec3d_get_z(vec3d self) {
    return self.get_z();
  }
  public static String SwigDirector_vec3d_str(vec3d self) {
    return self.str();
  }
  public static void SwigDirector_general_joint_set_x(general_joint self, double x) {
    self.set_x(x);
  }
  public static double SwigDirector_general_joint_get_x(general_joint self) {
    return self.get_x();
  }
  public static void SwigDirector_general_joint_set_y(general_joint self, double y) {
    self.set_y(y);
  }
  public static double SwigDirector_general_joint_get_y(general_joint self) {
    return self.get_y();
  }
  public static void SwigDirector_general_joint_set_z(general_joint self, double z) {
    self.set_z(z);
  }
  public static double SwigDirector_general_joint_get_z(general_joint self) {
    return self.get_z();
  }
  public static void SwigDirector_general_joint_set_valid(general_joint self, boolean is_valid) {
    self.set_valid(is_valid);
  }
  public static boolean SwigDirector_general_joint_is_valid(general_joint self) {
    return self.is_valid();
  }
  public static void SwigDirector_general_joint_set_confidence(general_joint self, double confidence) {
    self.set_confidence(confidence);
  }
  public static double SwigDirector_general_joint_get_confidence(general_joint self) {
    return self.get_confidence();
  }
  public static void SwigDirector_general_joint_set_rotation(general_joint self, double rotation) {
    self.set_rotation(rotation);
  }
  public static double SwigDirector_general_joint_get_rotation(general_joint self) {
    return self.get_rotation();
  }
  public static long SwigDirector_general_joint_vec(general_joint self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.vec());
  }
  public static boolean SwigDirector_general_joint_equals_val(general_joint self, long joint) {
    return self.equals_val(new general_joint(joint, false));
  }
  public static boolean SwigDirector_general_joint_equals(general_joint self, long joint) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t(joint, false));
  }
  public static String SwigDirector_general_joint_str(general_joint self) {
    return self.str();
  }
  public static long SwigDirector_basis_get_u(basis self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_u());
  }
  public static long SwigDirector_basis_get_r(basis self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_r());
  }
  public static long SwigDirector_basis_get_t(basis self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_t());
  }
  public static long SwigDirector_basis_get_position_vector(basis self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_position_vector());
  }
  public static void SwigDirector_basis_set_u(basis self, long u) {
    self.set_u(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(u, false));
  }
  public static void SwigDirector_basis_set_r(basis self, long r) {
    self.set_r(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(r, false));
  }
  public static void SwigDirector_basis_set_t(basis self, long t) {
    self.set_t(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(t, false));
  }
  public static void SwigDirector_basis_set_position_vector(basis self, long position_vector) {
    self.set_position_vector(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(position_vector, false));
  }
  public static String SwigDirector_basis_str(basis self) {
    return self.str();
  }
  public static void SwigDirector_general_skeleton_set_joint(general_skeleton self, int body_part, long joint) {
    self.set_joint(body_part, new SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t(joint, false));
  }
  public static long SwigDirector_general_skeleton_get_joint(general_skeleton self, int body_part) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t.getCPtr(self.get_joint(body_part));
  }
  public static long SwigDirector_general_skeleton_get_hierarchy(general_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t.getCPtr(self.get_hierarchy());
  }
  public static void SwigDirector_general_skeleton_set_hierarchy(general_skeleton self, long hierarchy) {
    self.set_hierarchy(new SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t(hierarchy, false));
  }
  public static void SwigDirector_general_skeleton_set_top_down(general_skeleton self, long top_down) {
    self.set_top_down(new SWIGTYPE_p_std__shared_ptrT_mae__bone_t(top_down, false));
  }
  public static long SwigDirector_general_skeleton_get_top_down(general_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__bone_t.getCPtr(self.get_top_down());
  }
  public static void SwigDirector_general_skeleton_set_right_left(general_skeleton self, long right_left) {
    self.set_right_left(new SWIGTYPE_p_std__shared_ptrT_mae__bone_t(right_left, false));
  }
  public static long SwigDirector_general_skeleton_get_right_left(general_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__bone_t.getCPtr(self.get_right_left());
  }
  public static void SwigDirector_general_skeleton_set_weight(general_skeleton self, long weight) {
    self.set_weight(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(weight, false));
  }
  public static long SwigDirector_general_skeleton_get_weight(general_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_weight());
  }
  public static String SwigDirector_general_skeleton_str(general_skeleton self) {
    return self.str();
  }
  public static String SwigDirector_general_skeleton_ply_str(general_skeleton self) {
    return self.ply_str();
  }
  public static void SwigDirector_general_skeleton_ply_file(general_skeleton self, String filename) {
    self.ply_file(filename);
  }
  public static void SwigDirector_fl_skeleton_set_joint(fl_skeleton self, int body_part, long joint) {
    self.set_joint(body_part, new SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t(joint, false));
  }
  public static long SwigDirector_fl_skeleton_get_joint(fl_skeleton self, int body_part) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t.getCPtr(self.get_joint(body_part));
  }
  public static long SwigDirector_fl_skeleton_get_hierarchy(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t.getCPtr(self.get_hierarchy());
  }
  public static void SwigDirector_fl_skeleton_set_hierarchy(fl_skeleton self, long hierarchy) {
    self.set_hierarchy(new SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t(hierarchy, false));
  }
  public static void SwigDirector_fl_skeleton_set_top_down(fl_skeleton self, long top_down) {
    self.set_top_down(new SWIGTYPE_p_std__shared_ptrT_mae__bone_t(top_down, false));
  }
  public static long SwigDirector_fl_skeleton_get_top_down(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__bone_t.getCPtr(self.get_top_down());
  }
  public static void SwigDirector_fl_skeleton_set_right_left(fl_skeleton self, long right_left) {
    self.set_right_left(new SWIGTYPE_p_std__shared_ptrT_mae__bone_t(right_left, false));
  }
  public static long SwigDirector_fl_skeleton_get_right_left(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__bone_t.getCPtr(self.get_right_left());
  }
  public static void SwigDirector_fl_skeleton_set_weight(fl_skeleton self, long weight) {
    self.set_weight(new SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t(weight, false));
  }
  public static long SwigDirector_fl_skeleton_get_weight(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t.getCPtr(self.get_weight());
  }
  public static String SwigDirector_fl_skeleton_str(fl_skeleton self) {
    return self.str();
  }
  public static String SwigDirector_fl_skeleton_ply_str(fl_skeleton self) {
    return self.ply_str();
  }
  public static void SwigDirector_fl_skeleton_ply_file(fl_skeleton self, String filename) {
    self.ply_file(filename);
  }
  public static void SwigDirector_fl_skeleton_set_torso_basis(fl_skeleton self, long torso_basis) {
    self.set_torso_basis(new SWIGTYPE_p_std__shared_ptrT_mae__math__basis_t(torso_basis, false));
  }
  public static long SwigDirector_fl_skeleton_get_torso_basis(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__math__basis_t.getCPtr(self.get_torso_basis());
  }
  public static void SwigDirector_fl_skeleton_set_orig_skeleton(fl_skeleton self, long offset_skeleton) {
    self.set_orig_skeleton(new SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t(offset_skeleton, false));
  }
  public static long SwigDirector_fl_skeleton_get_orig_skeleton(fl_skeleton self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t.getCPtr(self.get_orig_skeleton());
  }
  public static long SwigDirector_fl_skeleton_pose_detector_pose(fl_skeleton_pose_detector self, long skeleton, long body_parts, long previous_pose) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t.getCPtr(self.pose(new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false), new bone_vector(body_parts, false), new SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t(previous_pose, false)));
  }
  public static long SwigDirector_fl_pose_detector_pose(fl_pose_detector self, long skeleton, long body_parts, long previous_pose) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t.getCPtr(self.pose(new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false), new bone_vector(body_parts, false), new SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t(previous_pose, false)));
  }
  public static void SwigDirector_fl_pose_detector_set_hysteresis_val(fl_pose_detector self, double hysteresis_val) {
    self.set_hysteresis_val(hysteresis_val);
  }
  public static double SwigDirector_fl_pose_detector_get_hysteresis_val(fl_pose_detector self) {
    return self.get_hysteresis_val();
  }
  public static long SwigDirector_fl_pose_detector_vector_pose(fl_pose_detector self, long skeleton, long body_parts, long previous_pose) {
    return SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t.getCPtr(self.vector_pose(new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false), new bone_vector(body_parts, false), new SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t(previous_pose, false)));
  }
  public static String SwigDirector_i_pre_sign_xml__SWIG_0(i_pre_sign self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_pre_sign_xml__SWIG_1(i_pre_sign self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_pre_sign_xml__SWIG_2(i_pre_sign self) {
    return self.xml();
  }
  public static String SwigDirector_i_pre_sign_svg__SWIG_0(i_pre_sign self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_pre_sign_svg__SWIG_1(i_pre_sign self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_i_pre_sign_equals(i_pre_sign self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t(a, false));
  }
  public static String SwigDirector_column_definition_xml__SWIG_0(column_definition self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_column_definition_xml__SWIG_1(column_definition self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_column_definition_xml__SWIG_2(column_definition self) {
    return self.xml();
  }
  public static String SwigDirector_column_definition_svg(column_definition self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static boolean SwigDirector_column_definition_equals(column_definition self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t(a, false));
  }
  public static int SwigDirector_i_movement_get_column(i_movement self) {
    return self.get_column();
  }
  public static long SwigDirector_i_movement_get_measure(i_movement self) {
    return self.get_measure();
  }
  public static double SwigDirector_i_movement_get_beat(i_movement self) {
    return self.get_beat();
  }
  public static double SwigDirector_i_movement_get_duration(i_movement self) {
    return self.get_duration();
  }
  public static boolean SwigDirector_i_movement_equals(i_movement self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static boolean SwigDirector_i_movement_symbol_equals(i_movement self, long a) {
    return self.symbol_equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static String SwigDirector_i_movement_xml__SWIG_0(i_movement self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_movement_xml__SWIG_1(i_movement self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_movement_xml__SWIG_2(i_movement self) {
    return self.xml();
  }
  public static String SwigDirector_i_movement_svg(i_movement self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static long SwigDirector_i_movement_recreate(i_movement self, long column_mapping, long measure, double beat, double duration) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.recreate(new int_int_map(column_mapping, false), measure, beat, duration));
  }
  public static String SwigDirector_i_movement_str(i_movement self) {
    return self.str();
  }
  public static String SwigDirector_laban_sequence_get_version(laban_sequence self) {
    return self.get_version();
  }
  public static void SwigDirector_laban_sequence_set_authors(laban_sequence self, long authors) {
    self.set_authors(new string_vector(authors, false));
  }
  public static void SwigDirector_laban_sequence_add_author(laban_sequence self, String author) {
    self.add_author(author);
  }
  public static long SwigDirector_laban_sequence_get_authors(laban_sequence self) {
    return string_vector.getCPtr(self.get_authors());
  }
  public static void SwigDirector_laban_sequence_set_title(laban_sequence self, String title) {
    self.set_title(title);
  }
  public static String SwigDirector_laban_sequence_get_title(laban_sequence self) {
    return self.get_title();
  }
  public static void SwigDirector_laban_sequence_set_description(laban_sequence self, String description) {
    self.set_description(description);
  }
  public static String SwigDirector_laban_sequence_get_description(laban_sequence self) {
    return self.get_description();
  }
  public static void SwigDirector_laban_sequence_set_measures(laban_sequence self, long measures) {
    self.set_measures(measures);
  }
  public static long SwigDirector_laban_sequence_get_measures(laban_sequence self) {
    return self.get_measures();
  }
  public static void SwigDirector_laban_sequence_set_time_unit(laban_sequence self, int time_unit) {
    self.set_time_unit(e_time_unit.swigToEnum(time_unit));
  }
  public static int SwigDirector_laban_sequence_get_time_unit(laban_sequence self) {
    return (self.get_time_unit()).swigValue();
  }
  public static void SwigDirector_laban_sequence_set_beat_duration(laban_sequence self, long beat_duration) {
    self.set_beat_duration(beat_duration);
  }
  public static long SwigDirector_laban_sequence_get_beat_duration(laban_sequence self) {
    return self.get_beat_duration();
  }
  public static void SwigDirector_laban_sequence_set_beats(laban_sequence self, long beats) {
    self.set_beats(beats);
  }
  public static long SwigDirector_laban_sequence_get_beats(laban_sequence self) {
    return self.get_beats();
  }
  public static void SwigDirector_laban_sequence_set_column_definitions(laban_sequence self, long col_defs) {
    self.set_column_definitions(new coldef_vector(col_defs, false));
  }
  public static void SwigDirector_laban_sequence_add_column_definition(laban_sequence self, long col_def) {
    self.add_column_definition(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t(col_def, false));
  }
  public static long SwigDirector_laban_sequence_get_column_definitions(laban_sequence self) {
    return coldef_vector.getCPtr(self.get_column_definitions());
  }
  public static long SwigDirector_laban_sequence_get_column_definition(laban_sequence self, int column_index) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t.getCPtr(self.get_column_definition(column_index));
  }
  public static void SwigDirector_laban_sequence_clear_column_definitions(laban_sequence self) {
    self.clear_column_definitions();
  }
  public static long SwigDirector_laban_sequence_get_columns(laban_sequence self) {
    return int_vector.getCPtr(self.get_columns());
  }
  public static void SwigDirector_laban_sequence_set_movements(laban_sequence self, long movements) {
    self.set_movements(new i_mov_vector(movements, false));
  }
  public static long SwigDirector_laban_sequence_get_movements(laban_sequence self) {
    return i_mov_vector.getCPtr(self.get_movements());
  }
  public static void SwigDirector_laban_sequence_add_movement(laban_sequence self, long i_mov) {
    self.add_movement(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(i_mov, false));
  }
  public static long SwigDirector_laban_sequence_get_column_movements(laban_sequence self, int column) {
    return i_mov_vector.getCPtr(self.get_column_movements(column));
  }
  public static long SwigDirector_laban_sequence_get_last_movement(laban_sequence self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.get_last_movement());
  }
  public static void SwigDirector_laban_sequence_clear_movements(laban_sequence self) {
    self.clear_movements();
  }
  public static String SwigDirector_laban_sequence_xml__SWIG_0(laban_sequence self, boolean no_header, long indent, String namesp) {
    return self.xml(no_header, indent, namesp);
  }
  public static String SwigDirector_laban_sequence_xml__SWIG_1(laban_sequence self, boolean no_header, long indent) {
    return self.xml(no_header, indent);
  }
  public static String SwigDirector_laban_sequence_xml__SWIG_2(laban_sequence self, boolean no_header) {
    return self.xml(no_header);
  }
  public static String SwigDirector_laban_sequence_xml__SWIG_3(laban_sequence self) {
    return self.xml();
  }
  public static String SwigDirector_laban_sequence_xml_namespace_header__SWIG_0(laban_sequence self, String namesp) {
    return self.xml_namespace_header(namesp);
  }
  public static String SwigDirector_laban_sequence_xml_namespace_header__SWIG_1(laban_sequence self) {
    return self.xml_namespace_header();
  }
  public static String SwigDirector_laban_sequence_xml_schema_location(laban_sequence self) {
    return self.xml_schema_location();
  }
  public static String SwigDirector_laban_sequence_xml_namespace_uri(laban_sequence self) {
    return self.xml_namespace_uri();
  }
  public static void SwigDirector_laban_sequence_xml_file(laban_sequence self, String path) {
    self.xml_file(path);
  }
  public static String SwigDirector_laban_sequence_svg(laban_sequence self, long im_width, long im_height) {
    return self.svg(im_width, im_height);
  }
  public static void SwigDirector_laban_sequence_svg_file__SWIG_0(laban_sequence self, String path, long im_width, long im_height) {
    self.svg_file(path, im_width, im_height);
  }
  public static void SwigDirector_laban_sequence_svg_file__SWIG_1(laban_sequence self, String path, long im_width) {
    self.svg_file(path, im_width);
  }
  public static void SwigDirector_laban_sequence_svg_file__SWIG_2(laban_sequence self, String path) {
    self.svg_file(path);
  }
  public static String SwigDirector_laban_sequence_str(laban_sequence self) {
    return self.str();
  }
  public static String SwigDirector_laban_sequence_svg_fill_pattern(laban_sequence self, String pattern_name, long im_width, long im_height) {
    return self.svg_fill_pattern(pattern_name, im_width, im_height);
  }
  public static void SwigDirector_i_movement_decision_maker_set_recognition_tolerance(i_movement_decision_maker self, double tolerance) {
    self.set_recognition_tolerance(tolerance);
  }
  public static double SwigDirector_i_movement_decision_maker_get_recognition_tolerance(i_movement_decision_maker self) {
    return self.get_recognition_tolerance();
  }
  public static boolean SwigDirector_i_movement_decision_maker_decide_match(i_movement_decision_maker self, long stream_item, long stream_item_predecessor, long tree_item, long tree_item_predecessor) {
    return self.decide_match(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(stream_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(stream_item_predecessor, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item_predecessor, false));
  }
  public static boolean SwigDirector_i_movement_decision_maker_decide_insertion(i_movement_decision_maker self, long add_item, long add_item_predecessor, long tree_item, long tree_item_predecessor) {
    return self.decide_insertion(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(add_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(add_item_predecessor, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item_predecessor, false));
  }
  public static boolean SwigDirector_i_movement_decision_maker_position_okay(i_movement_decision_maker self, double dist_to_last, double set_value, boolean check_startpose) {
    return self.position_okay(dist_to_last, set_value, check_startpose);
  }
  public static double SwigDirector_rewriting_forest_get_tolerance(rewriting_forest self) {
    return self.get_tolerance();
  }
  public static void SwigDirector_rewriting_forest_set_tolerance(rewriting_forest self, double tolerance) {
    self.set_tolerance(tolerance);
  }
  public static long SwigDirector_rewriting_forest_replacements(rewriting_forest self, long sequence) {
    return i_mov_vector_vector.getCPtr(self.replacements(new i_mov_vector(sequence, false)));
  }
  public static void SwigDirector_rewriting_forest_add_rule__SWIG_0(rewriting_forest self, long sequence, long replacements) {
    self.add_rule(new i_mov_vector(sequence, false), new SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t(replacements, false));
  }
  public static void SwigDirector_rewriting_forest_add_rule__SWIG_1(rewriting_forest self, long rule) {
    self.add_rule(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_valueT_mae__fl__laban__i_movement_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t_t(rule, false));
  }
  public static String SwigDirector_rewriting_forest_str(rewriting_forest self) {
    return self.str();
  }
  public static long SwigDirector_i_mov_vector_vector_dec_val_get_sequence(i_mov_vector_vector_dec_val self) {
    return i_mov_vector.getCPtr(self.get_sequence());
  }
  public static long SwigDirector_i_mov_vector_vector_dec_val_get_value(i_mov_vector_vector_dec_val self) {
    return SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t.getCPtr(self.get_value());
  }
  public static void SwigDirector_decision_forest_set_recognition_tolerance(decision_forest self, double tolerance) {
    self.set_recognition_tolerance(tolerance);
  }
  public static void SwigDirector_decision_forest_set_cooldown(decision_forest self, boolean cooldown) {
    self.set_cooldown(cooldown);
  }
  public static boolean SwigDirector_decision_forest_get_cooldown(decision_forest self) {
    return self.get_cooldown();
  }
  public static int SwigDirector_decision_forest_get_sequence_length(decision_forest self, long sequence) {
    return self.get_sequence_length(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_decision_forest_add_sequence(decision_forest self, long sequence) {
    self.add_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_decision_forest_remove_sequence__SWIG_0(decision_forest self, long sequence) {
    return self.remove_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_decision_forest_remove_sequence__SWIG_1(decision_forest self, long list_index) {
    return self.remove_sequence(list_index);
  }
  public static void SwigDirector_decision_forest_clear(decision_forest self) {
    self.clear();
  }
  public static void SwigDirector_decision_forest_add_rewriting_rule__SWIG_0(decision_forest self, long sequence, long replacements) {
    self.add_rewriting_rule(new i_mov_vector(sequence, false), new SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t(replacements, false));
  }
  public static void SwigDirector_decision_forest_add_rewriting_rule__SWIG_1(decision_forest self, long rule) {
    self.add_rewriting_rule(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_valueT_mae__fl__laban__i_movement_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t_t(rule, false));
  }
  public static long SwigDirector_decision_forest_get_sequences(decision_forest self) {
    return laban_sequence_list.getCPtr(self.get_sequences());
  }
  public static long SwigDirector_decision_forest_find_submatches(decision_forest self, long whole_sequence, long body_parts) {
    return laban_sequence_vector.getCPtr(self.find_submatches(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(whole_sequence, false), new bone_vector(body_parts, false)));
  }
  public static String SwigDirector_decision_forest_str(decision_forest self) {
    return self.str();
  }
  public static void SwigDirector_i_dec_maker_set_recognition_tolerance(i_dec_maker self, double tolerance) {
    self.set_recognition_tolerance(tolerance);
  }
  public static double SwigDirector_i_dec_maker_get_recognition_tolerance(i_dec_maker self) {
    return self.get_recognition_tolerance();
  }
  public static boolean SwigDirector_i_dec_maker_decide_match(i_dec_maker self, long stream_item, long stream_item_predecessor, long tree_item, long tree_item_predecessor) {
    return self.decide_match(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(stream_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(stream_item_predecessor, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item_predecessor, false));
  }
  public static boolean SwigDirector_i_dec_maker_decide_insertion(i_dec_maker self, long add_item, long add_item_predecessor, long tree_item, long tree_item_predecessor) {
    return self.decide_insertion(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(add_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(add_item_predecessor, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item, false), new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(tree_item_predecessor, false));
  }
  public static boolean SwigDirector_i_dec_maker_position_okay(i_dec_maker self, double dist_to_last, double set_value, boolean check_startpose) {
    return self.position_okay(dist_to_last, set_value, check_startpose);
  }
  public static void SwigDirector_laban_sequence_sequence_recognizer_register_sequence(laban_sequence_sequence_recognizer self, long sequence) {
    self.register_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_laban_sequence_sequence_recognizer_deregister_sequence__SWIG_0(laban_sequence_sequence_recognizer self, long sequence) {
    return self.deregister_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_laban_sequence_sequence_recognizer_deregister_sequence__SWIG_1(laban_sequence_sequence_recognizer self, long list_index) {
    return self.deregister_sequence(list_index);
  }
  public static void SwigDirector_laban_sequence_sequence_recognizer_clear_registered_sequences(laban_sequence_sequence_recognizer self) {
    self.clear_registered_sequences();
  }
  public static int SwigDirector_laban_sequence_sequence_recognizer_get_sequence_length(laban_sequence_sequence_recognizer self, long sequence) {
    return self.get_sequence_length(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static long SwigDirector_laban_sequence_sequence_recognizer_recognize_sequence(laban_sequence_sequence_recognizer self, long sequence, long body_parts) {
    return laban_sequence_vector.getCPtr(self.recognize_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false), new bone_vector(body_parts, false)));
  }
  public static void SwigDirector_laban_sequence_recognizer_register_sequence(laban_sequence_recognizer self, long sequence) {
    self.register_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_laban_sequence_recognizer_deregister_sequence__SWIG_0(laban_sequence_recognizer self, long sequence) {
    return self.deregister_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static boolean SwigDirector_laban_sequence_recognizer_deregister_sequence__SWIG_1(laban_sequence_recognizer self, long list_index) {
    return self.deregister_sequence(list_index);
  }
  public static void SwigDirector_laban_sequence_recognizer_clear_registered_sequences(laban_sequence_recognizer self) {
    self.clear_registered_sequences();
  }
  public static int SwigDirector_laban_sequence_recognizer_get_sequence_length(laban_sequence_recognizer self, long sequence) {
    return self.get_sequence_length(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static long SwigDirector_laban_sequence_recognizer_recognize_sequence(laban_sequence_recognizer self, long sequence, long body_parts) {
    return laban_sequence_vector.getCPtr(self.recognize_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false), new bone_vector(body_parts, false)));
  }
  public static void SwigDirector_laban_sequence_recognizer_set_recognition_tolerance(laban_sequence_recognizer self, double tolerance) {
    self.set_recognition_tolerance(tolerance);
  }
  public static long SwigDirector_laban_sequence_recognizer_get_decision_forest(laban_sequence_recognizer self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_forest_t.getCPtr(self.get_decision_forest());
  }
  public static long SwigDirector_laban_sequence_recognizer_get_registered_sequences(laban_sequence_recognizer self) {
    return laban_sequence_list.getCPtr(self.get_registered_sequences());
  }
  public static String SwigDirector_laban_sequence_recognizer_str(laban_sequence_recognizer self) {
    return self.str();
  }
  public static long SwigDirector_laban_sequence_sequence_generator_generate_sequence(laban_sequence_sequence_generator self, double framerate, long keyPoses, long bodyParts) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.generate_sequence(framerate, new enriched_pose_list(keyPoses, false), new bone_vector(bodyParts, false)));
  }
  public static long SwigDirector_laban_sequence_generator_generate_sequence(laban_sequence_generator self, double framerate, long key_poses, long body_parts) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.generate_sequence(framerate, new enriched_pose_list(key_poses, false), new bone_vector(body_parts, false)));
  }
  public static void SwigDirector_laban_sequence_sequence_listener_on_sequence(laban_sequence_sequence_listener self, int timestamp, long sequence) {
    self.on_sequence(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_laban_sequence_recognition_listener_on_recognition__SWIG_0(laban_sequence_recognition_listener self, int timestamp, long sequences) {
    self.on_recognition(timestamp, new laban_sequence_vector(sequences, false));
  }
  public static void SwigDirector_laban_sequence_recognition_listener_on_recognition__SWIG_1(laban_sequence_recognition_listener self, int timestamp, long title) {
    self.on_recognition(timestamp, new string_vector(title, false));
  }
  public static long SwigDirector_fl_skeleton_laban_sequence_movement_detector_detect_movement(fl_skeleton_laban_sequence_movement_detector self, int timestamp, double framerate, long skeleton, long body_parts) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.detect_movement(timestamp, framerate, new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false), new bone_vector(body_parts, false)));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_set_buffer(fl_skeleton_laban_sequence_movement_detector self, int size) {
    self.set_buffer(size);
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_clear_buffer(fl_skeleton_laban_sequence_movement_detector self) {
    self.clear_buffer();
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_add_listener(fl_skeleton_laban_sequence_movement_detector self, long listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_remove_listener(fl_skeleton_laban_sequence_movement_detector self, long listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_clear_listeners(fl_skeleton_laban_sequence_movement_detector self) {
    self.clear_listeners();
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_detector_notify_listeners(fl_skeleton_laban_sequence_movement_detector self, int timestamp, long pose) {
    self.notify_listeners(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t(pose, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_next_frame(fl_skeleton_laban_sequence_movement_controller self, int timestamp, long skeleton) {
    self.next_frame(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_register_sequence(fl_skeleton_laban_sequence_movement_controller self, long sequence) {
    self.register_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_deregister_sequence(fl_skeleton_laban_sequence_movement_controller self, long sequence) {
    self.deregister_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_registered_sequences(fl_skeleton_laban_sequence_movement_controller self) {
    self.clear_registered_sequences();
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_set_no_buffer_size_update(fl_skeleton_laban_sequence_movement_controller self, boolean updates) {
    self.set_no_buffer_size_update(updates);
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_buffer(fl_skeleton_laban_sequence_movement_controller self) {
    self.clear_buffer();
  }
  public static long SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_current_sequence(fl_skeleton_laban_sequence_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.get_current_sequence());
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_0(fl_skeleton_laban_sequence_movement_controller self, long pose_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(pose_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_0(fl_skeleton_laban_sequence_movement_controller self, long pose_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(pose_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_1(fl_skeleton_laban_sequence_movement_controller self, long sequence_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t(sequence_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_1(fl_skeleton_laban_sequence_movement_controller self, long sequence_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t(sequence_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_2(fl_skeleton_laban_sequence_movement_controller self, long recognition_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t(recognition_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_2(fl_skeleton_laban_sequence_movement_controller self, long recognition_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t(recognition_listener, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_listeners(fl_skeleton_laban_sequence_movement_controller self) {
    self.clear_listeners();
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_notify_sequence_listeners(fl_skeleton_laban_sequence_movement_controller self, int timestamp, long sequence) {
    self.notify_sequence_listeners(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_skeleton_laban_sequence_movement_controller_notify_recognition_listeners(fl_skeleton_laban_sequence_movement_controller self, int timestamp, long sequences) {
    self.notify_recognition_listeners(timestamp, new laban_sequence_vector(sequences, false));
  }
  public static long SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_movement_detector(fl_skeleton_laban_sequence_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__i_movement_detectorT_mae__fl__fl_skeleton_mae__fl__laban__laban_sequence_t_t.getCPtr(self.get_movement_detector());
  }
  public static long SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_sequence_recognizer(fl_skeleton_laban_sequence_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_recognizerT_mae__fl__laban__laban_sequence_t_t.getCPtr(self.get_sequence_recognizer());
  }
  public static void SwigDirector_fl_movement_controller_next_frame(fl_movement_controller self, int timestamp, long skeleton) {
    self.next_frame(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t(skeleton, false));
  }
  public static void SwigDirector_fl_movement_controller_register_sequence(fl_movement_controller self, long sequence) {
    self.register_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_movement_controller_deregister_sequence(fl_movement_controller self, long sequence) {
    self.deregister_sequence(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_movement_controller_clear_registered_sequences(fl_movement_controller self) {
    self.clear_registered_sequences();
  }
  public static void SwigDirector_fl_movement_controller_set_no_buffer_size_update(fl_movement_controller self, boolean updates) {
    self.set_no_buffer_size_update(updates);
  }
  public static void SwigDirector_fl_movement_controller_clear_buffer(fl_movement_controller self) {
    self.clear_buffer();
  }
  public static long SwigDirector_fl_movement_controller_get_current_sequence(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.get_current_sequence());
  }
  public static void SwigDirector_fl_movement_controller_add_listener__SWIG_0(fl_movement_controller self, long pose_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(pose_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_remove_listener__SWIG_0(fl_movement_controller self, long pose_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t(pose_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_add_listener__SWIG_1(fl_movement_controller self, long sequence_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t(sequence_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_remove_listener__SWIG_1(fl_movement_controller self, long sequence_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t(sequence_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_add_listener__SWIG_2(fl_movement_controller self, long recognition_listener) {
    self.add_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t(recognition_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_remove_listener__SWIG_2(fl_movement_controller self, long recognition_listener) {
    self.remove_listener(new SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t(recognition_listener, false));
  }
  public static void SwigDirector_fl_movement_controller_clear_listeners(fl_movement_controller self) {
    self.clear_listeners();
  }
  public static void SwigDirector_fl_movement_controller_notify_sequence_listeners(fl_movement_controller self, int timestamp, long sequence) {
    self.notify_sequence_listeners(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t(sequence, false));
  }
  public static void SwigDirector_fl_movement_controller_notify_recognition_listeners(fl_movement_controller self, int timestamp, long sequences) {
    self.notify_recognition_listeners(timestamp, new laban_sequence_vector(sequences, false));
  }
  public static long SwigDirector_fl_movement_controller_get_movement_detector(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__i_movement_detectorT_mae__fl__fl_skeleton_mae__fl__laban__laban_sequence_t_t.getCPtr(self.get_movement_detector());
  }
  public static long SwigDirector_fl_movement_controller_get_sequence_recognizer(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_recognizerT_mae__fl__laban__laban_sequence_t_t.getCPtr(self.get_sequence_recognizer());
  }
  public static void SwigDirector_fl_movement_controller_next_frame(fl_movement_controller self, int timestamp, long skeleton) {
    self.next_frame(timestamp, new SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t(skeleton, false));
  }
  public static void SwigDirector_fl_movement_controller_set_recognition_tolerance(fl_movement_controller self, double tolerance) {
    self.set_recognition_tolerance(tolerance);
  }
  public static long SwigDirector_fl_movement_controller_get_laban_sequence_recognizer(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_recognizer_t.getCPtr(self.get_laban_sequence_recognizer());
  }
  public static long SwigDirector_fl_movement_controller_get_laban_sequence_generator(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_generator_t.getCPtr(self.get_laban_sequence_generator());
  }
  public static long SwigDirector_fl_movement_controller_get_fl_pose_detector(fl_movement_controller self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_pose_detector_t.getCPtr(self.get_fl_pose_detector());
  }
  public static long SwigDirector_bvh_spec_get_id_map(bvh_spec self) {
    return string_int_map.getCPtr(self.get_id_map());
  }
  public static long SwigDirector_bvh_spec_get_torso_map(bvh_spec self) {
    return string_bool_map.getCPtr(self.get_torso_map());
  }
  public static String SwigDirector_bvh_spec_get_left_anchor(bvh_spec self) {
    return self.get_left_anchor();
  }
  public static String SwigDirector_bvh_spec_get_right_anchor(bvh_spec self) {
    return self.get_right_anchor();
  }
  public static String SwigDirector_bvh_spec_get_top_anchor(bvh_spec self) {
    return self.get_top_anchor();
  }
  public static String SwigDirector_bvh_spec_get_bottom_anchor(bvh_spec self) {
    return self.get_bottom_anchor();
  }
  public static String SwigDirector_bvh_controller_bvh_str__SWIG_0(bvh_controller self, long data) {
    return self.bvh_str(new general_skeleton_vector(data, false));
  }
  public static String SwigDirector_bvh_controller_bvh_str__SWIG_1(bvh_controller self, long data, double framerate) {
    return self.bvh_str(new general_skeleton_vector(data, false), framerate);
  }
  public static String SwigDirector_bvh_controller_bvh_str__SWIG_2(bvh_controller self, long data) {
    return self.bvh_str(new SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t(data, false));
  }
  public static void SwigDirector_bvh_controller_print_bvh_file__SWIG_0(bvh_controller self, long data, String filename) {
    self.print_bvh_file(new general_skeleton_vector(data, false), filename);
  }
  public static void SwigDirector_bvh_controller_print_bvh_file__SWIG_1(bvh_controller self, long data, String filename) {
    self.print_bvh_file(new SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t(data, false), filename);
  }
  public static long SwigDirector_bvh_controller_read_bvh_str(bvh_controller self, String bvh_str, long spec) {
    return general_skeleton_vector_double_pair.getCPtr(self.read_bvh_str(bvh_str, new SWIGTYPE_p_std__shared_ptrT_mae__fl__bvh_spec_t(spec, false)));
  }
  public static long SwigDirector_bvh_controller_read_bvh_file(bvh_controller self, String filename, long spec) {
    return general_skeleton_vector_double_pair.getCPtr(self.read_bvh_file(filename, new SWIGTYPE_p_std__shared_ptrT_mae__fl__bvh_spec_t(spec, false)));
  }
  public static long SwigDirector_laban_sequence_reader_read_sequence_file(laban_sequence_reader self, String file_name) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.read_sequence_file(file_name));
  }
  public static long SwigDirector_laban_sequence_reader_read_sequence_str(laban_sequence_reader self, String xml_string) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t.getCPtr(self.read_sequence_str(xml_string));
  }
  public static boolean SwigDirector_i_symbol_equals(i_symbol self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t(a, false));
  }
  public static String SwigDirector_i_symbol_xml__SWIG_0(i_symbol self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_symbol_xml__SWIG_1(i_symbol self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_symbol_xml__SWIG_2(i_symbol self) {
    return self.xml();
  }
  public static String SwigDirector_i_symbol_svg__SWIG_0(i_symbol self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_symbol_svg__SWIG_1(i_symbol self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_i_symbol_str(i_symbol self) {
    return self.str();
  }
  public static int SwigDirector_movement_get_column(movement self) {
    return self.get_column();
  }
  public static long SwigDirector_movement_get_measure(movement self) {
    return self.get_measure();
  }
  public static double SwigDirector_movement_get_beat(movement self) {
    return self.get_beat();
  }
  public static double SwigDirector_movement_get_duration(movement self) {
    return self.get_duration();
  }
  public static boolean SwigDirector_movement_equals(movement self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static boolean SwigDirector_movement_symbol_equals(movement self, long a) {
    return self.symbol_equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static String SwigDirector_movement_xml__SWIG_0(movement self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_movement_xml__SWIG_1(movement self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_movement_xml__SWIG_2(movement self) {
    return self.xml();
  }
  public static String SwigDirector_movement_svg(movement self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static long SwigDirector_movement_recreate(movement self, long column_mapping, long measure, double beat, double duration) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.recreate(new int_int_map(column_mapping, false), measure, beat, duration));
  }
  public static String SwigDirector_movement_str(movement self) {
    return self.str();
  }
  public static int SwigDirector_path_get_column(path self) {
    return self.get_column();
  }
  public static long SwigDirector_path_get_measure(path self) {
    return self.get_measure();
  }
  public static double SwigDirector_path_get_beat(path self) {
    return self.get_beat();
  }
  public static double SwigDirector_path_get_duration(path self) {
    return self.get_duration();
  }
  public static boolean SwigDirector_path_equals(path self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static boolean SwigDirector_path_symbol_equals(path self, long a) {
    return self.symbol_equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static String SwigDirector_path_xml__SWIG_0(path self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_path_xml__SWIG_1(path self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_path_xml__SWIG_2(path self) {
    return self.xml();
  }
  public static String SwigDirector_path_svg(path self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static long SwigDirector_path_recreate(path self, long column_mapping, long measure, double beat, double duration) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.recreate(new int_int_map(column_mapping, false), measure, beat, duration));
  }
  public static String SwigDirector_path_str(path self) {
    return self.str();
  }
  public static boolean SwigDirector_i_dynamics_sign_equals(i_dynamics_sign self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t(a, false));
  }
  public static String SwigDirector_i_dynamics_sign_xml__SWIG_0(i_dynamics_sign self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_dynamics_sign_xml__SWIG_1(i_dynamics_sign self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_dynamics_sign_xml__SWIG_2(i_dynamics_sign self) {
    return self.xml();
  }
  public static String SwigDirector_relationship_endpoint_xml__SWIG_0(relationship_endpoint self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_relationship_endpoint_xml__SWIG_1(relationship_endpoint self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_relationship_endpoint_xml__SWIG_2(relationship_endpoint self) {
    return self.xml();
  }
  public static long SwigDirector_relationship_endpoint_recreate(relationship_endpoint self, long column_mapping) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__relationship_endpoint_t.getCPtr(self.recreate(new int_int_map(column_mapping, false)));
  }
  public static boolean SwigDirector_relationship_endpoint_equals(relationship_endpoint self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__relationship_endpoint_t(a, false));
  }
  public static int SwigDirector_relationship_bow_get_column(relationship_bow self) {
    return self.get_column();
  }
  public static long SwigDirector_relationship_bow_get_measure(relationship_bow self) {
    return self.get_measure();
  }
  public static double SwigDirector_relationship_bow_get_beat(relationship_bow self) {
    return self.get_beat();
  }
  public static double SwigDirector_relationship_bow_get_duration(relationship_bow self) {
    return self.get_duration();
  }
  public static boolean SwigDirector_relationship_bow_equals(relationship_bow self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static boolean SwigDirector_relationship_bow_symbol_equals(relationship_bow self, long a) {
    return self.symbol_equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static String SwigDirector_relationship_bow_xml__SWIG_0(relationship_bow self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_relationship_bow_xml__SWIG_1(relationship_bow self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_relationship_bow_xml__SWIG_2(relationship_bow self) {
    return self.xml();
  }
  public static String SwigDirector_relationship_bow_svg(relationship_bow self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static long SwigDirector_relationship_bow_recreate(relationship_bow self, long column_mapping, long measure, double beat, double duration) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.recreate(new int_int_map(column_mapping, false), measure, beat, duration));
  }
  public static String SwigDirector_relationship_bow_str(relationship_bow self) {
    return self.str();
  }
  public static boolean SwigDirector_i_degree_sign_equals(i_degree_sign self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t(a, false));
  }
  public static String SwigDirector_i_degree_sign_xml__SWIG_0(i_degree_sign self, long indent, String namesp, boolean print_type) {
    return self.xml(indent, namesp, print_type);
  }
  public static String SwigDirector_i_degree_sign_xml__SWIG_1(i_degree_sign self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_degree_sign_xml__SWIG_2(i_degree_sign self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_degree_sign_xml__SWIG_3(i_degree_sign self) {
    return self.xml();
  }
  public static String SwigDirector_i_degree_sign_svg__SWIG_0(i_degree_sign self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_degree_sign_svg__SWIG_1(i_degree_sign self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_pin_equals(pin self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t(a, false));
  }
  public static String SwigDirector_pin_xml__SWIG_0(pin self, long indent, String namesp, boolean print_type) {
    return self.xml(indent, namesp, print_type);
  }
  public static String SwigDirector_pin_xml__SWIG_1(pin self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_pin_xml__SWIG_2(pin self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_pin_xml__SWIG_3(pin self) {
    return self.xml();
  }
  public static String SwigDirector_pin_svg__SWIG_0(pin self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_pin_svg__SWIG_1(pin self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static int SwigDirector_room_direction_get_column(room_direction self) {
    return self.get_column();
  }
  public static long SwigDirector_room_direction_get_measure(room_direction self) {
    return self.get_measure();
  }
  public static double SwigDirector_room_direction_get_beat(room_direction self) {
    return self.get_beat();
  }
  public static double SwigDirector_room_direction_get_duration(room_direction self) {
    return self.get_duration();
  }
  public static boolean SwigDirector_room_direction_equals(room_direction self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static boolean SwigDirector_room_direction_symbol_equals(room_direction self, long a) {
    return self.symbol_equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t(a, false));
  }
  public static String SwigDirector_room_direction_xml__SWIG_0(room_direction self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_room_direction_xml__SWIG_1(room_direction self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_room_direction_xml__SWIG_2(room_direction self) {
    return self.xml();
  }
  public static String SwigDirector_room_direction_svg(room_direction self, long im_width, long im_height, long max_column, long measures, long beats_per_measure) {
    return self.svg(im_width, im_height, max_column, measures, beats_per_measure);
  }
  public static long SwigDirector_room_direction_recreate(room_direction self, long column_mapping, long measure, double beat, double duration) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t.getCPtr(self.recreate(new int_int_map(column_mapping, false), measure, beat, duration));
  }
  public static String SwigDirector_room_direction_str(room_direction self) {
    return self.str();
  }
  public static boolean SwigDirector_accent_sign_equals(accent_sign self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t(a, false));
  }
  public static String SwigDirector_accent_sign_xml__SWIG_0(accent_sign self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_accent_sign_xml__SWIG_1(accent_sign self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_accent_sign_xml__SWIG_2(accent_sign self) {
    return self.xml();
  }
  public static boolean SwigDirector_dynamic_sign_equals(dynamic_sign self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t(a, false));
  }
  public static String SwigDirector_dynamic_sign_xml__SWIG_0(dynamic_sign self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_dynamic_sign_xml__SWIG_1(dynamic_sign self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_dynamic_sign_xml__SWIG_2(dynamic_sign self) {
    return self.xml();
  }
  public static boolean SwigDirector_cancellation_symbol_equals(cancellation_symbol self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t(a, false));
  }
  public static String SwigDirector_cancellation_symbol_xml__SWIG_0(cancellation_symbol self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_cancellation_symbol_xml__SWIG_1(cancellation_symbol self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_cancellation_symbol_xml__SWIG_2(cancellation_symbol self) {
    return self.xml();
  }
  public static String SwigDirector_cancellation_symbol_svg__SWIG_0(cancellation_symbol self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_cancellation_symbol_svg__SWIG_1(cancellation_symbol self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_cancellation_symbol_str(cancellation_symbol self) {
    return self.str();
  }
  public static boolean SwigDirector_space_measurement_equals(space_measurement self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t(a, false));
  }
  public static String SwigDirector_space_measurement_xml__SWIG_0(space_measurement self, long indent, String namesp, boolean print_type) {
    return self.xml(indent, namesp, print_type);
  }
  public static String SwigDirector_space_measurement_xml__SWIG_1(space_measurement self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_space_measurement_xml__SWIG_2(space_measurement self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_space_measurement_xml__SWIG_3(space_measurement self) {
    return self.xml();
  }
  public static String SwigDirector_space_measurement_svg__SWIG_0(space_measurement self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_space_measurement_svg__SWIG_1(space_measurement self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_space_measurement_str(space_measurement self) {
    return self.str();
  }
  public static boolean SwigDirector_direction_symbol_equals(direction_symbol self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t(a, false));
  }
  public static String SwigDirector_direction_symbol_xml__SWIG_0(direction_symbol self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_direction_symbol_xml__SWIG_1(direction_symbol self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_direction_symbol_xml__SWIG_2(direction_symbol self) {
    return self.xml();
  }
  public static String SwigDirector_direction_symbol_svg__SWIG_0(direction_symbol self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_direction_symbol_svg__SWIG_1(direction_symbol self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_direction_symbol_str(direction_symbol self) {
    return self.str();
  }
  public static boolean SwigDirector_turn_symbol_equals(turn_symbol self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t(a, false));
  }
  public static String SwigDirector_turn_symbol_xml__SWIG_0(turn_symbol self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_turn_symbol_xml__SWIG_1(turn_symbol self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_turn_symbol_xml__SWIG_2(turn_symbol self) {
    return self.xml();
  }
  public static String SwigDirector_turn_symbol_svg__SWIG_0(turn_symbol self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_turn_symbol_svg__SWIG_1(turn_symbol self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_turn_symbol_str(turn_symbol self) {
    return self.str();
  }
  public static boolean SwigDirector_vibration_symbol_equals(vibration_symbol self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t(a, false));
  }
  public static String SwigDirector_vibration_symbol_xml__SWIG_0(vibration_symbol self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_vibration_symbol_xml__SWIG_1(vibration_symbol self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_vibration_symbol_xml__SWIG_2(vibration_symbol self) {
    return self.xml();
  }
  public static String SwigDirector_vibration_symbol_svg__SWIG_0(vibration_symbol self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_vibration_symbol_svg__SWIG_1(vibration_symbol self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static String SwigDirector_vibration_symbol_str(vibration_symbol self) {
    return self.str();
  }
  public static String SwigDirector_i_part_xml__SWIG_0(i_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_part_xml__SWIG_1(i_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_part_xml__SWIG_2(i_part self) {
    return self.xml();
  }
  public static String SwigDirector_i_part_svg__SWIG_0(i_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_part_svg__SWIG_1(i_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_i_part_equals(i_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static String SwigDirector_i_endpoint_xml__SWIG_0(i_endpoint self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_endpoint_xml__SWIG_1(i_endpoint self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_endpoint_xml__SWIG_2(i_endpoint self) {
    return self.xml();
  }
  public static String SwigDirector_i_endpoint_svg__SWIG_0(i_endpoint self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_endpoint_svg__SWIG_1(i_endpoint self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_i_endpoint_equals__SWIG_0(i_endpoint self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static long SwigDirector_i_endpoint_get_fixed_end(i_endpoint self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t.getCPtr(self.get_fixed_end());
  }
  public static boolean SwigDirector_i_endpoint_equals__SWIG_1(i_endpoint self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t(a, false));
  }
  public static String SwigDirector_area_part_xml__SWIG_0(area_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_area_part_xml__SWIG_1(area_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_area_part_xml__SWIG_2(area_part self) {
    return self.xml();
  }
  public static String SwigDirector_area_part_svg__SWIG_0(area_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_area_part_svg__SWIG_1(area_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_area_part_equals__SWIG_0(area_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static long SwigDirector_area_part_get_fixed_end(area_part self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t.getCPtr(self.get_fixed_end());
  }
  public static boolean SwigDirector_area_part_equals__SWIG_1(area_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t(a, false));
  }
  public static String SwigDirector_body_part_xml__SWIG_0(body_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_body_part_xml__SWIG_1(body_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_body_part_xml__SWIG_2(body_part self) {
    return self.xml();
  }
  public static String SwigDirector_body_part_svg__SWIG_0(body_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_body_part_svg__SWIG_1(body_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_body_part_equals(body_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t(a, false));
  }
  public static String SwigDirector_i_limb_xml__SWIG_0(i_limb self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_i_limb_xml__SWIG_1(i_limb self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_i_limb_xml__SWIG_2(i_limb self) {
    return self.xml();
  }
  public static String SwigDirector_i_limb_svg__SWIG_0(i_limb self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_i_limb_svg__SWIG_1(i_limb self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_i_limb_equals__SWIG_0(i_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static boolean SwigDirector_i_limb_equals__SWIG_1(i_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t(a, false));
  }
  public static String SwigDirector_custom_limb_xml__SWIG_0(custom_limb self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_custom_limb_xml__SWIG_1(custom_limb self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_custom_limb_xml__SWIG_2(custom_limb self) {
    return self.xml();
  }
  public static String SwigDirector_custom_limb_svg__SWIG_0(custom_limb self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_custom_limb_svg__SWIG_1(custom_limb self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_custom_limb_equals__SWIG_0(custom_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static boolean SwigDirector_custom_limb_equals__SWIG_1(custom_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t(a, false));
  }
  public static String SwigDirector_default_limb_xml__SWIG_0(default_limb self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_default_limb_xml__SWIG_1(default_limb self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_default_limb_xml__SWIG_2(default_limb self) {
    return self.xml();
  }
  public static String SwigDirector_default_limb_svg__SWIG_0(default_limb self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_default_limb_svg__SWIG_1(default_limb self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_default_limb_equals__SWIG_0(default_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static boolean SwigDirector_default_limb_equals__SWIG_1(default_limb self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t(a, false));
  }
  public static String SwigDirector_digit_part_xml__SWIG_0(digit_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_digit_part_xml__SWIG_1(digit_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_digit_part_xml__SWIG_2(digit_part self) {
    return self.xml();
  }
  public static String SwigDirector_digit_part_svg__SWIG_0(digit_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_digit_part_svg__SWIG_1(digit_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_digit_part_equals__SWIG_0(digit_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static long SwigDirector_digit_part_get_fixed_end(digit_part self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t.getCPtr(self.get_fixed_end());
  }
  public static boolean SwigDirector_digit_part_equals__SWIG_1(digit_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t(a, false));
  }
  public static String SwigDirector_surface_part_xml__SWIG_0(surface_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_surface_part_xml__SWIG_1(surface_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_surface_part_xml__SWIG_2(surface_part self) {
    return self.xml();
  }
  public static String SwigDirector_surface_part_svg__SWIG_0(surface_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_surface_part_svg__SWIG_1(surface_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_surface_part_equals(surface_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static String SwigDirector_joint_part_xml__SWIG_0(joint_part self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_joint_part_xml__SWIG_1(joint_part self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_joint_part_xml__SWIG_2(joint_part self) {
    return self.xml();
  }
  public static String SwigDirector_joint_part_svg__SWIG_0(joint_part self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_joint_part_svg__SWIG_1(joint_part self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_joint_part_equals__SWIG_0(joint_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t(a, false));
  }
  public static long SwigDirector_joint_part_get_fixed_end(joint_part self) {
    return SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t.getCPtr(self.get_fixed_end());
  }
  public static boolean SwigDirector_joint_part_equals__SWIG_1(joint_part self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t(a, false));
  }
  public static String SwigDirector_prop_xml__SWIG_0(prop self, long indent, String namesp) {
    return self.xml(indent, namesp);
  }
  public static String SwigDirector_prop_xml__SWIG_1(prop self, long indent) {
    return self.xml(indent);
  }
  public static String SwigDirector_prop_xml__SWIG_2(prop self) {
    return self.xml();
  }
  public static String SwigDirector_prop_svg__SWIG_0(prop self, String identifier, double posx, double posy, double width, double height, boolean left) {
    return self.svg(identifier, posx, posy, width, height, left);
  }
  public static String SwigDirector_prop_svg__SWIG_1(prop self, String identifier, double posx, double posy, double width, double height) {
    return self.svg(identifier, posx, posy, width, height);
  }
  public static boolean SwigDirector_prop_equals(prop self, long a) {
    return self.equals(new SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t(a, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
