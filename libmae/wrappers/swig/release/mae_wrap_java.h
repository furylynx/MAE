/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_mae_WRAP_H_
#define SWIG_mae_WRAP_H_

class SwigDirector_bone : public mae::bone, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_bone(JNIEnv *jenv);
    SwigDirector_bone(JNIEnv *jenv, int id, std::string name, int from, int to);
    SwigDirector_bone(JNIEnv *jenv, int id, std::string name, int from, int to, int middle_joint);
    SwigDirector_bone(JNIEnv *jenv, mae::e_bone eb);
    virtual ~SwigDirector_bone();
    virtual int get_id() const;
    virtual std::string get_name() const;
    virtual int get_from() const;
    virtual int get_to() const;
    virtual bool has_middle_joint() const;
    virtual int get_middle_joint() const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_general_pose : public mae::general_pose, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_general_pose(JNIEnv *jenv);
    virtual ~SwigDirector_general_pose();
    virtual void set_direction(int body_part, int direction);
    virtual int get_direction(int body_part) const;
    virtual void set_distance(int body_part, int direction, double distance);
    virtual double get_distance(int body_part, int direction) const;
    virtual void set_rotation(int body_part, double rotation);
    virtual double get_rotation(int body_part) const;
    virtual std::list< int > get_body_parts() const;
    virtual std::list< int > get_directions() const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_i_pose_listener : public mae::i_pose_listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_pose_listener(JNIEnv *jenv);
    virtual ~SwigDirector_i_pose_listener();
    virtual void on_pose(long timestamp, std::shared_ptr< mae::general_pose > pose);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_general_enriched_pose : public mae::general_enriched_pose, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_general_enriched_pose(JNIEnv *jenv);
    SwigDirector_general_enriched_pose(JNIEnv *jenv, std::shared_ptr< mae::general_pose > pose);
    virtual ~SwigDirector_general_enriched_pose();
    virtual void set_direction(int body_part, int direction);
    virtual int get_direction(int body_part) const;
    virtual void set_distance(int body_part, int direction, double distance);
    virtual double get_distance(int body_part, int direction) const;
    virtual void set_rotation(int body_part, double rotation);
    virtual double get_rotation(int body_part) const;
    virtual std::list< int > get_body_parts() const;
    virtual std::list< int > get_directions() const;
    virtual void set_key_pose(int body_part, bool is_key_pose);
    virtual bool is_key_pose(int body_part);
    virtual void set_in_motion(int body_part, bool is_in_motion);
    virtual bool is_in_motion(int body_part);
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_vec3d : public mae::math::vec3d, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_vec3d(JNIEnv *jenv);
    SwigDirector_vec3d(JNIEnv *jenv, double x, double y, double z);
    virtual ~SwigDirector_vec3d();
    virtual void set_x(double x);
    virtual double get_x() const;
    virtual void set_y(double y);
    virtual double get_y() const;
    virtual void set_z(double z);
    virtual double get_z() const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_general_joint : public mae::general_joint, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_general_joint(JNIEnv *jenv);
    SwigDirector_general_joint(JNIEnv *jenv, double x, double y, double z, double rotation = 0, double confidence = 1);
    SwigDirector_general_joint(JNIEnv *jenv, std::shared_ptr< mae::math::vec3d > pos, double rotation = 0, double confidence = 1);
    virtual ~SwigDirector_general_joint();
    virtual void set_x(double x);
    virtual double get_x() const;
    virtual void set_y(double y);
    virtual double get_y() const;
    virtual void set_z(double z);
    virtual double get_z() const;
    virtual void set_valid(bool is_valid);
    virtual bool is_valid() const;
    virtual void set_confidence(double confidence);
    virtual double get_confidence();
    virtual void set_rotation(double rotation);
    virtual double get_rotation();
    virtual std::shared_ptr< mae::math::vec3d > vec();
    virtual bool equals_val(mae::general_joint joint) const;
    virtual bool equals(std::shared_ptr< mae::general_joint > joint) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 16 ? swig_override[n] : false);
    }
protected:
    bool swig_override[16];
};

class SwigDirector_basis : public mae::math::basis, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_basis(JNIEnv *jenv);
    SwigDirector_basis(JNIEnv *jenv, std::shared_ptr< mae::math::vec3d > position_vector, std::shared_ptr< mae::math::vec3d > u, std::shared_ptr< mae::math::vec3d > r, std::shared_ptr< mae::math::vec3d > t);
    virtual ~SwigDirector_basis();
    virtual std::shared_ptr< mae::math::vec3d > get_u() const;
    virtual std::shared_ptr< mae::math::vec3d > get_r() const;
    virtual std::shared_ptr< mae::math::vec3d > get_t() const;
    virtual std::shared_ptr< mae::math::vec3d > get_position_vector() const;
    virtual void set_u(std::shared_ptr< mae::math::vec3d > u);
    virtual void set_r(std::shared_ptr< mae::math::vec3d > r);
    virtual void set_t(std::shared_ptr< mae::math::vec3d > t);
    virtual void set_position_vector(std::shared_ptr< mae::math::vec3d > position_vector);
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    bool swig_override[9];
};

class SwigDirector_general_skeleton : public mae::general_skeleton, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_general_skeleton(JNIEnv *jenv);
    SwigDirector_general_skeleton(JNIEnv *jenv, std::shared_ptr< mae::hierarchy > hierarchy);
    virtual ~SwigDirector_general_skeleton();
    virtual void set_joint(int body_part, std::shared_ptr< mae::general_joint > joint);
    virtual std::shared_ptr< mae::general_joint > get_joint(int body_part) const;
    virtual std::shared_ptr< mae::hierarchy > get_hierarchy() const;
    virtual void set_hierarchy(std::shared_ptr< mae::hierarchy > hierarchy);
    virtual void set_top_down(std::shared_ptr< mae::bone > top_down);
    virtual std::shared_ptr< mae::bone > get_top_down() const;
    virtual void set_right_left(std::shared_ptr< mae::bone > right_left);
    virtual std::shared_ptr< mae::bone > get_right_left() const;
    virtual void set_weight(std::shared_ptr< mae::math::vec3d > weight);
    virtual std::shared_ptr< mae::math::vec3d > get_weight() const;
    virtual std::string str() const;
    virtual std::string ply_str() const;
    virtual void ply_file(std::string filename) const;
public:
    bool swig_overrides(int n) {
      return (n < 13 ? swig_override[n] : false);
    }
protected:
    bool swig_override[13];
};

class SwigDirector_fl_skeleton : public mae::fl::fl_skeleton, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_skeleton(JNIEnv *jenv);
    virtual ~SwigDirector_fl_skeleton();
    virtual void set_joint(int body_part, std::shared_ptr< mae::general_joint > joint);
    virtual std::shared_ptr< mae::general_joint > get_joint(int body_part) const;
    virtual std::shared_ptr< mae::hierarchy > get_hierarchy() const;
    virtual void set_hierarchy(std::shared_ptr< mae::hierarchy > hierarchy);
    virtual void set_top_down(std::shared_ptr< mae::bone > top_down);
    virtual std::shared_ptr< mae::bone > get_top_down() const;
    virtual void set_right_left(std::shared_ptr< mae::bone > right_left);
    virtual std::shared_ptr< mae::bone > get_right_left() const;
    virtual void set_weight(std::shared_ptr< mae::math::vec3d > weight);
    virtual std::shared_ptr< mae::math::vec3d > get_weight() const;
    virtual std::string str() const;
    virtual std::string ply_str() const;
    virtual void ply_file(std::string filename) const;
    virtual void set_torso_basis(std::shared_ptr< mae::math::basis > torso_basis);
    virtual std::shared_ptr< mae::math::basis > get_torso_basis() const;
    virtual void set_orig_skeleton(std::shared_ptr< mae::general_skeleton > offset_skeleton);
    virtual std::shared_ptr< mae::general_skeleton > get_orig_skeleton() const;
public:
    bool swig_overrides(int n) {
      return (n < 17 ? swig_override[n] : false);
    }
protected:
    bool swig_override[17];
};

class SwigDirector_fl_skeleton_pose_detector : public mae::i_pose_detector< mae::fl::fl_skeleton >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_skeleton_pose_detector(JNIEnv *jenv);
    virtual ~SwigDirector_fl_skeleton_pose_detector();
    virtual std::shared_ptr< mae::general_pose > pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_fl_pose_detector : public mae::fl::fl_pose_detector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_pose_detector(JNIEnv *jenv, double hysteresis_val = fl_pose_detector::default_hysteresis_val(), bool debug = false);
    virtual ~SwigDirector_fl_pose_detector();
    virtual std::shared_ptr< mae::general_pose > pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose);
    virtual void set_hysteresis_val(double hysteresis_val);
    virtual double get_hysteresis_val() const;
    virtual std::shared_ptr< mae::general_pose > vector_pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_i_pre_sign : public mae::fl::laban::ps::i_pre_sign, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_pre_sign(JNIEnv *jenv);
    virtual ~SwigDirector_i_pre_sign();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_column_definition : public mae::fl::laban::column_definition, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_column_definition(JNIEnv *jenv, int column_index, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign);
    SwigDirector_column_definition(JNIEnv *jenv, mae::e_bone eb);
    virtual ~SwigDirector_column_definition();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::column_definition > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_i_movement : public mae::fl::laban::i_movement, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_movement(JNIEnv *jenv);
    virtual ~SwigDirector_i_movement();
    virtual int get_column() const;
    virtual unsigned int get_measure() const;
    virtual double get_beat() const;
    virtual double get_duration() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual bool symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_laban_sequence : public mae::fl::laban::laban_sequence, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence(JNIEnv *jenv);
    SwigDirector_laban_sequence(JNIEnv *jenv, std::string title, std::string author, unsigned int measures, mae::fl::laban::e_time_unit time_unit, unsigned int beat_duration, unsigned int beats);
    virtual ~SwigDirector_laban_sequence();
    virtual std::string get_version() const;
    virtual void set_authors(std::vector< std::string > authors);
    virtual void add_author(std::string author);
    virtual std::vector< std::string > get_authors() const;
    virtual void set_title(std::string title);
    virtual std::string get_title() const;
    virtual void set_description(std::string description);
    virtual std::string get_description() const;
    virtual void set_measures(unsigned int measures);
    virtual unsigned int get_measures() const;
    virtual void set_time_unit(mae::fl::laban::e_time_unit time_unit);
    virtual mae::fl::laban::e_time_unit get_time_unit() const;
    virtual void set_beat_duration(unsigned int beat_duration);
    virtual unsigned int get_beat_duration() const;
    virtual void set_beats(unsigned int beats);
    virtual unsigned int get_beats() const;
    virtual void set_column_definitions(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > col_defs);
    virtual void add_column_definition(std::shared_ptr< mae::fl::laban::column_definition > col_def);
    virtual std::vector< std::shared_ptr< mae::fl::laban::column_definition > > get_column_definitions() const;
    virtual std::shared_ptr< mae::fl::laban::column_definition > get_column_definition(int column_index);
    virtual void clear_column_definitions();
    virtual std::vector< int > get_columns() const;
    virtual void set_movements(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > movements);
    virtual std::vector< std::shared_ptr< mae::fl::laban::i_movement > > get_movements() const;
    virtual void add_movement(std::shared_ptr< mae::fl::laban::i_movement > i_mov);
    virtual std::vector< std::shared_ptr< mae::fl::laban::i_movement > > get_column_movements(int column) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > get_last_movement() const;
    virtual void clear_movements();
    virtual std::string xml(bool no_header = false, unsigned int indent = 0, std::string namesp = "laban") const;
    virtual std::string xml_namespace_header(std::string namesp = "laban") const;
    virtual std::string xml_schema_location() const;
    virtual std::string xml_namespace_uri() const;
    virtual void xml_file(std::string path) const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height) const;
    virtual void svg_file(std::string path, unsigned int im_width = 1920, unsigned int im_height = 1080) const;
    virtual std::string str() const;
    virtual std::string svg_fill_pattern(std::string pattern_name, unsigned int im_width, unsigned int im_height) const;
    virtual std::string svg_fill_patternSwigPublic(std::string pattern_name, unsigned int im_width, unsigned int im_height) const {
      return mae::fl::laban::laban_sequence::svg_fill_pattern(pattern_name,im_width,im_height);
    }
public:
    bool swig_overrides(int n) {
      return (n < 43 ? swig_override[n] : false);
    }
protected:
    bool swig_override[43];
};

class SwigDirector_i_movement_decision_maker : public mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_movement_decision_maker(JNIEnv *jenv);
    virtual ~SwigDirector_i_movement_decision_maker();
    virtual void set_recognition_tolerance(double tolerance);
    virtual double get_recognition_tolerance();
    virtual bool decide_match(std::shared_ptr< mae::fl::laban::i_movement > stream_item, std::shared_ptr< mae::fl::laban::i_movement > stream_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor);
    virtual bool decide_insertion(std::shared_ptr< mae::fl::laban::i_movement > add_item, std::shared_ptr< mae::fl::laban::i_movement > add_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor);
    virtual bool position_okay(double dist_to_last, double set_value, bool check_startpose);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_rewriting_forest : public mae::fl::laban::rewriting_forest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_rewriting_forest(JNIEnv *jenv, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double tolerance = 0.5);
    SwigDirector_rewriting_forest(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > rules, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double tolerance = 0.5);
    virtual ~SwigDirector_rewriting_forest();
    virtual double get_tolerance();
    virtual void set_tolerance(double tolerance);
    virtual std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > replacements(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence);
    virtual void add_rule(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > replacements);
    virtual void add_rule(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > rule);
    virtual std::string str();
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_i_mov_vector_vector_dec_val : public mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_mov_vector_vector_dec_val(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > value);
    SwigDirector_i_mov_vector_vector_dec_val(JNIEnv *jenv, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > value);
    virtual ~SwigDirector_i_mov_vector_vector_dec_val();
    virtual std::vector< std::shared_ptr< mae::fl::laban::i_movement > > get_sequence();
    virtual std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > get_value();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_decision_forest : public mae::fl::laban::decision_forest, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_decision_forest(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions = std::vector< std::shared_ptr< mae::fl::laban::column_definition > >(), std::vector< int > reserved_columns = mae::fl::laban::laban_sequence::default_columns(), unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double framerate = 1.0/30.0, std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > dec_maker = nullptr, std::shared_ptr< mae::fl::laban::rewriting_forest > rw = nullptr, bool cooldown = true);
    virtual ~SwigDirector_decision_forest();
    virtual void set_recognition_tolerance(double tolerance);
    virtual void set_cooldown(bool cooldown);
    virtual bool get_cooldown() const;
    virtual int get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const;
    virtual void add_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool remove_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool remove_sequence(unsigned int list_index);
    virtual void clear();
    virtual void add_rewriting_rule(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > replacements);
    virtual void add_rewriting_rule(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > rule);
    virtual std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > get_sequences() const;
    virtual std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > find_submatches(std::shared_ptr< mae::fl::laban::laban_sequence > whole_sequence, std::vector< mae::bone > body_parts);
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 13 ? swig_override[n] : false);
    }
protected:
    bool swig_override[13];
};

class SwigDirector_i_dec_maker : public mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_dec_maker(JNIEnv *jenv);
    virtual ~SwigDirector_i_dec_maker();
    virtual void set_recognition_tolerance(double tolerance);
    virtual double get_recognition_tolerance();
    virtual bool decide_match(std::shared_ptr< mae::fl::laban::i_movement > stream_item, std::shared_ptr< mae::fl::laban::i_movement > stream_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor);
    virtual bool decide_insertion(std::shared_ptr< mae::fl::laban::i_movement > add_item, std::shared_ptr< mae::fl::laban::i_movement > add_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor);
    virtual bool position_okay(double dist_to_last, double set_value, bool check_startpose);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_laban_sequence_sequence_recognizer : public mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_sequence_recognizer(JNIEnv *jenv);
    virtual ~SwigDirector_laban_sequence_sequence_recognizer();
    virtual void register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool deregister_sequence(unsigned int list_index);
    virtual void clear_registered_sequences();
    virtual int get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const;
    virtual std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > recognize_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence, std::vector< mae::bone > body_parts);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_laban_sequence_recognizer : public mae::fl::laban::laban_sequence_recognizer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_recognizer(JNIEnv *jenv, double framerate = 1.0/30.0, bool debug = false);
    SwigDirector_laban_sequence_recognizer(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double framerate = 1.0/30.0, bool debug = false);
    virtual ~SwigDirector_laban_sequence_recognizer();
    virtual void register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual bool deregister_sequence(unsigned int list_index);
    virtual void clear_registered_sequences();
    virtual int get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const;
    virtual std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > recognize_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence, std::vector< mae::bone > body_parts);
    virtual void set_recognition_tolerance(double tolerance);
    virtual std::shared_ptr< mae::fl::laban::decision_forest > get_decision_forest() const;
    virtual std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > get_registered_sequences() const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 10 ? swig_override[n] : false);
    }
protected:
    bool swig_override[10];
};

class SwigDirector_laban_sequence_sequence_generator : public mae::i_sequence_generator< mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_sequence_generator(JNIEnv *jenv);
    virtual ~SwigDirector_laban_sequence_sequence_generator();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > generate_sequence(double framerate, std::list< std::shared_ptr< mae::general_enriched_pose > > keyPoses, std::vector< mae::bone > bodyParts);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_laban_sequence_generator : public mae::fl::laban::laban_sequence_generator, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_generator(JNIEnv *jenv, bool debug = false);
    SwigDirector_laban_sequence_generator(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), bool debug = false);
    virtual ~SwigDirector_laban_sequence_generator();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > generate_sequence(double framerate, std::list< std::shared_ptr< mae::general_enriched_pose > > key_poses, std::vector< mae::bone > body_parts);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_laban_sequence_sequence_listener : public mae::i_sequence_listener< mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_sequence_listener(JNIEnv *jenv);
    virtual ~SwigDirector_laban_sequence_sequence_listener();
    virtual void on_sequence(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    bool swig_override[1];
};

class SwigDirector_laban_sequence_recognition_listener : public mae::i_recognition_listener< mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_recognition_listener(JNIEnv *jenv);
    virtual ~SwigDirector_laban_sequence_recognition_listener();
    virtual void on_recognition(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences);
    virtual void on_recognition(long timestamp, std::vector< std::string > title);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_fl_skeleton_laban_sequence_movement_detector : public mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_skeleton_laban_sequence_movement_detector(JNIEnv *jenv);
    virtual ~SwigDirector_fl_skeleton_laban_sequence_movement_detector();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > detect_movement(long timestamp, double framerate, std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts);
    virtual void set_buffer(int size);
    virtual void clear_buffer();
    virtual void add_listener(std::shared_ptr< mae::i_pose_listener > listener);
    virtual void remove_listener(std::shared_ptr< mae::i_pose_listener > listener);
    virtual void clear_listeners();
    virtual void notify_listeners(long timestamp, std::shared_ptr< mae::general_pose > pose);
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_fl_skeleton_laban_sequence_movement_controller : public mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_skeleton_laban_sequence_movement_controller(JNIEnv *jenv, std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > imd, std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > isr, std::vector< mae::bone > body_parts, int pose_buffer_size = 0, double framerate = 1.0/30.0, bool debug = false);
    SwigDirector_fl_skeleton_laban_sequence_movement_controller(JNIEnv *jenv, std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > ipd, std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > isg, std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > isr, std::vector< mae::bone > body_parts, int pose_buffer_size = 0, double framerate = 1.0/30.0, bool debug = false);
    virtual ~SwigDirector_fl_skeleton_laban_sequence_movement_controller();
    virtual void next_frame(long timestamp, std::shared_ptr< mae::fl::fl_skeleton > skeleton);
    virtual void register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void clear_registered_sequences();
    virtual void set_no_buffer_size_update(bool updates);
    virtual void clear_buffer();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > get_current_sequence();
    virtual void add_listener(std::shared_ptr< mae::i_pose_listener > pose_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_pose_listener > pose_listener);
    virtual void add_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener);
    virtual void add_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener);
    virtual void clear_listeners();
    virtual void notify_sequence_listeners(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void notify_recognition_listeners(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences);
    virtual std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > get_movement_detector();
    virtual std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > get_sequence_recognizer();
public:
    bool swig_overrides(int n) {
      return (n < 18 ? swig_override[n] : false);
    }
protected:
    bool swig_override[18];
};

class SwigDirector_fl_movement_controller : public mae::fl::fl_movement_controller, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_fl_movement_controller(JNIEnv *jenv, unsigned int pose_buffer_size = 0, double framerate = 1.0/30.0, bool debug = false);
    SwigDirector_fl_movement_controller(JNIEnv *jenv, std::vector< mae::bone > body_parts, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int pose_buffer_size = 0, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double framerate = 1.0/30.0, bool debug = false);
    SwigDirector_fl_movement_controller(JNIEnv *jenv, std::vector< mae::bone > body_parts, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, std::shared_ptr< mae::fl::laban::laban_sequence_generator > sequence_generator, unsigned int pose_buffer_size = 0, unsigned int beats_per_measure = mae::fl::laban::laban_sequence::default_beats_per_measure(), unsigned int beat_duration = mae::fl::laban::laban_sequence::default_beat_duration(), mae::fl::laban::e_time_unit time_unit = mae::fl::laban::laban_sequence::default_time_unit(), double framerate = 1.0/30.0, bool debug = false);
    virtual ~SwigDirector_fl_movement_controller();
    virtual void next_frame(long timestamp, std::shared_ptr< mae::fl::fl_skeleton > skeleton);
    virtual void register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void clear_registered_sequences();
    virtual void set_no_buffer_size_update(bool updates);
    virtual void clear_buffer();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > get_current_sequence();
    virtual void add_listener(std::shared_ptr< mae::i_pose_listener > pose_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_pose_listener > pose_listener);
    virtual void add_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener);
    virtual void add_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener);
    virtual void remove_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener);
    virtual void clear_listeners();
    virtual void notify_sequence_listeners(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence);
    virtual void notify_recognition_listeners(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences);
    virtual std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > get_movement_detector();
    virtual std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > get_sequence_recognizer();
    virtual void next_frame(long timestamp, std::shared_ptr< mae::general_skeleton > skeleton);
    virtual void set_recognition_tolerance(double tolerance);
    virtual std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > get_laban_sequence_recognizer() const;
    virtual std::shared_ptr< mae::fl::laban::laban_sequence_generator > get_laban_sequence_generator() const;
    virtual std::shared_ptr< mae::fl::fl_pose_detector > get_fl_pose_detector() const;
public:
    bool swig_overrides(int n) {
      return (n < 23 ? swig_override[n] : false);
    }
protected:
    bool swig_override[23];
};

class SwigDirector_bvh_spec : public mae::fl::bvh_spec, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_bvh_spec(JNIEnv *jenv, std::string left_anchor, std::string right_anchor, std::string top_anchor, std::string bottom_anchor, std::map< std::string,int > string_id_map, std::map< std::string,bool > string_torso_map);
    virtual ~SwigDirector_bvh_spec();
    virtual std::map< std::string,int > get_id_map() const;
    virtual std::map< std::string,bool > get_torso_map() const;
    virtual std::string get_left_anchor();
    virtual std::string get_right_anchor();
    virtual std::string get_top_anchor();
    virtual std::string get_bottom_anchor();
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_bvh_controller : public mae::fl::bvh_controller, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_bvh_controller(JNIEnv *jenv);
    virtual ~SwigDirector_bvh_controller();
    virtual std::string bvh_str(std::vector< std::shared_ptr< mae::general_skeleton > > data);
    virtual std::string bvh_str(std::vector< std::shared_ptr< mae::general_skeleton > > data, double framerate);
    virtual std::string bvh_str(std::shared_ptr< mae::general_skeleton > data);
    virtual void print_bvh_file(std::vector< std::shared_ptr< mae::general_skeleton > > data, std::string filename);
    virtual void print_bvh_file(std::shared_ptr< mae::general_skeleton > data, std::string filename);
    virtual std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > read_bvh_str(std::string bvh_str, std::shared_ptr< mae::fl::bvh_spec > spec);
    virtual std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > read_bvh_file(std::string filename, std::shared_ptr< mae::fl::bvh_spec > spec);
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_laban_sequence_reader : public mae::fl::laban::laban_sequence_reader, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_laban_sequence_reader(JNIEnv *jenv);
    virtual ~SwigDirector_laban_sequence_reader();
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > read_sequence_file(std::string file_name);
    virtual std::shared_ptr< mae::fl::laban::laban_sequence > read_sequence_str(std::string xml_string);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_i_symbol : public mae::fl::laban::mv::i_symbol, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_symbol(JNIEnv *jenv);
    virtual ~SwigDirector_i_symbol();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_movement : public mae::fl::laban::movement, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_movement(JNIEnv *jenv, int column, unsigned int measure, double beat, double duration, std::shared_ptr< mae::fl::laban::mv::i_symbol > symbol, bool hold = false, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign = nullptr);
    virtual ~SwigDirector_movement();
    virtual int get_column() const;
    virtual unsigned int get_measure() const;
    virtual double get_beat() const;
    virtual double get_duration() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual bool symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_path : public mae::fl::laban::path, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_path(JNIEnv *jenv, mae::fl::laban::e_path_type type, unsigned int measure, double beat, double duration);
    virtual ~SwigDirector_path();
    virtual int get_column() const;
    virtual unsigned int get_measure() const;
    virtual double get_beat() const;
    virtual double get_duration() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual bool symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_i_dynamics_sign : public mae::fl::laban::mv::i_dynamics_sign, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_dynamics_sign(JNIEnv *jenv);
    virtual ~SwigDirector_i_dynamics_sign();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_relationship_endpoint : public mae::fl::laban::mv::relationship_endpoint, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_relationship_endpoint(JNIEnv *jenv, int column, bool active, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign = nullptr, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics = nullptr);
    virtual ~SwigDirector_relationship_endpoint();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > recreate(std::map< int,int > column_mapping) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_relationship_bow : public mae::fl::laban::relationship_bow, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_relationship_bow(JNIEnv *jenv, mae::fl::laban::e_relationship_type type, bool grasping, bool passing, bool hold, unsigned int measure, double beat, std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > left_endpoint, std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > right_endpoint);
    virtual ~SwigDirector_relationship_bow();
    virtual int get_column() const;
    virtual unsigned int get_measure() const;
    virtual double get_beat() const;
    virtual double get_duration() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual bool symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_i_degree_sign : public mae::fl::laban::mv::i_degree_sign, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_degree_sign(JNIEnv *jenv);
    virtual ~SwigDirector_i_degree_sign();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "", bool print_type = false) const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_pin : public mae::fl::laban::mv::pin, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_pin(JNIEnv *jenv, mae::fl::laban::mv::e_level level, int horizontal);
    virtual ~SwigDirector_pin();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "", bool print_type = false) const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_room_direction : public mae::fl::laban::room_direction, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_room_direction(JNIEnv *jenv, unsigned int measure, double beat, std::shared_ptr< mae::fl::laban::mv::pin > direction);
    virtual ~SwigDirector_room_direction();
    virtual int get_column() const;
    virtual unsigned int get_measure() const;
    virtual double get_beat() const;
    virtual double get_duration() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual bool symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const;
    virtual std::shared_ptr< mae::fl::laban::i_movement > recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 12 ? swig_override[n] : false);
    }
protected:
    bool swig_override[12];
};

class SwigDirector_accent_sign : public mae::fl::laban::mv::accent_sign, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_accent_sign(JNIEnv *jenv, unsigned int accent);
    virtual ~SwigDirector_accent_sign();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_dynamic_sign : public mae::fl::laban::mv::dynamic_sign, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_dynamic_sign(JNIEnv *jenv, mae::fl::laban::mv::e_dynamic dynamic);
    virtual ~SwigDirector_dynamic_sign();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};

class SwigDirector_cancellation_symbol : public mae::fl::laban::mv::cancellation_symbol, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_cancellation_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_cancel cancel);
    virtual ~SwigDirector_cancellation_symbol();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_space_measurement : public mae::fl::laban::mv::space_measurement, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_space_measurement(JNIEnv *jenv, mae::fl::laban::mv::e_space type, unsigned int degree, mae::fl::laban::mv::e_space_direction direction = mae::fl::laban::mv::e_space_direction::NONE_SPACE_DIRECTION);
    virtual ~SwigDirector_space_measurement();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "", bool print_type = false) const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_direction_symbol : public mae::fl::laban::mv::direction_symbol, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_direction_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_level vertical, mae::fl::laban::mv::e_direction horizontal, std::shared_ptr< mae::fl::laban::mv::pin > modification_pin = nullptr, std::shared_ptr< mae::fl::laban::mv::pin > relationship_pin = nullptr, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics = nullptr, std::shared_ptr< mae::fl::laban::mv::space_measurement > space_measurement = nullptr, mae::fl::laban::mv::e_contact_hook contact_hook = mae::fl::laban::mv::e_contact_hook::NONE_CONTACT_HOOK);
    virtual ~SwigDirector_direction_symbol();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_turn_symbol : public mae::fl::laban::mv::turn_symbol, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_turn_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_turn_direction direction, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics = nullptr, std::shared_ptr< mae::fl::laban::mv::i_degree_sign > degree = nullptr);
    virtual ~SwigDirector_turn_symbol();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_vibration_symbol : public mae::fl::laban::mv::vibration_symbol, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_vibration_symbol(JNIEnv *jenv, std::shared_ptr< mae::fl::laban::mv::pin > displacement1, std::shared_ptr< mae::fl::laban::mv::pin > displacement2, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics = nullptr);
    virtual ~SwigDirector_vibration_symbol();
    virtual bool equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const;
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual std::string str() const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_i_part : public mae::fl::laban::ps::i_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_part(JNIEnv *jenv);
    virtual ~SwigDirector_i_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_i_endpoint : public mae::fl::laban::ps::i_endpoint, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_endpoint(JNIEnv *jenv);
    virtual ~SwigDirector_i_endpoint();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual std::shared_ptr< mae::fl::laban::ps::i_endpoint > get_fixed_end() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_area_part : public mae::fl::laban::ps::area_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_area_part(JNIEnv *jenv, mae::fl::laban::ps::e_area area);
    virtual ~SwigDirector_area_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual std::shared_ptr< mae::fl::laban::ps::i_endpoint > get_fixed_end() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_body_part : public mae::fl::laban::ps::body_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_body_part(JNIEnv *jenv, mae::fl::laban::ps::e_side side, std::shared_ptr< mae::fl::laban::ps::i_part > part);
    virtual ~SwigDirector_body_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_i_limb : public mae::fl::laban::ps::i_limb, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_i_limb(JNIEnv *jenv);
    virtual ~SwigDirector_i_limb();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_custom_limb : public mae::fl::laban::ps::custom_limb, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_custom_limb(JNIEnv *jenv, std::shared_ptr< mae::fl::laban::ps::i_endpoint > extremity, std::shared_ptr< mae::fl::laban::ps::i_endpoint > fixed_end = nullptr);
    virtual ~SwigDirector_custom_limb();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_default_limb : public mae::fl::laban::ps::default_limb, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_default_limb(JNIEnv *jenv, mae::fl::laban::ps::e_limb limb);
    virtual ~SwigDirector_default_limb();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_digit_part : public mae::fl::laban::ps::digit_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_digit_part(JNIEnv *jenv, mae::fl::laban::ps::e_digit digit, unsigned int knuckle);
    virtual ~SwigDirector_digit_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual std::shared_ptr< mae::fl::laban::ps::i_endpoint > get_fixed_end() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_surface_part : public mae::fl::laban::ps::surface_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_surface_part(JNIEnv *jenv, mae::fl::laban::ps::e_limb_side lside, std::shared_ptr< mae::fl::laban::ps::i_limb > limb);
    virtual ~SwigDirector_surface_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};

class SwigDirector_joint_part : public mae::fl::laban::ps::joint_part, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_joint_part(JNIEnv *jenv, mae::fl::laban::ps::e_joint joint);
    virtual ~SwigDirector_joint_part();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const;
    virtual std::shared_ptr< mae::fl::laban::ps::i_endpoint > get_fixed_end() const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 8 ? swig_override[n] : false);
    }
protected:
    bool swig_override[8];
};

class SwigDirector_prop : public mae::fl::laban::ps::prop, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_prop(JNIEnv *jenv, std::string name, std::string description = "");
    virtual ~SwigDirector_prop();
    virtual std::string xml(unsigned int indent = 0, std::string namesp = "") const;
    virtual std::string svg(std::string identifier, double posx, double posy, double width, double height, bool left = false) const;
    virtual bool equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const;
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    bool swig_override[6];
};


#endif
