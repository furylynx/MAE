/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}

namespace Swig {
  namespace {
    jclass jclass_maeJNI = NULL;
    jmethodID director_methids[474];
  }
}




#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


 	#include "../../../src/mae/e_bone.hpp"

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum mae::e_bone >::const_reference std_vector_Sl_mae_e_bone_Sg__get(std::vector< mae::e_bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_e_bone_Sg__set(std::vector< mae::e_bone > *self,int i,std::vector< enum mae::e_bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< mae::bone >::const_reference std_vector_Sl_mae_bone_Sg__get(std::vector< mae::bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_bone_Sg__set(std::vector< mae::bone > *self,int i,std::vector< mae::bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/i_sequence_listener.hpp"


	#include "../../../src/mae/i_recognition_listener.hpp"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"

SWIGINTERN std::list< int >::const_reference std_list_Sl_int_Sg__get(std::list< int > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<int>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/i_pose_listener.hpp"


	#include "../../../src/mae/i_movement_detector.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/i_pose_detector.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"

SWIGINTERN std::list< std::shared_ptr< mae::general_enriched_pose > >::const_reference std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(std::list< std::shared_ptr< mae::general_enriched_pose > > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<std::shared_ptr< mae::general_enriched_pose >>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/movement_controller.hpp"


	#include "../../../src/mae/hierarchy.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::hierarchy_element > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i,std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/hierarchy_element.hpp"


	#include "../../../src/mae/math/vec3d.hpp"


	#include "../../../src/mae/general_joint.hpp"


	#include "../../../src/mae/math/basis.hpp"


	#include "../../../src/mae/general_skeleton.hpp"


	#include "../../../src/mae/fl/fl_skeleton.hpp"


	#include "../../../src/mae/fl/fl_pose_detector.hpp"


 	#include "../../../src/mae/e_bone.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/column_definition.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <map>
#include <algorithm>
#include <stdexcept>


	#include "../../../src/mae/fl/laban/i_movement.hpp"

SWIGINTERN int const &std_map_Sl_int_Sc_int_Sg__get(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__set(std::map< int,int > *self,int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__del(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__has_key(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/laban/e_time_unit.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_time_unit >::const_reference std_vector_Sl_mae_fl_laban_e_time_unit_Sg__get(std::vector< mae::fl::laban::e_time_unit > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_time_unit_Sg__set(std::vector< mae::fl::laban::e_time_unit > *self,int i,std::vector< enum mae::fl::laban::e_time_unit >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/fl/laban/i_decision_maker.hpp"


	#include "../../../src/mae/fl/laban/decision_value.hpp"


	#include "../../../src/mae/fl/laban/rewriting_forest.hpp"

SWIGINTERN std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::const_reference std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <list>
#include <stdexcept>


	#include "../../../src/mae/fl/laban/decision_forest.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::const_reference std_list_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<std::shared_ptr< mae::fl::laban::laban_sequence >>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence_recognizer.hpp"


#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence_generator.hpp"


	#include "../../../src/mae/fl/fl_movement_controller.hpp"


	#include "../../../src/mae/fl/bvh_spec.hpp"

SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN bool const &std_map_Sl_std_string_Sc_bool_Sg__get(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__set(std::map< std::string,bool > *self,std::string const &key,bool const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__del(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg__has_key(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                return i != self->end();
            }

#include <utility>


	#include "../../../src/mae/fl/bvh_controller.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::general_skeleton > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i,std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence_reader.hpp"


	#include "../../../src/mae/fl/laban/mv/i_symbol.hpp"


	#include "../../../src/mae/fl/laban/movement.hpp"


	#include "../../../src/mae/fl/laban/e_path_type.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_path_type >::const_reference std_vector_Sl_mae_fl_laban_e_path_type_Sg__get(std::vector< mae::fl::laban::e_path_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_path_type_Sg__set(std::vector< mae::fl::laban::e_path_type > *self,int i,std::vector< enum mae::fl::laban::e_path_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/path.hpp"


	#include "../../../src/mae/fl/laban/e_relationship_type.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_relationship_type >::const_reference std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__get(std::vector< mae::fl::laban::e_relationship_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__set(std::vector< mae::fl::laban::e_relationship_type > *self,int i,std::vector< enum mae::fl::laban::e_relationship_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/i_dynamics_sign.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/relationship_endpoint.hpp"


	#include "../../../src/mae/fl/laban/relationship_bow.hpp"


	#include "../../../src/mae/fl/laban/mv/i_degree_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_level.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_level >::const_reference std_vector_Sl_mae_fl_laban_mv_e_level_Sg__get(std::vector< mae::fl::laban::mv::e_level > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_level_Sg__set(std::vector< mae::fl::laban::mv::e_level > *self,int i,std::vector< enum mae::fl::laban::mv::e_level >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/pin.hpp"


	#include "../../../src/mae/fl/laban/room_direction.hpp"


	#include "../../../src/mae/fl/laban/mv/accent_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_dynamic.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_dynamic >::const_reference std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__get(std::vector< mae::fl::laban::mv::e_dynamic > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__set(std::vector< mae::fl::laban::mv::e_dynamic > *self,int i,std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/dynamic_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_cancel.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_cancel >::const_reference std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__get(std::vector< mae::fl::laban::mv::e_cancel > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__set(std::vector< mae::fl::laban::mv::e_cancel > *self,int i,std::vector< enum mae::fl::laban::mv::e_cancel >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/cancellation_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/e_space.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_space >::const_reference std_vector_Sl_mae_fl_laban_mv_e_space_Sg__get(std::vector< mae::fl::laban::mv::e_space > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_space_Sg__set(std::vector< mae::fl::laban::mv::e_space > *self,int i,std::vector< enum mae::fl::laban::mv::e_space >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/e_space_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_space_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__get(std::vector< mae::fl::laban::mv::e_space_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__set(std::vector< mae::fl::laban::mv::e_space_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/space_measurement.hpp"


	#include "../../../src/mae/fl/laban/mv/e_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__get(std::vector< mae::fl::laban::mv::e_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__set(std::vector< mae::fl::laban::mv::e_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/e_contact_hook.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_contact_hook >::const_reference std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__get(std::vector< mae::fl::laban::mv::e_contact_hook > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__set(std::vector< mae::fl::laban::mv::e_contact_hook > *self,int i,std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/direction_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/e_turn_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_turn_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__get(std::vector< mae::fl::laban::mv::e_turn_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__set(std::vector< mae::fl::laban::mv::e_turn_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/turn_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/vibration_symbol.hpp"


	#include "../../../src/mae/fl/laban/ps/i_part.hpp"


	#include "../../../src/mae/fl/laban/ps/i_endpoint.hpp"


	#include "../../../src/mae/fl/laban/ps/e_area.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_area >::const_reference std_vector_Sl_mae_fl_laban_ps_e_area_Sg__get(std::vector< mae::fl::laban::ps::e_area > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_area_Sg__set(std::vector< mae::fl::laban::ps::e_area > *self,int i,std::vector< enum mae::fl::laban::ps::e_area >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/area_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_side.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_side >::const_reference std_vector_Sl_mae_fl_laban_ps_e_side_Sg__get(std::vector< mae::fl::laban::ps::e_side > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_side_Sg__set(std::vector< mae::fl::laban::ps::e_side > *self,int i,std::vector< enum mae::fl::laban::ps::e_side >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/body_part.hpp"


	#include "../../../src/mae/fl/laban/ps/i_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/custom_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/e_limb.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_limb >::const_reference std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__get(std::vector< mae::fl::laban::ps::e_limb > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__set(std::vector< mae::fl::laban::ps::e_limb > *self,int i,std::vector< enum mae::fl::laban::ps::e_limb >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/default_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/e_digit.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_digit >::const_reference std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__get(std::vector< mae::fl::laban::ps::e_digit > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__set(std::vector< mae::fl::laban::ps::e_digit > *self,int i,std::vector< enum mae::fl::laban::ps::e_digit >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/digit_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_limb_side.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_limb_side >::const_reference std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__get(std::vector< mae::fl::laban::ps::e_limb_side > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__set(std::vector< mae::fl::laban::ps::e_limb_side > *self,int i,std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/surface_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_joint.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_joint >::const_reference std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__get(std::vector< mae::fl::laban::ps::e_joint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__set(std::vector< mae::fl::laban::ps::e_joint > *self,int i,std::vector< enum mae::fl::laban::ps::e_joint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/joint_part.hpp"


	#include "../../../src/mae/fl/laban/ps/prop.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "mae_wrap_java.h"

SwigDirector_bone::SwigDirector_bone(JNIEnv *jenv) : mae::bone(), Swig::Director(jenv) {
}

SwigDirector_bone::SwigDirector_bone(JNIEnv *jenv, int id, std::string name, int from, int to) : mae::bone(id, name, from, to), Swig::Director(jenv) {
}

SwigDirector_bone::SwigDirector_bone(JNIEnv *jenv, int id, std::string name, int from, int to, int middle_joint) : mae::bone(id, name, from, to, middle_joint), Swig::Director(jenv) {
}

SwigDirector_bone::SwigDirector_bone(JNIEnv *jenv, mae::e_bone eb) : mae::bone(eb), Swig::Director(jenv) {
}

SwigDirector_bone::~SwigDirector_bone() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_bone::get_id() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::bone::get_id();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::get_id ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bone::get_name() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::bone::get_name();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::get_name ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_bone::get_from() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::bone::get_from();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::get_from ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_bone::get_to() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::bone::get_to();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[3], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::get_to ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_bone::has_middle_joint() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return mae::bone::has_middle_joint();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::has_middle_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_bone::get_middle_joint() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::bone::get_middle_joint();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::bone::get_middle_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_bone::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_id", "()I", NULL 
    },
    {
      "get_name", "()Ljava/lang/String;", NULL 
    },
    {
      "get_from", "()I", NULL 
    },
    {
      "get_to", "()I", NULL 
    },
    {
      "has_middle_joint", "()Z", NULL 
    },
    {
      "get_middle_joint", "()I", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/bone");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_general_pose::SwigDirector_general_pose(JNIEnv *jenv) : mae::general_pose(), Swig::Director(jenv) {
}

SwigDirector_general_pose::~SwigDirector_general_pose() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_general_pose::set_direction(int body_part, int direction) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  
  if (!swig_override[0]) {
    mae::general_pose::set_direction(body_part,direction);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[6], swigjobj, jbody_part, jdirection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::set_direction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_general_pose::get_direction(int body_part) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[1]) {
    return mae::general_pose::get_direction(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[7], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::get_direction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_pose::set_distance(int body_part, int direction, double distance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  jdouble jdistance  ;
  
  if (!swig_override[2]) {
    mae::general_pose::set_distance(body_part,direction,distance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jdistance = (jdouble) distance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[8], swigjobj, jbody_part, jdirection, jdistance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::set_distance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_pose::get_distance(int body_part, int direction) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  
  if (!swig_override[3]) {
    return mae::general_pose::get_distance(body_part,direction);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[9], swigjobj, jbody_part, jdirection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::get_distance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_pose::set_rotation(int body_part, double rotation) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jdouble jrotation  ;
  
  if (!swig_override[4]) {
    mae::general_pose::set_rotation(body_part,rotation);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jrotation = (jdouble) rotation;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[10], swigjobj, jbody_part, jrotation);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::set_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_pose::get_rotation(int body_part) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[5]) {
    return mae::general_pose::get_rotation(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[11], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::get_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< int > SwigDirector_general_pose::get_body_parts() const {
  std::list< int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< int > *argp ;
  
  if (!swig_override[6]) {
    return mae::general_pose::get_body_parts();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[12], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::get_body_parts ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< int > SwigDirector_general_pose::get_directions() const {
  std::list< int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< int > *argp ;
  
  if (!swig_override[7]) {
    return mae::general_pose::get_directions();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[13], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_pose::get_directions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_pose::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_direction", "(II)V", NULL 
    },
    {
      "get_direction", "(I)I", NULL 
    },
    {
      "set_distance", "(IID)V", NULL 
    },
    {
      "get_distance", "(II)D", NULL 
    },
    {
      "set_rotation", "(ID)V", NULL 
    },
    {
      "get_rotation", "(I)D", NULL 
    },
    {
      "get_body_parts", "()Lmaejava/int_list;", NULL 
    },
    {
      "get_directions", "()Lmaejava/int_list;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/general_pose");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_pose_listener::SwigDirector_i_pose_listener(JNIEnv *jenv) : mae::i_pose_listener(), Swig::Director(jenv) {
}

SwigDirector_i_pose_listener::~SwigDirector_i_pose_listener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_i_pose_listener::on_pose(long timestamp, std::shared_ptr< mae::general_pose > pose) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jpose  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_pose_listener::on_pose.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jpose = 0;
    *((std::shared_ptr< mae::general_pose > **)&jpose) = &pose; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[14], swigjobj, jtimestamp, jpose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_pose_listener::on_pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_i_pose_listener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "on_pose", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_pose_listener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_general_enriched_pose::SwigDirector_general_enriched_pose(JNIEnv *jenv) : mae::general_enriched_pose(), Swig::Director(jenv) {
}

SwigDirector_general_enriched_pose::SwigDirector_general_enriched_pose(JNIEnv *jenv, std::shared_ptr< mae::general_pose > pose) : mae::general_enriched_pose(pose), Swig::Director(jenv) {
}

SwigDirector_general_enriched_pose::~SwigDirector_general_enriched_pose() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_general_enriched_pose::set_direction(int body_part, int direction) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  
  if (!swig_override[0]) {
    mae::general_pose::set_direction(body_part,direction);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[15], swigjobj, jbody_part, jdirection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::set_direction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_general_enriched_pose::get_direction(int body_part) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[1]) {
    return mae::general_pose::get_direction(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[16], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::get_direction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_enriched_pose::set_distance(int body_part, int direction, double distance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  jdouble jdistance  ;
  
  if (!swig_override[2]) {
    mae::general_pose::set_distance(body_part,direction,distance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jdistance = (jdouble) distance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[17], swigjobj, jbody_part, jdirection, jdistance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::set_distance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_enriched_pose::get_distance(int body_part, int direction) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jint jdirection  ;
  
  if (!swig_override[3]) {
    return mae::general_pose::get_distance(body_part,direction);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jdirection = (jint) direction;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[18], swigjobj, jbody_part, jdirection);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::get_distance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_enriched_pose::set_rotation(int body_part, double rotation) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jdouble jrotation  ;
  
  if (!swig_override[4]) {
    mae::general_pose::set_rotation(body_part,rotation);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jrotation = (jdouble) rotation;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[19], swigjobj, jbody_part, jrotation);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::set_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_enriched_pose::get_rotation(int body_part) const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[5]) {
    return mae::general_pose::get_rotation(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[20], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::get_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< int > SwigDirector_general_enriched_pose::get_body_parts() const {
  std::list< int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< int > *argp ;
  
  if (!swig_override[6]) {
    return mae::general_pose::get_body_parts();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[21], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::get_body_parts ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< int > SwigDirector_general_enriched_pose::get_directions() const {
  std::list< int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< int > *argp ;
  
  if (!swig_override[7]) {
    return mae::general_pose::get_directions();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::get_directions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_enriched_pose::set_key_pose(int body_part, bool is_key_pose) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jboolean jis_key_pose  ;
  
  if (!swig_override[8]) {
    mae::general_enriched_pose::set_key_pose(body_part,is_key_pose);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jis_key_pose = (jboolean) is_key_pose;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[23], swigjobj, jbody_part, jis_key_pose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::set_key_pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_general_enriched_pose::is_key_pose(int body_part) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[9]) {
    return mae::general_enriched_pose::is_key_pose(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[24], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::is_key_pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_enriched_pose::set_in_motion(int body_part, bool is_in_motion) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jboolean jis_in_motion  ;
  
  if (!swig_override[10]) {
    mae::general_enriched_pose::set_in_motion(body_part,is_in_motion);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jis_in_motion = (jboolean) is_in_motion;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[25], swigjobj, jbody_part, jis_in_motion);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::set_in_motion ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_general_enriched_pose::is_in_motion(int body_part) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  
  if (!swig_override[11]) {
    return mae::general_enriched_pose::is_in_motion(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[26], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_enriched_pose::is_in_motion ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_enriched_pose::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_direction", "(II)V", NULL 
    },
    {
      "get_direction", "(I)I", NULL 
    },
    {
      "set_distance", "(IID)V", NULL 
    },
    {
      "get_distance", "(II)D", NULL 
    },
    {
      "set_rotation", "(ID)V", NULL 
    },
    {
      "get_rotation", "(I)D", NULL 
    },
    {
      "get_body_parts", "()Lmaejava/int_list;", NULL 
    },
    {
      "get_directions", "()Lmaejava/int_list;", NULL 
    },
    {
      "set_key_pose", "(IZ)V", NULL 
    },
    {
      "is_key_pose", "(I)Z", NULL 
    },
    {
      "set_in_motion", "(IZ)V", NULL 
    },
    {
      "is_in_motion", "(I)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/general_enriched_pose");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_vec3d::SwigDirector_vec3d(JNIEnv *jenv) : mae::math::vec3d(), Swig::Director(jenv) {
}

SwigDirector_vec3d::SwigDirector_vec3d(JNIEnv *jenv, double x, double y, double z) : mae::math::vec3d(x, y, z), Swig::Director(jenv) {
}

SwigDirector_vec3d::~SwigDirector_vec3d() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_vec3d::set_x(double x) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jx  ;
  
  if (!swig_override[0]) {
    mae::math::vec3d::set_x(x);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jdouble) x;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[27], swigjobj, jx);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::set_x ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_vec3d::get_x() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::math::vec3d::get_x();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[28], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::get_x ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_vec3d::set_y(double y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jy  ;
  
  if (!swig_override[2]) {
    mae::math::vec3d::set_y(y);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jy = (jdouble) y;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[29], swigjobj, jy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::set_y ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_vec3d::get_y() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::math::vec3d::get_y();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[30], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::get_y ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_vec3d::set_z(double z) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jz  ;
  
  if (!swig_override[4]) {
    mae::math::vec3d::set_z(z);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jz = (jdouble) z;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[31], swigjobj, jz);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::set_z ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_vec3d::get_z() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::math::vec3d::get_z();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[32], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::get_z ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_vec3d::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return mae::math::vec3d::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[33], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::vec3d::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_vec3d::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_x", "(D)V", NULL 
    },
    {
      "get_x", "()D", NULL 
    },
    {
      "set_y", "(D)V", NULL 
    },
    {
      "get_y", "()D", NULL 
    },
    {
      "set_z", "(D)V", NULL 
    },
    {
      "get_z", "()D", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/vec3d");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_general_joint::SwigDirector_general_joint(JNIEnv *jenv) : mae::general_joint(), Swig::Director(jenv) {
}

SwigDirector_general_joint::SwigDirector_general_joint(JNIEnv *jenv, double x, double y, double z, double rotation, double confidence) : mae::general_joint(x, y, z, rotation, confidence), Swig::Director(jenv) {
}

SwigDirector_general_joint::SwigDirector_general_joint(JNIEnv *jenv, std::shared_ptr< mae::math::vec3d > pos, double rotation, double confidence) : mae::general_joint(pos, rotation, confidence), Swig::Director(jenv) {
}

SwigDirector_general_joint::~SwigDirector_general_joint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_general_joint::set_x(double x) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jx  ;
  
  if (!swig_override[0]) {
    mae::general_joint::set_x(x);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jdouble) x;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[34], swigjobj, jx);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_x ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_joint::get_x() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::general_joint::get_x();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[35], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::get_x ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::set_y(double y) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jy  ;
  
  if (!swig_override[2]) {
    mae::general_joint::set_y(y);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jy = (jdouble) y;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[36], swigjobj, jy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_y ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_joint::get_y() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::general_joint::get_y();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[37], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::get_y ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::set_z(double z) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jz  ;
  
  if (!swig_override[4]) {
    mae::general_joint::set_z(z);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jz = (jdouble) z;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[38], swigjobj, jz);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_z ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_joint::get_z() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::general_joint::get_z();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[39], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::get_z ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::set_valid(bool is_valid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jis_valid  ;
  
  if (!swig_override[6]) {
    mae::general_joint::set_valid(is_valid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jis_valid = (jboolean) is_valid;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[40], swigjobj, jis_valid);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_valid ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_general_joint::is_valid() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return mae::general_joint::is_valid();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[41], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::is_valid ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::set_confidence(double confidence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jconfidence  ;
  
  if (!swig_override[8]) {
    mae::general_joint::set_confidence(confidence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconfidence = (jdouble) confidence;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[42], swigjobj, jconfidence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_confidence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_joint::get_confidence() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return mae::general_joint::get_confidence();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::get_confidence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::set_rotation(double rotation) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jrotation  ;
  
  if (!swig_override[10]) {
    mae::general_joint::set_rotation(rotation);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrotation = (jdouble) rotation;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[44], swigjobj, jrotation);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::set_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_general_joint::get_rotation() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::general_joint::get_rotation();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[45], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::get_rotation ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::math::vec3d > SwigDirector_general_joint::vec() {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[12]) {
    return mae::general_joint::vec();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[46], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::vec ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_general_joint::equals_val(mae::general_joint joint) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jjoint  ;
  
  if (!swig_override[13]) {
    return mae::general_joint::equals_val(joint);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jjoint = 0;
    *((mae::general_joint **)&jjoint) = &joint; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[47], swigjobj, jjoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::equals_val ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_general_joint::equals(std::shared_ptr< mae::general_joint > joint) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jjoint  ;
  
  if (!swig_override[14]) {
    return mae::general_joint::equals(joint);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jjoint = 0;
    *((std::shared_ptr< mae::general_joint > **)&jjoint) = &joint; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[48], swigjobj, jjoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_general_joint::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    return mae::general_joint::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[49], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_joint::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_joint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_x", "(D)V", NULL 
    },
    {
      "get_x", "()D", NULL 
    },
    {
      "set_y", "(D)V", NULL 
    },
    {
      "get_y", "()D", NULL 
    },
    {
      "set_z", "(D)V", NULL 
    },
    {
      "get_z", "()D", NULL 
    },
    {
      "set_valid", "(Z)V", NULL 
    },
    {
      "is_valid", "()Z", NULL 
    },
    {
      "set_confidence", "(D)V", NULL 
    },
    {
      "get_confidence", "()D", NULL 
    },
    {
      "set_rotation", "(D)V", NULL 
    },
    {
      "get_rotation", "()D", NULL 
    },
    {
      "vec", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "equals_val", "(Lmaejava/general_joint;)Z", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t;)Z", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/general_joint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 16; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_basis::SwigDirector_basis(JNIEnv *jenv) : mae::math::basis(), Swig::Director(jenv) {
}

SwigDirector_basis::SwigDirector_basis(JNIEnv *jenv, std::shared_ptr< mae::math::vec3d > position_vector, std::shared_ptr< mae::math::vec3d > u, std::shared_ptr< mae::math::vec3d > r, std::shared_ptr< mae::math::vec3d > t) : mae::math::basis(position_vector, u, r, t), Swig::Director(jenv) {
}

SwigDirector_basis::~SwigDirector_basis() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::math::vec3d > SwigDirector_basis::get_u() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[0]) {
    return mae::math::basis::get_u();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[50], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::get_u ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::math::vec3d > SwigDirector_basis::get_r() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[1]) {
    return mae::math::basis::get_r();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[51], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::get_r ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::math::vec3d > SwigDirector_basis::get_t() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[2]) {
    return mae::math::basis::get_t();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[52], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::get_t ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::math::vec3d > SwigDirector_basis::get_position_vector() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[3]) {
    return mae::math::basis::get_position_vector();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[53], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::get_position_vector ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_basis::set_u(std::shared_ptr< mae::math::vec3d > u) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ju  ;
  
  if (!swig_override[4]) {
    mae::math::basis::set_u(u);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ju = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&ju) = &u; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[54], swigjobj, ju);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::set_u ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_basis::set_r(std::shared_ptr< mae::math::vec3d > r) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jr  ;
  
  if (!swig_override[5]) {
    mae::math::basis::set_r(r);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jr = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&jr) = &r; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[55], swigjobj, jr);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::set_r ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_basis::set_t(std::shared_ptr< mae::math::vec3d > t) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jt  ;
  
  if (!swig_override[6]) {
    mae::math::basis::set_t(t);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jt = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&jt) = &t; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[56], swigjobj, jt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::set_t ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_basis::set_position_vector(std::shared_ptr< mae::math::vec3d > position_vector) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jposition_vector  ;
  
  if (!swig_override[7]) {
    mae::math::basis::set_position_vector(position_vector);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jposition_vector = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&jposition_vector) = &position_vector; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[57], swigjobj, jposition_vector);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::set_position_vector ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_basis::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    return mae::math::basis::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[58], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::math::basis::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_basis::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_u", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "get_r", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "get_t", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "get_position_vector", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "set_u", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "set_r", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "set_t", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "set_position_vector", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/basis");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_general_skeleton::SwigDirector_general_skeleton(JNIEnv *jenv) : mae::general_skeleton(), Swig::Director(jenv) {
}

SwigDirector_general_skeleton::SwigDirector_general_skeleton(JNIEnv *jenv, std::shared_ptr< mae::hierarchy > hierarchy) : mae::general_skeleton(hierarchy), Swig::Director(jenv) {
}

SwigDirector_general_skeleton::~SwigDirector_general_skeleton() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_general_skeleton::set_joint(int body_part, std::shared_ptr< mae::general_joint > joint) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jlong jjoint  ;
  
  if (!swig_override[0]) {
    mae::general_skeleton::set_joint(body_part,joint);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jjoint = 0;
    *((std::shared_ptr< mae::general_joint > **)&jjoint) = &joint; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[59], swigjobj, jbody_part, jjoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::set_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::general_joint > SwigDirector_general_skeleton::get_joint(int body_part) const {
  std::shared_ptr< mae::general_joint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  std::shared_ptr< mae::general_joint > *argp ;
  
  if (!swig_override[1]) {
    return mae::general_skeleton::get_joint(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[60], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_joint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_joint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::get_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::hierarchy > SwigDirector_general_skeleton::get_hierarchy() const {
  std::shared_ptr< mae::hierarchy > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::hierarchy > *argp ;
  
  if (!swig_override[2]) {
    return mae::general_skeleton::get_hierarchy();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[61], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::hierarchy > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::hierarchy >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::get_hierarchy ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_skeleton::set_hierarchy(std::shared_ptr< mae::hierarchy > hierarchy) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhierarchy  ;
  
  if (!swig_override[3]) {
    mae::general_skeleton::set_hierarchy(hierarchy);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhierarchy = 0;
    *((std::shared_ptr< mae::hierarchy > **)&jhierarchy) = &hierarchy; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[62], swigjobj, jhierarchy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::set_hierarchy ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_general_skeleton::set_top_down(std::shared_ptr< mae::bone > top_down) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtop_down  ;
  
  if (!swig_override[4]) {
    mae::general_skeleton::set_top_down(top_down);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtop_down = 0;
    *((std::shared_ptr< mae::bone > **)&jtop_down) = &top_down; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[63], swigjobj, jtop_down);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::set_top_down ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::bone > SwigDirector_general_skeleton::get_top_down() const {
  std::shared_ptr< mae::bone > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::bone > *argp ;
  
  if (!swig_override[5]) {
    return mae::general_skeleton::get_top_down();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[64], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::bone > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::bone >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::get_top_down ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_skeleton::set_right_left(std::shared_ptr< mae::bone > right_left) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jright_left  ;
  
  if (!swig_override[6]) {
    mae::general_skeleton::set_right_left(right_left);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jright_left = 0;
    *((std::shared_ptr< mae::bone > **)&jright_left) = &right_left; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[65], swigjobj, jright_left);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::set_right_left ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::bone > SwigDirector_general_skeleton::get_right_left() const {
  std::shared_ptr< mae::bone > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::bone > *argp ;
  
  if (!swig_override[7]) {
    return mae::general_skeleton::get_right_left();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[66], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::bone > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::bone >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::get_right_left ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_skeleton::set_weight(std::shared_ptr< mae::math::vec3d > weight) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jweight  ;
  
  if (!swig_override[8]) {
    mae::general_skeleton::set_weight(weight);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jweight = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&jweight) = &weight; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[67], swigjobj, jweight);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::set_weight ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::math::vec3d > SwigDirector_general_skeleton::get_weight() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[9]) {
    return mae::general_skeleton::get_weight();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[68], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::get_weight ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_general_skeleton::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    return mae::general_skeleton::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[69], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_general_skeleton::ply_str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::general_skeleton::ply_str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[70], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::ply_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_general_skeleton::ply_file(std::string filename) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilename  ;
  
  if (!swig_override[12]) {
    mae::general_skeleton::ply_file(filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[71], swigjobj, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::general_skeleton::ply_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_general_skeleton::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_joint", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t;)V", NULL 
    },
    {
      "get_joint", "(I)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t;", NULL 
    },
    {
      "get_hierarchy", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t;", NULL 
    },
    {
      "set_hierarchy", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t;)V", NULL 
    },
    {
      "set_top_down", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;)V", NULL 
    },
    {
      "get_top_down", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;", NULL 
    },
    {
      "set_right_left", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;)V", NULL 
    },
    {
      "get_right_left", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;", NULL 
    },
    {
      "set_weight", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "get_weight", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    },
    {
      "ply_str", "()Ljava/lang/String;", NULL 
    },
    {
      "ply_file", "(Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/general_skeleton");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 13; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_skeleton::SwigDirector_fl_skeleton(JNIEnv *jenv) : mae::fl::fl_skeleton(), Swig::Director(jenv) {
}

SwigDirector_fl_skeleton::~SwigDirector_fl_skeleton() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_fl_skeleton::set_joint(int body_part, std::shared_ptr< mae::general_joint > joint) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  jlong jjoint  ;
  
  if (!swig_override[0]) {
    mae::general_skeleton::set_joint(body_part,joint);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jjoint = 0;
    *((std::shared_ptr< mae::general_joint > **)&jjoint) = &joint; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[72], swigjobj, jbody_part, jjoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::general_joint > SwigDirector_fl_skeleton::get_joint(int body_part) const {
  std::shared_ptr< mae::general_joint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jbody_part  ;
  std::shared_ptr< mae::general_joint > *argp ;
  
  if (!swig_override[1]) {
    return mae::general_skeleton::get_joint(body_part);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbody_part = (jint) body_part;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[73], swigjobj, jbody_part);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_joint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_joint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_joint ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::hierarchy > SwigDirector_fl_skeleton::get_hierarchy() const {
  std::shared_ptr< mae::hierarchy > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::hierarchy > *argp ;
  
  if (!swig_override[2]) {
    return mae::general_skeleton::get_hierarchy();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[74], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::hierarchy > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::hierarchy >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_hierarchy ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::set_hierarchy(std::shared_ptr< mae::hierarchy > hierarchy) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jhierarchy  ;
  
  if (!swig_override[3]) {
    mae::general_skeleton::set_hierarchy(hierarchy);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhierarchy = 0;
    *((std::shared_ptr< mae::hierarchy > **)&jhierarchy) = &hierarchy; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[75], swigjobj, jhierarchy);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_hierarchy ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton::set_top_down(std::shared_ptr< mae::bone > top_down) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtop_down  ;
  
  if (!swig_override[4]) {
    mae::general_skeleton::set_top_down(top_down);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtop_down = 0;
    *((std::shared_ptr< mae::bone > **)&jtop_down) = &top_down; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[76], swigjobj, jtop_down);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_top_down ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::bone > SwigDirector_fl_skeleton::get_top_down() const {
  std::shared_ptr< mae::bone > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::bone > *argp ;
  
  if (!swig_override[5]) {
    return mae::general_skeleton::get_top_down();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[77], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::bone > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::bone >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_top_down ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::set_right_left(std::shared_ptr< mae::bone > right_left) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jright_left  ;
  
  if (!swig_override[6]) {
    mae::general_skeleton::set_right_left(right_left);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jright_left = 0;
    *((std::shared_ptr< mae::bone > **)&jright_left) = &right_left; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[78], swigjobj, jright_left);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_right_left ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::bone > SwigDirector_fl_skeleton::get_right_left() const {
  std::shared_ptr< mae::bone > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::bone > *argp ;
  
  if (!swig_override[7]) {
    return mae::general_skeleton::get_right_left();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[79], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::bone > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::bone >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_right_left ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::set_weight(std::shared_ptr< mae::math::vec3d > weight) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jweight  ;
  
  if (!swig_override[8]) {
    mae::general_skeleton::set_weight(weight);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jweight = 0;
    *((std::shared_ptr< mae::math::vec3d > **)&jweight) = &weight; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[80], swigjobj, jweight);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_weight ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::math::vec3d > SwigDirector_fl_skeleton::get_weight() const {
  std::shared_ptr< mae::math::vec3d > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::vec3d > *argp ;
  
  if (!swig_override[9]) {
    return mae::general_skeleton::get_weight();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[81], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::vec3d > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::vec3d >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_weight ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_fl_skeleton::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    return mae::fl::fl_skeleton::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[82], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_fl_skeleton::ply_str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::general_skeleton::ply_str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[83], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::ply_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::ply_file(std::string filename) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilename  ;
  
  if (!swig_override[12]) {
    mae::general_skeleton::ply_file(filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[84], swigjobj, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::ply_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton::set_torso_basis(std::shared_ptr< mae::math::basis > torso_basis) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtorso_basis  ;
  
  if (!swig_override[13]) {
    mae::fl::fl_skeleton::set_torso_basis(torso_basis);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtorso_basis = 0;
    *((std::shared_ptr< mae::math::basis > **)&jtorso_basis) = &torso_basis; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[85], swigjobj, jtorso_basis);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_torso_basis ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::math::basis > SwigDirector_fl_skeleton::get_torso_basis() const {
  std::shared_ptr< mae::math::basis > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::math::basis > *argp ;
  
  if (!swig_override[14]) {
    return mae::fl::fl_skeleton::get_torso_basis();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[86], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::math::basis > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::math::basis >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_torso_basis ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::set_orig_skeleton(std::shared_ptr< mae::general_skeleton > offset_skeleton) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong joffset_skeleton  ;
  
  if (!swig_override[15]) {
    mae::fl::fl_skeleton::set_orig_skeleton(offset_skeleton);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    joffset_skeleton = 0;
    *((std::shared_ptr< mae::general_skeleton > **)&joffset_skeleton) = &offset_skeleton; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[87], swigjobj, joffset_skeleton);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::set_orig_skeleton ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::general_skeleton > SwigDirector_fl_skeleton::get_orig_skeleton() const {
  std::shared_ptr< mae::general_skeleton > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::general_skeleton > *argp ;
  
  if (!swig_override[16]) {
    return mae::fl::fl_skeleton::get_orig_skeleton();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[88], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_skeleton > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_skeleton >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_skeleton::get_orig_skeleton ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_joint", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t;)V", NULL 
    },
    {
      "get_joint", "(I)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_joint_t;", NULL 
    },
    {
      "get_hierarchy", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t;", NULL 
    },
    {
      "set_hierarchy", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__hierarchy_t;)V", NULL 
    },
    {
      "set_top_down", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;)V", NULL 
    },
    {
      "get_top_down", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;", NULL 
    },
    {
      "set_right_left", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;)V", NULL 
    },
    {
      "get_right_left", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__bone_t;", NULL 
    },
    {
      "set_weight", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;)V", NULL 
    },
    {
      "get_weight", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__vec3d_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    },
    {
      "ply_str", "()Ljava/lang/String;", NULL 
    },
    {
      "ply_file", "(Ljava/lang/String;)V", NULL 
    },
    {
      "set_torso_basis", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__basis_t;)V", NULL 
    },
    {
      "get_torso_basis", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__math__basis_t;", NULL 
    },
    {
      "set_orig_skeleton", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t;)V", NULL 
    },
    {
      "get_orig_skeleton", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_skeleton");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 17; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_skeleton_pose_detector::SwigDirector_fl_skeleton_pose_detector(JNIEnv *jenv) : mae::i_pose_detector< mae::fl::fl_skeleton >(), Swig::Director(jenv) {
}

SwigDirector_fl_skeleton_pose_detector::~SwigDirector_fl_skeleton_pose_detector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::general_pose > SwigDirector_fl_skeleton_pose_detector::pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose) {
  std::shared_ptr< mae::general_pose > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jskeleton  ;
  jlong jbody_parts  ;
  jlong jprevious_pose  ;
  std::shared_ptr< mae::general_pose > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_pose_detector< mae::fl::fl_skeleton >::pose.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jprevious_pose = 0;
    *((std::shared_ptr< mae::general_pose > **)&jprevious_pose) = &previous_pose; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[89], swigjobj, jskeleton, jbody_parts, jprevious_pose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_pose > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_pose >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_pose_detector< mae::fl::fl_skeleton >::pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton_pose_detector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pose", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;Lmaejava/bone_vector;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_skeleton_pose_detector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_pose_detector::SwigDirector_fl_pose_detector(JNIEnv *jenv, double hysteresis_val, bool debug) : mae::fl::fl_pose_detector(hysteresis_val, debug), Swig::Director(jenv) {
}

SwigDirector_fl_pose_detector::~SwigDirector_fl_pose_detector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::general_pose > SwigDirector_fl_pose_detector::pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose) {
  std::shared_ptr< mae::general_pose > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jskeleton  ;
  jlong jbody_parts  ;
  jlong jprevious_pose  ;
  std::shared_ptr< mae::general_pose > *argp ;
  
  if (!swig_override[0]) {
    return mae::fl::fl_pose_detector::pose(skeleton,body_parts,previous_pose);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jprevious_pose = 0;
    *((std::shared_ptr< mae::general_pose > **)&jprevious_pose) = &previous_pose; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[90], swigjobj, jskeleton, jbody_parts, jprevious_pose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_pose > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_pose >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_pose_detector::pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_pose_detector::set_hysteresis_val(double hysteresis_val) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jhysteresis_val  ;
  
  if (!swig_override[1]) {
    mae::fl::fl_pose_detector::set_hysteresis_val(hysteresis_val);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jhysteresis_val = (jdouble) hysteresis_val;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[91], swigjobj, jhysteresis_val);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_pose_detector::set_hysteresis_val ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_fl_pose_detector::get_hysteresis_val() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::fl_pose_detector::get_hysteresis_val();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[92], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_pose_detector::get_hysteresis_val ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::general_pose > SwigDirector_fl_pose_detector::vector_pose(std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts, std::shared_ptr< mae::general_pose > previous_pose) {
  std::shared_ptr< mae::general_pose > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jskeleton  ;
  jlong jbody_parts  ;
  jlong jprevious_pose  ;
  std::shared_ptr< mae::general_pose > *argp ;
  
  if (!swig_override[3]) {
    return mae::fl::fl_pose_detector::vector_pose(skeleton,body_parts,previous_pose);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jprevious_pose = 0;
    *((std::shared_ptr< mae::general_pose > **)&jprevious_pose) = &previous_pose; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[93], swigjobj, jskeleton, jbody_parts, jprevious_pose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::general_pose > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::general_pose >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_pose_detector::vector_pose ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_pose_detector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pose", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;Lmaejava/bone_vector;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;", NULL 
    },
    {
      "set_hysteresis_val", "(D)V", NULL 
    },
    {
      "get_hysteresis_val", "()D", NULL 
    },
    {
      "vector_pose", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;Lmaejava/bone_vector;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_pose_detector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_pre_sign::SwigDirector_i_pre_sign(JNIEnv *jenv) : mae::fl::laban::ps::i_pre_sign(), Swig::Director(jenv) {
}

SwigDirector_i_pre_sign::~SwigDirector_i_pre_sign() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_i_pre_sign::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_pre_sign::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[94], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_pre_sign::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_pre_sign::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_pre_sign::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[97], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_pre_sign::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_pre_sign::equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_pre_sign::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[99], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_pre_sign::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_pre_sign::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_pre_sign");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_column_definition::SwigDirector_column_definition(JNIEnv *jenv, int column_index, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign) : mae::fl::laban::column_definition(column_index, pre_sign), Swig::Director(jenv) {
}

SwigDirector_column_definition::SwigDirector_column_definition(JNIEnv *jenv, mae::e_bone eb) : mae::fl::laban::column_definition(eb), Swig::Director(jenv) {
}

SwigDirector_column_definition::~SwigDirector_column_definition() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_column_definition::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::column_definition::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[100], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::column_definition::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_column_definition::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::column_definition::svg(im_width,im_height,max_column,measures,beats_per_measure);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[103], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::column_definition::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_column_definition::equals(std::shared_ptr< mae::fl::laban::column_definition > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::column_definition::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::column_definition > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[104], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::column_definition::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_column_definition::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/column_definition");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_movement::SwigDirector_i_movement(JNIEnv *jenv) : mae::fl::laban::i_movement(), Swig::Director(jenv) {
}

SwigDirector_i_movement::~SwigDirector_i_movement() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_i_movement::get_column() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::get_column.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[105], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::get_column ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_i_movement::get_measure() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::get_measure.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[106], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::get_measure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_i_movement::get_beat() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::get_beat.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[107], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::get_beat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_i_movement::get_duration() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::get_duration.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[108], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::get_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_movement::equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[109], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_movement::symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::symbol_equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[110], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::symbol_equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_movement::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[111], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_movement::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[9]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[114], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_i_movement::recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  jlong jmeasure  ;
  jdouble jbeat  ;
  jdouble jduration  ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[10]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::recreate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jmeasure = (jlong) measure;
    jbeat = (jdouble) beat;
    jduration = (jdouble) duration;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[115], swigjobj, jcolumn_mapping, jmeasure, jbeat, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_movement::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_movement::str.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[116], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_movement::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_movement::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_column", "()I", NULL 
    },
    {
      "get_measure", "()J", NULL 
    },
    {
      "get_beat", "()D", NULL 
    },
    {
      "get_duration", "()D", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "symbol_equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;JDD)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_movement");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence::SwigDirector_laban_sequence(JNIEnv *jenv) : mae::fl::laban::laban_sequence(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence::SwigDirector_laban_sequence(JNIEnv *jenv, std::string title, std::string author, unsigned int measures, mae::fl::laban::e_time_unit time_unit, unsigned int beat_duration, unsigned int beats) : mae::fl::laban::laban_sequence(title, author, measures, time_unit, beat_duration, beats), Swig::Director(jenv) {
}

SwigDirector_laban_sequence::~SwigDirector_laban_sequence() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_laban_sequence::get_version() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::laban_sequence::get_version();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[117], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_version ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_authors(std::vector< std::string > authors) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jauthors  ;
  
  if (!swig_override[1]) {
    mae::fl::laban::laban_sequence::set_authors(authors);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jauthors = 0;
    *((std::vector< std::string > **)&jauthors) = &authors; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[118], swigjobj, jauthors);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_authors ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_laban_sequence::add_author(std::string author) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jauthor  ;
  
  if (!swig_override[2]) {
    mae::fl::laban::laban_sequence::add_author(author);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jauthor = jenv->NewStringUTF((&author)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[119], swigjobj, jauthor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::add_author ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< std::string > SwigDirector_laban_sequence::get_authors() const {
  std::vector< std::string > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::string > *argp ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::laban_sequence::get_authors();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[120], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::string > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::string >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_authors ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_title(std::string title) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtitle  ;
  
  if (!swig_override[4]) {
    mae::fl::laban::laban_sequence::set_title(title);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtitle = jenv->NewStringUTF((&title)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[121], swigjobj, jtitle);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_title ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_laban_sequence::get_title() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::laban_sequence::get_title();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[122], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_title ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_description(std::string description) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdescription  ;
  
  if (!swig_override[6]) {
    mae::fl::laban::laban_sequence::set_description(description);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdescription = jenv->NewStringUTF((&description)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[123], swigjobj, jdescription);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_description ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_laban_sequence::get_description() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::laban_sequence::get_description();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[124], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_description ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_measures(unsigned int measures) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmeasures  ;
  
  if (!swig_override[8]) {
    mae::fl::laban::laban_sequence::set_measures(measures);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmeasures = (jlong) measures;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[125], swigjobj, jmeasures);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_measures ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

unsigned int SwigDirector_laban_sequence::get_measures() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::laban_sequence::get_measures();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[126], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_measures ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_time_unit(mae::fl::laban::e_time_unit time_unit) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtime_unit  ;
  
  if (!swig_override[10]) {
    mae::fl::laban::laban_sequence::set_time_unit(time_unit);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtime_unit = (jint) time_unit;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[127], swigjobj, jtime_unit);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_time_unit ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

mae::fl::laban::e_time_unit SwigDirector_laban_sequence::get_time_unit() const {
  mae::fl::laban::e_time_unit c_result = SwigValueInit< mae::fl::laban::e_time_unit >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::laban_sequence::get_time_unit();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[128], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (mae::fl::laban::e_time_unit)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_time_unit ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_beat_duration(unsigned int beat_duration) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbeat_duration  ;
  
  if (!swig_override[12]) {
    mae::fl::laban::laban_sequence::set_beat_duration(beat_duration);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbeat_duration = (jlong) beat_duration;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[129], swigjobj, jbeat_duration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_beat_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

unsigned int SwigDirector_laban_sequence::get_beat_duration() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    return mae::fl::laban::laban_sequence::get_beat_duration();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[130], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_beat_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_beats(unsigned int beats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbeats  ;
  
  if (!swig_override[14]) {
    mae::fl::laban::laban_sequence::set_beats(beats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbeats = (jlong) beats;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[131], swigjobj, jbeats);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_beats ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

unsigned int SwigDirector_laban_sequence::get_beats() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    return mae::fl::laban::laban_sequence::get_beats();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[132], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_beats ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_column_definitions(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > col_defs) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcol_defs  ;
  
  if (!swig_override[16]) {
    mae::fl::laban::laban_sequence::set_column_definitions(col_defs);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcol_defs = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jcol_defs) = &col_defs; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[133], swigjobj, jcol_defs);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_column_definitions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_laban_sequence::add_column_definition(std::shared_ptr< mae::fl::laban::column_definition > col_def) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcol_def  ;
  
  if (!swig_override[17]) {
    mae::fl::laban::laban_sequence::add_column_definition(col_def);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcol_def = 0;
    *((std::shared_ptr< mae::fl::laban::column_definition > **)&jcol_def) = &col_def; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[134], swigjobj, jcol_def);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::add_column_definition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< std::shared_ptr< mae::fl::laban::column_definition > > SwigDirector_laban_sequence::get_column_definitions() const {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp ;
  
  if (!swig_override[18]) {
    return mae::fl::laban::laban_sequence::get_column_definitions();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[135], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_column_definitions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::column_definition > SwigDirector_laban_sequence::get_column_definition(int column_index) {
  std::shared_ptr< mae::fl::laban::column_definition > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jcolumn_index  ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp ;
  
  if (!swig_override[19]) {
    return mae::fl::laban::laban_sequence::get_column_definition(column_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_index = (jint) column_index;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[136], swigjobj, jcolumn_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::column_definition >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_column_definition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::clear_column_definitions() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[20]) {
    mae::fl::laban::laban_sequence::clear_column_definitions();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[137], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::clear_column_definitions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< int > SwigDirector_laban_sequence::get_columns() const {
  std::vector< int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< int > *argp ;
  
  if (!swig_override[21]) {
    return mae::fl::laban::laban_sequence::get_columns();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[138], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_columns ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::set_movements(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > movements) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmovements  ;
  
  if (!swig_override[22]) {
    mae::fl::laban::laban_sequence::set_movements(movements);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmovements = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jmovements) = &movements; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[139], swigjobj, jmovements);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::set_movements ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< std::shared_ptr< mae::fl::laban::i_movement > > SwigDirector_laban_sequence::get_movements() const {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp ;
  
  if (!swig_override[23]) {
    return mae::fl::laban::laban_sequence::get_movements();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[140], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_movements ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::add_movement(std::shared_ptr< mae::fl::laban::i_movement > i_mov) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ji_mov  ;
  
  if (!swig_override[24]) {
    mae::fl::laban::laban_sequence::add_movement(i_mov);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ji_mov = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ji_mov) = &i_mov; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[141], swigjobj, ji_mov);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::add_movement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< std::shared_ptr< mae::fl::laban::i_movement > > SwigDirector_laban_sequence::get_column_movements(int column) const {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jcolumn  ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp ;
  
  if (!swig_override[25]) {
    return mae::fl::laban::laban_sequence::get_column_movements(column);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn = (jint) column;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[142], swigjobj, jcolumn);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_column_movements ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_laban_sequence::get_last_movement() const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[26]) {
    return mae::fl::laban::laban_sequence::get_last_movement();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[143], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::get_last_movement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::clear_movements() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[27]) {
    mae::fl::laban::laban_sequence::clear_movements();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[144], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::clear_movements ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_laban_sequence::xml(bool no_header, unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jno_header  ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[28]) {
    return mae::fl::laban::laban_sequence::xml(no_header,indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jno_header = (jboolean) no_header;
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[145], swigjobj, jno_header, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_laban_sequence::xml_namespace_header(std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jnamesp  ;
  
  if (!swig_override[32]) {
    return mae::fl::laban::laban_sequence::xml_namespace_header(namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[149], swigjobj, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::xml_namespace_header ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_laban_sequence::xml_schema_location() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[34]) {
    return mae::fl::laban::laban_sequence::xml_schema_location();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[151], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::xml_schema_location ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_laban_sequence::xml_namespace_uri() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[35]) {
    return mae::fl::laban::laban_sequence::xml_namespace_uri();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[152], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::xml_namespace_uri ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::xml_file(std::string path) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath  ;
  
  if (!swig_override[36]) {
    mae::fl::laban::laban_sequence::xml_file(path);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewStringUTF((&path)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[153], swigjobj, jpath);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::xml_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_laban_sequence::svg(unsigned int im_width, unsigned int im_height) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  
  if (!swig_override[37]) {
    return mae::fl::laban::laban_sequence::svg(im_width,im_height);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[154], swigjobj, jim_width, jim_height);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::svg_file(std::string path, unsigned int im_width, unsigned int im_height) const {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath  ;
  jlong jim_width  ;
  jlong jim_height  ;
  
  if (!swig_override[38]) {
    mae::fl::laban::laban_sequence::svg_file(path,im_width,im_height);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewStringUTF((&path)->c_str()); 
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[155], swigjobj, jpath, jim_width, jim_height);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::svg_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_laban_sequence::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[41]) {
    return mae::fl::laban::laban_sequence::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[158], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_laban_sequence::svg_fill_pattern(std::string pattern_name, unsigned int im_width, unsigned int im_height) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpattern_name  ;
  jlong jim_width  ;
  jlong jim_height  ;
  
  if (!swig_override[42]) {
    return mae::fl::laban::laban_sequence::svg_fill_pattern(pattern_name,im_width,im_height);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpattern_name = jenv->NewStringUTF((&pattern_name)->c_str()); 
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[159], swigjobj, jpattern_name, jim_width, jim_height);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence::svg_fill_pattern ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_version", "()Ljava/lang/String;", NULL 
    },
    {
      "set_authors", "(Lmaejava/string_vector;)V", NULL 
    },
    {
      "add_author", "(Ljava/lang/String;)V", NULL 
    },
    {
      "get_authors", "()Lmaejava/string_vector;", NULL 
    },
    {
      "set_title", "(Ljava/lang/String;)V", NULL 
    },
    {
      "get_title", "()Ljava/lang/String;", NULL 
    },
    {
      "set_description", "(Ljava/lang/String;)V", NULL 
    },
    {
      "get_description", "()Ljava/lang/String;", NULL 
    },
    {
      "set_measures", "(J)V", NULL 
    },
    {
      "get_measures", "()J", NULL 
    },
    {
      "set_time_unit", "(Lmaejava/e_time_unit;)V", NULL 
    },
    {
      "get_time_unit", "()Lmaejava/e_time_unit;", NULL 
    },
    {
      "set_beat_duration", "(J)V", NULL 
    },
    {
      "get_beat_duration", "()J", NULL 
    },
    {
      "set_beats", "(J)V", NULL 
    },
    {
      "get_beats", "()J", NULL 
    },
    {
      "set_column_definitions", "(Lmaejava/coldef_vector;)V", NULL 
    },
    {
      "add_column_definition", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t;)V", NULL 
    },
    {
      "get_column_definitions", "()Lmaejava/coldef_vector;", NULL 
    },
    {
      "get_column_definition", "(I)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__column_definition_t;", NULL 
    },
    {
      "clear_column_definitions", "()V", NULL 
    },
    {
      "get_columns", "()Lmaejava/int_vector;", NULL 
    },
    {
      "set_movements", "(Lmaejava/i_mov_vector;)V", NULL 
    },
    {
      "get_movements", "()Lmaejava/i_mov_vector;", NULL 
    },
    {
      "add_movement", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)V", NULL 
    },
    {
      "get_column_movements", "(I)Lmaejava/i_mov_vector;", NULL 
    },
    {
      "get_last_movement", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "clear_movements", "()V", NULL 
    },
    {
      "xml", "(ZJLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(ZJ)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(Z)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "xml_namespace_header", "(Ljava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml_namespace_header", "()Ljava/lang/String;", NULL 
    },
    {
      "xml_schema_location", "()Ljava/lang/String;", NULL 
    },
    {
      "xml_namespace_uri", "()Ljava/lang/String;", NULL 
    },
    {
      "xml_file", "(Ljava/lang/String;)V", NULL 
    },
    {
      "svg", "(JJ)Ljava/lang/String;", NULL 
    },
    {
      "svg_file", "(Ljava/lang/String;JJ)V", NULL 
    },
    {
      "svg_file", "(Ljava/lang/String;J)V", NULL 
    },
    {
      "svg_file", "(Ljava/lang/String;)V", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    },
    {
      "svg_fill_pattern", "(Ljava/lang/String;JJ)Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 43; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_movement_decision_maker::SwigDirector_i_movement_decision_maker(JNIEnv *jenv) : mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >(), Swig::Director(jenv) {
}

SwigDirector_i_movement_decision_maker::~SwigDirector_i_movement_decision_maker() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_i_movement_decision_maker::set_recognition_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::set_recognition_tolerance.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[160], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::set_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_i_movement_decision_maker::get_recognition_tolerance() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::get_recognition_tolerance.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[161], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::get_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_movement_decision_maker::decide_match(std::shared_ptr< mae::fl::laban::i_movement > stream_item, std::shared_ptr< mae::fl::laban::i_movement > stream_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstream_item  ;
  jlong jstream_item_predecessor  ;
  jlong jtree_item  ;
  jlong jtree_item_predecessor  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_match.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstream_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jstream_item) = &stream_item; 
    jstream_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jstream_item_predecessor) = &stream_item_predecessor; 
    jtree_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item) = &tree_item; 
    jtree_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item_predecessor) = &tree_item_predecessor; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[162], swigjobj, jstream_item, jstream_item_predecessor, jtree_item, jtree_item_predecessor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_match ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_movement_decision_maker::decide_insertion(std::shared_ptr< mae::fl::laban::i_movement > add_item, std::shared_ptr< mae::fl::laban::i_movement > add_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jadd_item  ;
  jlong jadd_item_predecessor  ;
  jlong jtree_item  ;
  jlong jtree_item_predecessor  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_insertion.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jadd_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jadd_item) = &add_item; 
    jadd_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jadd_item_predecessor) = &add_item_predecessor; 
    jtree_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item) = &tree_item; 
    jtree_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item_predecessor) = &tree_item_predecessor; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[163], swigjobj, jadd_item, jadd_item_predecessor, jtree_item, jtree_item_predecessor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_insertion ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_movement_decision_maker::position_okay(double dist_to_last, double set_value, bool check_startpose) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jdist_to_last  ;
  jdouble jset_value  ;
  jboolean jcheck_startpose  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::position_okay.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdist_to_last = (jdouble) dist_to_last;
    jset_value = (jdouble) set_value;
    jcheck_startpose = (jboolean) check_startpose;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[164], swigjobj, jdist_to_last, jset_value, jcheck_startpose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::position_okay ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_movement_decision_maker::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_recognition_tolerance", "(D)V", NULL 
    },
    {
      "get_recognition_tolerance", "()D", NULL 
    },
    {
      "decide_match", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "decide_insertion", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "position_okay", "(DDZ)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_movement_decision_maker");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_rewriting_forest::SwigDirector_rewriting_forest(JNIEnv *jenv, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double tolerance) : mae::fl::laban::rewriting_forest(beats_per_measure, beat_duration, time_unit, tolerance), Swig::Director(jenv) {
}

SwigDirector_rewriting_forest::SwigDirector_rewriting_forest(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > rules, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double tolerance) : mae::fl::laban::rewriting_forest(rules, beats_per_measure, beat_duration, time_unit, tolerance), Swig::Director(jenv) {
}

SwigDirector_rewriting_forest::~SwigDirector_rewriting_forest() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


double SwigDirector_rewriting_forest::get_tolerance() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::rewriting_forest::get_tolerance();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[165], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::get_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_rewriting_forest::set_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[1]) {
    mae::fl::laban::rewriting_forest::set_tolerance(tolerance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[166], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::set_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > SwigDirector_rewriting_forest::replacements(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *argp ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::rewriting_forest::replacements(sequence);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jsequence) = &sequence; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[167], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::replacements ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_rewriting_forest::add_rule(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > replacements) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  jlong jreplacements  ;
  
  if (!swig_override[3]) {
    mae::fl::laban::rewriting_forest::add_rule(sequence,replacements);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jsequence) = &sequence; 
    jreplacements = 0;
    *((std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jreplacements) = &replacements; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[168], swigjobj, jsequence, jreplacements);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::add_rule ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_rewriting_forest::add_rule(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > rule) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrule  ;
  
  if (!swig_override[4]) {
    mae::fl::laban::rewriting_forest::add_rule(rule);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrule = 0;
    *((std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jrule) = &rule; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[169], swigjobj, jrule);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::add_rule ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::string SwigDirector_rewriting_forest::str() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::rewriting_forest::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[170], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::rewriting_forest::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_rewriting_forest::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_tolerance", "()D", NULL 
    },
    {
      "set_tolerance", "(D)V", NULL 
    },
    {
      "replacements", "(Lmaejava/i_mov_vector;)Lmaejava/i_mov_vector_vector;", NULL 
    },
    {
      "add_rule", "(Lmaejava/i_mov_vector;Lmaejava/SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t;)V", NULL 
    },
    {
      "add_rule", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_valueT_mae__fl__laban__i_movement_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t_t;)V", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/rewriting_forest");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_mov_vector_vector_dec_val::SwigDirector_i_mov_vector_vector_dec_val(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > value) : mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(sequence, value), Swig::Director(jenv) {
}

SwigDirector_i_mov_vector_vector_dec_val::SwigDirector_i_mov_vector_vector_dec_val(JNIEnv *jenv, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > value) : mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(value), Swig::Director(jenv) {
}

SwigDirector_i_mov_vector_vector_dec_val::~SwigDirector_i_mov_vector_vector_dec_val() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::vector< std::shared_ptr< mae::fl::laban::i_movement > > SwigDirector_i_mov_vector_vector_dec_val::get_sequence() {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_sequence();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[171], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > SwigDirector_i_mov_vector_vector_dec_val::get_value() {
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_value();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[172], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_value ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_mov_vector_vector_dec_val::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_sequence", "()Lmaejava/i_mov_vector;", NULL 
    },
    {
      "get_value", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_mov_vector_vector_dec_val");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_decision_forest::SwigDirector_decision_forest(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, std::vector< int > reserved_columns, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double framerate, std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > dec_maker, std::shared_ptr< mae::fl::laban::rewriting_forest > rw, bool cooldown) : mae::fl::laban::decision_forest(column_definitions, reserved_columns, beats_per_measure, beat_duration, time_unit, framerate, dec_maker, rw, cooldown), Swig::Director(jenv) {
}

SwigDirector_decision_forest::~SwigDirector_decision_forest() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_decision_forest::set_recognition_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[0]) {
    mae::fl::laban::decision_forest::set_recognition_tolerance(tolerance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[173], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::set_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_decision_forest::set_cooldown(bool cooldown) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jcooldown  ;
  
  if (!swig_override[1]) {
    mae::fl::laban::decision_forest::set_cooldown(cooldown);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcooldown = (jboolean) cooldown;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[174], swigjobj, jcooldown);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::set_cooldown ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_decision_forest::get_cooldown() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::decision_forest::get_cooldown();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[175], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::get_cooldown ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

int SwigDirector_decision_forest::get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::decision_forest::get_sequence_length(sequence);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[176], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::get_sequence_length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_decision_forest::add_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[4]) {
    mae::fl::laban::decision_forest::add_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[177], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::add_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_decision_forest::remove_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::decision_forest::remove_sequence(sequence);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[178], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::remove_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_decision_forest::remove_sequence(unsigned int list_index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist_index  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::decision_forest::remove_sequence(list_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlist_index = (jlong) list_index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[179], swigjobj, jlist_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::remove_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_decision_forest::clear() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    mae::fl::laban::decision_forest::clear();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[180], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::clear ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_decision_forest::add_rewriting_rule(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > sequence, std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > replacements) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  jlong jreplacements  ;
  
  if (!swig_override[8]) {
    mae::fl::laban::decision_forest::add_rewriting_rule(sequence,replacements);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jsequence) = &sequence; 
    jreplacements = 0;
    *((std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jreplacements) = &replacements; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[181], swigjobj, jsequence, jreplacements);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::add_rewriting_rule ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_decision_forest::add_rewriting_rule(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > rule) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrule  ;
  
  if (!swig_override[9]) {
    mae::fl::laban::decision_forest::add_rewriting_rule(rule);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrule = 0;
    *((std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jrule) = &rule; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[182], swigjobj, jrule);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::add_rewriting_rule ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > SwigDirector_decision_forest::get_sequences() const {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[10]) {
    return mae::fl::laban::decision_forest::get_sequences();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[183], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::get_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > SwigDirector_decision_forest::find_submatches(std::shared_ptr< mae::fl::laban::laban_sequence > whole_sequence, std::vector< mae::bone > body_parts) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jwhole_sequence  ;
  jlong jbody_parts  ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::decision_forest::find_submatches(whole_sequence,body_parts);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jwhole_sequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jwhole_sequence) = &whole_sequence; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[184], swigjobj, jwhole_sequence, jbody_parts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::find_submatches ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_decision_forest::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    return mae::fl::laban::decision_forest::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[185], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::decision_forest::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_decision_forest::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_recognition_tolerance", "(D)V", NULL 
    },
    {
      "set_cooldown", "(Z)V", NULL 
    },
    {
      "get_cooldown", "()Z", NULL 
    },
    {
      "get_sequence_length", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)I", NULL 
    },
    {
      "add_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "remove_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)Z", NULL 
    },
    {
      "remove_sequence", "(J)Z", NULL 
    },
    {
      "clear", "()V", NULL 
    },
    {
      "add_rewriting_rule", "(Lmaejava/i_mov_vector;Lmaejava/SWIGTYPE_p_std__shared_ptrT_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t;)V", NULL 
    },
    {
      "add_rewriting_rule", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_valueT_mae__fl__laban__i_movement_std__vectorT_std__vectorT_std__shared_ptrT_mae__fl__laban__i_movement_t_t_t_t_t;)V", NULL 
    },
    {
      "get_sequences", "()Lmaejava/laban_sequence_list;", NULL 
    },
    {
      "find_submatches", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;Lmaejava/bone_vector;)Lmaejava/laban_sequence_vector;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/decision_forest");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 13; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_dec_maker::SwigDirector_i_dec_maker(JNIEnv *jenv) : mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >(), Swig::Director(jenv) {
}

SwigDirector_i_dec_maker::~SwigDirector_i_dec_maker() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_i_dec_maker::set_recognition_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::set_recognition_tolerance.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[186], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::set_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

double SwigDirector_i_dec_maker::get_recognition_tolerance() {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::get_recognition_tolerance.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[187], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::get_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_dec_maker::decide_match(std::shared_ptr< mae::fl::laban::i_movement > stream_item, std::shared_ptr< mae::fl::laban::i_movement > stream_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstream_item  ;
  jlong jstream_item_predecessor  ;
  jlong jtree_item  ;
  jlong jtree_item_predecessor  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_match.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstream_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jstream_item) = &stream_item; 
    jstream_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jstream_item_predecessor) = &stream_item_predecessor; 
    jtree_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item) = &tree_item; 
    jtree_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item_predecessor) = &tree_item_predecessor; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[188], swigjobj, jstream_item, jstream_item_predecessor, jtree_item, jtree_item_predecessor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_match ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_dec_maker::decide_insertion(std::shared_ptr< mae::fl::laban::i_movement > add_item, std::shared_ptr< mae::fl::laban::i_movement > add_item_predecessor, std::shared_ptr< mae::fl::laban::i_movement > tree_item, std::shared_ptr< mae::fl::laban::i_movement > tree_item_predecessor) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jadd_item  ;
  jlong jadd_item_predecessor  ;
  jlong jtree_item  ;
  jlong jtree_item_predecessor  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_insertion.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jadd_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jadd_item) = &add_item; 
    jadd_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jadd_item_predecessor) = &add_item_predecessor; 
    jtree_item = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item) = &tree_item; 
    jtree_item_predecessor = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&jtree_item_predecessor) = &tree_item_predecessor; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[189], swigjobj, jadd_item, jadd_item_predecessor, jtree_item, jtree_item_predecessor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::decide_insertion ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_dec_maker::position_okay(double dist_to_last, double set_value, bool check_startpose) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jdist_to_last  ;
  jdouble jset_value  ;
  jboolean jcheck_startpose  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::position_okay.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdist_to_last = (jdouble) dist_to_last;
    jset_value = (jdouble) set_value;
    jcheck_startpose = (jboolean) check_startpose;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[190], swigjobj, jdist_to_last, jset_value, jcheck_startpose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement >::position_okay ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_dec_maker::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "set_recognition_tolerance", "(D)V", NULL 
    },
    {
      "get_recognition_tolerance", "()D", NULL 
    },
    {
      "decide_match", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "decide_insertion", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "position_okay", "(DDZ)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_dec_maker");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_sequence_recognizer::SwigDirector_laban_sequence_sequence_recognizer(JNIEnv *jenv) : mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_sequence_recognizer::~SwigDirector_laban_sequence_sequence_recognizer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_laban_sequence_sequence_recognizer::register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::register_sequence.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[191], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::register_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_laban_sequence_sequence_recognizer::deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::deregister_sequence.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[192], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_laban_sequence_sequence_recognizer::deregister_sequence(unsigned int list_index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist_index  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::deregister_sequence.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlist_index = (jlong) list_index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[193], swigjobj, jlist_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_sequence_recognizer::clear_registered_sequences() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::clear_registered_sequences.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[194], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::clear_registered_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_laban_sequence_sequence_recognizer::get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::get_sequence_length.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[195], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::get_sequence_length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > SwigDirector_laban_sequence_sequence_recognizer::recognize_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence, std::vector< mae::bone > body_parts) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  jlong jbody_parts  ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::recognize_sequence.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[196], swigjobj, jsequence, jbody_parts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_recognizer< mae::fl::laban::laban_sequence >::recognize_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_sequence_recognizer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "register_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "deregister_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)Z", NULL 
    },
    {
      "deregister_sequence", "(J)Z", NULL 
    },
    {
      "clear_registered_sequences", "()V", NULL 
    },
    {
      "get_sequence_length", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)I", NULL 
    },
    {
      "recognize_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;Lmaejava/bone_vector;)Lmaejava/laban_sequence_vector;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_sequence_recognizer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_recognizer::SwigDirector_laban_sequence_recognizer(JNIEnv *jenv, double framerate, bool debug) : mae::fl::laban::laban_sequence_recognizer(framerate, debug), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_recognizer::SwigDirector_laban_sequence_recognizer(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double framerate, bool debug) : mae::fl::laban::laban_sequence_recognizer(column_definitions, beats_per_measure, beat_duration, time_unit, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_recognizer::~SwigDirector_laban_sequence_recognizer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_laban_sequence_recognizer::register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[0]) {
    mae::fl::laban::laban_sequence_recognizer::register_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[197], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::register_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_laban_sequence_recognizer::deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::laban_sequence_recognizer::deregister_sequence(sequence);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[198], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_laban_sequence_recognizer::deregister_sequence(unsigned int list_index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlist_index  ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::laban_sequence_recognizer::deregister_sequence(list_index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlist_index = (jlong) list_index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[199], swigjobj, jlist_index);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_recognizer::clear_registered_sequences() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    mae::fl::laban::laban_sequence_recognizer::clear_registered_sequences();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[200], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::clear_registered_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int SwigDirector_laban_sequence_recognizer::get_sequence_length(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::laban_sequence_recognizer::get_sequence_length(sequence);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[201], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::get_sequence_length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > SwigDirector_laban_sequence_recognizer::recognize_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence, std::vector< mae::bone > body_parts) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  jlong jbody_parts  ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::laban_sequence_recognizer::recognize_sequence(sequence,body_parts);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[202], swigjobj, jsequence, jbody_parts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::recognize_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_recognizer::set_recognition_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[6]) {
    mae::fl::laban::laban_sequence_recognizer::set_recognition_tolerance(tolerance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[203], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::set_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::fl::laban::decision_forest > SwigDirector_laban_sequence_recognizer::get_decision_forest() const {
  std::shared_ptr< mae::fl::laban::decision_forest > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::decision_forest > *argp ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::laban_sequence_recognizer::get_decision_forest();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[204], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::decision_forest > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::decision_forest >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::get_decision_forest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > SwigDirector_laban_sequence_recognizer::get_registered_sequences() const {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[8]) {
    return mae::fl::laban::laban_sequence_recognizer::get_registered_sequences();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[205], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::get_registered_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_laban_sequence_recognizer::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::laban_sequence_recognizer::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[206], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_recognizer::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_recognizer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "register_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "deregister_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)Z", NULL 
    },
    {
      "deregister_sequence", "(J)Z", NULL 
    },
    {
      "clear_registered_sequences", "()V", NULL 
    },
    {
      "get_sequence_length", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)I", NULL 
    },
    {
      "recognize_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;Lmaejava/bone_vector;)Lmaejava/laban_sequence_vector;", NULL 
    },
    {
      "set_recognition_tolerance", "(D)V", NULL 
    },
    {
      "get_decision_forest", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__decision_forest_t;", NULL 
    },
    {
      "get_registered_sequences", "()Lmaejava/laban_sequence_list;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_recognizer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_sequence_generator::SwigDirector_laban_sequence_sequence_generator(JNIEnv *jenv) : mae::i_sequence_generator< mae::fl::laban::laban_sequence >(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_sequence_generator::~SwigDirector_laban_sequence_sequence_generator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_laban_sequence_sequence_generator::generate_sequence(double framerate, std::list< std::shared_ptr< mae::general_enriched_pose > > keyPoses, std::vector< mae::bone > bodyParts) {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jframerate  ;
  jlong jkeyPoses  ;
  jlong jbodyParts  ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_generator< mae::fl::laban::laban_sequence >::generate_sequence.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jframerate = (jdouble) framerate;
    jkeyPoses = 0;
    *((std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jkeyPoses) = &keyPoses; 
    jbodyParts = 0;
    *((std::vector< mae::bone > **)&jbodyParts) = &bodyParts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[207], swigjobj, jframerate, jkeyPoses, jbodyParts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_generator< mae::fl::laban::laban_sequence >::generate_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_sequence_generator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "generate_sequence", "(DLmaejava/enriched_pose_list;Lmaejava/bone_vector;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_sequence_generator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_generator::SwigDirector_laban_sequence_generator(JNIEnv *jenv, bool debug) : mae::fl::laban::laban_sequence_generator(debug), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_generator::SwigDirector_laban_sequence_generator(JNIEnv *jenv, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, bool debug) : mae::fl::laban::laban_sequence_generator(column_definitions, beats_per_measure, beat_duration, time_unit, debug), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_generator::~SwigDirector_laban_sequence_generator() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_laban_sequence_generator::generate_sequence(double framerate, std::list< std::shared_ptr< mae::general_enriched_pose > > key_poses, std::vector< mae::bone > body_parts) {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jframerate  ;
  jlong jkey_poses  ;
  jlong jbody_parts  ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::laban_sequence_generator::generate_sequence(framerate,key_poses,body_parts);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jframerate = (jdouble) framerate;
    jkey_poses = 0;
    *((std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jkey_poses) = &key_poses; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[208], swigjobj, jframerate, jkey_poses, jbody_parts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_generator::generate_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_generator::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "generate_sequence", "(DLmaejava/enriched_pose_list;Lmaejava/bone_vector;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_generator");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_sequence_listener::SwigDirector_laban_sequence_sequence_listener(JNIEnv *jenv) : mae::i_sequence_listener< mae::fl::laban::laban_sequence >(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_sequence_listener::~SwigDirector_laban_sequence_sequence_listener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_laban_sequence_sequence_listener::on_sequence(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequence  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_sequence_listener< mae::fl::laban::laban_sequence >::on_sequence.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[209], swigjobj, jtimestamp, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_sequence_listener< mae::fl::laban::laban_sequence >::on_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_laban_sequence_sequence_listener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "on_sequence", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_sequence_listener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_recognition_listener::SwigDirector_laban_sequence_recognition_listener(JNIEnv *jenv) : mae::i_recognition_listener< mae::fl::laban::laban_sequence >(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_recognition_listener::~SwigDirector_laban_sequence_recognition_listener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_laban_sequence_recognition_listener::on_recognition(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequences  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_recognition_listener< mae::fl::laban::laban_sequence >::on_recognition.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequences = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jsequences) = &sequences; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[210], swigjobj, jtimestamp, jsequences);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_recognition_listener< mae::fl::laban::laban_sequence >::on_recognition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_laban_sequence_recognition_listener::on_recognition(long timestamp, std::vector< std::string > title) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jtitle  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_recognition_listener< mae::fl::laban::laban_sequence >::on_recognition.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jtitle = 0;
    *((std::vector< std::string > **)&jtitle) = &title; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[211], swigjobj, jtimestamp, jtitle);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_recognition_listener< mae::fl::laban::laban_sequence >::on_recognition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_laban_sequence_recognition_listener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "on_recognition", "(ILmaejava/laban_sequence_vector;)V", NULL 
    },
    {
      "on_recognition", "(ILmaejava/string_vector;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_recognition_listener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_skeleton_laban_sequence_movement_detector::SwigDirector_fl_skeleton_laban_sequence_movement_detector(JNIEnv *jenv) : mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(), Swig::Director(jenv) {
}

SwigDirector_fl_skeleton_laban_sequence_movement_detector::~SwigDirector_fl_skeleton_laban_sequence_movement_detector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_fl_skeleton_laban_sequence_movement_detector::detect_movement(long timestamp, double framerate, std::shared_ptr< mae::fl::fl_skeleton > skeleton, std::vector< mae::bone > body_parts) {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jdouble jframerate  ;
  jlong jskeleton  ;
  jlong jbody_parts  ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::detect_movement.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jframerate = (jdouble) framerate;
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jbody_parts = 0;
    *((std::vector< mae::bone > **)&jbody_parts) = &body_parts; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[212], swigjobj, jtimestamp, jframerate, jskeleton, jbody_parts);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::detect_movement ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::set_buffer(int size) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jsize  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_buffer.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsize = (jint) size;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[213], swigjobj, jsize);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_buffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::clear_buffer() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[214], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::add_listener(std::shared_ptr< mae::i_pose_listener > listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlistener  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlistener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jlistener) = &listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[215], swigjobj, jlistener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::remove_listener(std::shared_ptr< mae::i_pose_listener > listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jlistener  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlistener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jlistener) = &listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[216], swigjobj, jlistener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::clear_listeners() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[217], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::notify_listeners(long timestamp, std::shared_ptr< mae::general_pose > pose) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jpose  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_listeners.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jpose = 0;
    *((std::shared_ptr< mae::general_pose > **)&jpose) = &pose; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[218], swigjobj, jtimestamp, jpose);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_detector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "detect_movement", "(IDLmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;Lmaejava/bone_vector;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    },
    {
      "set_buffer", "(I)V", NULL 
    },
    {
      "clear_buffer", "()V", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "clear_listeners", "()V", NULL 
    },
    {
      "notify_listeners", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_pose_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_skeleton_laban_sequence_movement_detector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_skeleton_laban_sequence_movement_controller::SwigDirector_fl_skeleton_laban_sequence_movement_controller(JNIEnv *jenv, std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > imd, std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > isr, std::vector< mae::bone > body_parts, int pose_buffer_size, double framerate, bool debug) : mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(imd, isr, body_parts, pose_buffer_size, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_fl_skeleton_laban_sequence_movement_controller::SwigDirector_fl_skeleton_laban_sequence_movement_controller(JNIEnv *jenv, std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > ipd, std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > isg, std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > isr, std::vector< mae::bone > body_parts, int pose_buffer_size, double framerate, bool debug) : mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(ipd, isg, isr, body_parts, pose_buffer_size, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_fl_skeleton_laban_sequence_movement_controller::~SwigDirector_fl_skeleton_laban_sequence_movement_controller() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_fl_skeleton_laban_sequence_movement_controller::next_frame(long timestamp, std::shared_ptr< mae::fl::fl_skeleton > skeleton) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jskeleton  ;
  
  if (!swig_override[0]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::next_frame(timestamp,skeleton);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[219], swigjobj, jtimestamp, jskeleton);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::next_frame ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[1]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::register_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[220], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::register_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[2]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::deregister_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[221], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::clear_registered_sequences() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_registered_sequences();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[222], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_registered_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::set_no_buffer_size_update(bool updates) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jupdates  ;
  
  if (!swig_override[4]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_no_buffer_size_update(updates);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jupdates = (jboolean) updates;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[223], swigjobj, jupdates);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_no_buffer_size_update ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::clear_buffer() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[224], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_fl_skeleton_laban_sequence_movement_controller::get_current_sequence() {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[6]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_current_sequence();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[225], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_current_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::add_listener(std::shared_ptr< mae::i_pose_listener > pose_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpose_listener  ;
  
  if (!swig_override[7]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(pose_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpose_listener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jpose_listener) = &pose_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[226], swigjobj, jpose_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::remove_listener(std::shared_ptr< mae::i_pose_listener > pose_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpose_listener  ;
  
  if (!swig_override[8]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(pose_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpose_listener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jpose_listener) = &pose_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[227], swigjobj, jpose_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::add_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence_listener  ;
  
  if (!swig_override[9]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(sequence_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence_listener = 0;
    *((std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jsequence_listener) = &sequence_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[228], swigjobj, jsequence_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::remove_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence_listener  ;
  
  if (!swig_override[10]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(sequence_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence_listener = 0;
    *((std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jsequence_listener) = &sequence_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[229], swigjobj, jsequence_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::add_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrecognition_listener  ;
  
  if (!swig_override[11]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(recognition_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrecognition_listener = 0;
    *((std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jrecognition_listener) = &recognition_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[230], swigjobj, jrecognition_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::remove_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrecognition_listener  ;
  
  if (!swig_override[12]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(recognition_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrecognition_listener = 0;
    *((std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jrecognition_listener) = &recognition_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[231], swigjobj, jrecognition_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::clear_listeners() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[232], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::notify_sequence_listeners(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequence  ;
  
  if (!swig_override[14]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_sequence_listeners(timestamp,sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[233], swigjobj, jtimestamp, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_sequence_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::notify_recognition_listeners(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequences  ;
  
  if (!swig_override[15]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_recognition_listeners(timestamp,sequences);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequences = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jsequences) = &sequences; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[234], swigjobj, jtimestamp, jsequences);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_recognition_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > SwigDirector_fl_skeleton_laban_sequence_movement_controller::get_movement_detector() {
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[16]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_movement_detector();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[235], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_movement_detector ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > SwigDirector_fl_skeleton_laban_sequence_movement_controller::get_sequence_recognizer() {
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[17]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_sequence_recognizer();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[236], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_sequence_recognizer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_skeleton_laban_sequence_movement_controller::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "next_frame", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;)V", NULL 
    },
    {
      "register_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "deregister_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "clear_registered_sequences", "()V", NULL 
    },
    {
      "set_no_buffer_size_update", "(Z)V", NULL 
    },
    {
      "clear_buffer", "()V", NULL 
    },
    {
      "get_current_sequence", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "clear_listeners", "()V", NULL 
    },
    {
      "notify_sequence_listeners", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "notify_recognition_listeners", "(ILmaejava/laban_sequence_vector;)V", NULL 
    },
    {
      "get_movement_detector", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_movement_detectorT_mae__fl__fl_skeleton_mae__fl__laban__laban_sequence_t_t;", NULL 
    },
    {
      "get_sequence_recognizer", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_recognizerT_mae__fl__laban__laban_sequence_t_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_skeleton_laban_sequence_movement_controller");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 18; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_fl_movement_controller::SwigDirector_fl_movement_controller(JNIEnv *jenv, unsigned int pose_buffer_size, double framerate, bool debug) : mae::fl::fl_movement_controller(pose_buffer_size, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_fl_movement_controller::SwigDirector_fl_movement_controller(JNIEnv *jenv, std::vector< mae::bone > body_parts, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, unsigned int pose_buffer_size, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double framerate, bool debug) : mae::fl::fl_movement_controller(body_parts, column_definitions, pose_buffer_size, beats_per_measure, beat_duration, time_unit, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_fl_movement_controller::SwigDirector_fl_movement_controller(JNIEnv *jenv, std::vector< mae::bone > body_parts, std::vector< std::shared_ptr< mae::fl::laban::column_definition > > column_definitions, std::shared_ptr< mae::fl::laban::laban_sequence_generator > sequence_generator, unsigned int pose_buffer_size, unsigned int beats_per_measure, unsigned int beat_duration, mae::fl::laban::e_time_unit time_unit, double framerate, bool debug) : mae::fl::fl_movement_controller(body_parts, column_definitions, sequence_generator, pose_buffer_size, beats_per_measure, beat_duration, time_unit, framerate, debug), Swig::Director(jenv) {
}

SwigDirector_fl_movement_controller::~SwigDirector_fl_movement_controller() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_fl_movement_controller::next_frame(long timestamp, std::shared_ptr< mae::fl::fl_skeleton > skeleton) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jskeleton  ;
  
  if (!swig_override[0]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::next_frame(timestamp,skeleton);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jskeleton = 0;
    *((std::shared_ptr< mae::fl::fl_skeleton > **)&jskeleton) = &skeleton; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[237], swigjobj, jtimestamp, jskeleton);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::next_frame ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::register_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[1]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::register_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[238], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::register_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::deregister_sequence(std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence  ;
  
  if (!swig_override[2]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::deregister_sequence(sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[239], swigjobj, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::deregister_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::clear_registered_sequences() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_registered_sequences();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[240], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::clear_registered_sequences ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::set_no_buffer_size_update(bool updates) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jupdates  ;
  
  if (!swig_override[4]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_no_buffer_size_update(updates);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jupdates = (jboolean) updates;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[241], swigjobj, jupdates);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::set_no_buffer_size_update ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::clear_buffer() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[242], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::clear_buffer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_fl_movement_controller::get_current_sequence() {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[6]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_current_sequence();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[243], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_current_sequence ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_movement_controller::add_listener(std::shared_ptr< mae::i_pose_listener > pose_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpose_listener  ;
  
  if (!swig_override[7]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(pose_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpose_listener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jpose_listener) = &pose_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[244], swigjobj, jpose_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::remove_listener(std::shared_ptr< mae::i_pose_listener > pose_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpose_listener  ;
  
  if (!swig_override[8]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(pose_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpose_listener = 0;
    *((std::shared_ptr< mae::i_pose_listener > **)&jpose_listener) = &pose_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[245], swigjobj, jpose_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::add_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence_listener  ;
  
  if (!swig_override[9]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(sequence_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence_listener = 0;
    *((std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jsequence_listener) = &sequence_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[246], swigjobj, jsequence_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::remove_listener(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > sequence_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsequence_listener  ;
  
  if (!swig_override[10]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(sequence_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsequence_listener = 0;
    *((std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jsequence_listener) = &sequence_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[247], swigjobj, jsequence_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::add_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrecognition_listener  ;
  
  if (!swig_override[11]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(recognition_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrecognition_listener = 0;
    *((std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jrecognition_listener) = &recognition_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[248], swigjobj, jrecognition_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::add_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::remove_listener(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > recognition_listener) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrecognition_listener  ;
  
  if (!swig_override[12]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(recognition_listener);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrecognition_listener = 0;
    *((std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jrecognition_listener) = &recognition_listener; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[249], swigjobj, jrecognition_listener);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::remove_listener ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::clear_listeners() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[250], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::clear_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::notify_sequence_listeners(long timestamp, std::shared_ptr< mae::fl::laban::laban_sequence > sequence) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequence  ;
  
  if (!swig_override[14]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_sequence_listeners(timestamp,sequence);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequence = 0;
    *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&jsequence) = &sequence; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[251], swigjobj, jtimestamp, jsequence);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::notify_sequence_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::notify_recognition_listeners(long timestamp, std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > sequences) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jsequences  ;
  
  if (!swig_override[15]) {
    mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_recognition_listeners(timestamp,sequences);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jsequences = 0;
    *((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jsequences) = &sequences; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[252], swigjobj, jtimestamp, jsequences);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::notify_recognition_listeners ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > SwigDirector_fl_movement_controller::get_movement_detector() {
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[16]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_movement_detector();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[253], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_movement_detector ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > SwigDirector_fl_movement_controller::get_sequence_recognizer() {
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp ;
  
  if (!swig_override[17]) {
    return mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_sequence_recognizer();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[254], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_sequence_recognizer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_movement_controller::next_frame(long timestamp, std::shared_ptr< mae::general_skeleton > skeleton) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimestamp  ;
  jlong jskeleton  ;
  
  if (!swig_override[18]) {
    mae::fl::fl_movement_controller::next_frame(timestamp,skeleton);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimestamp = (jint) timestamp;
    jskeleton = 0;
    *((std::shared_ptr< mae::general_skeleton > **)&jskeleton) = &skeleton; 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[255], swigjobj, jtimestamp, jskeleton);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::next_frame ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_fl_movement_controller::set_recognition_tolerance(double tolerance) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jdouble jtolerance  ;
  
  if (!swig_override[19]) {
    mae::fl::fl_movement_controller::set_recognition_tolerance(tolerance);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtolerance = (jdouble) tolerance;
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[256], swigjobj, jtolerance);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::set_recognition_tolerance ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > SwigDirector_fl_movement_controller::get_laban_sequence_recognizer() const {
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *argp ;
  
  if (!swig_override[20]) {
    return mae::fl::fl_movement_controller::get_laban_sequence_recognizer();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[257], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence_recognizer >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_laban_sequence_recognizer ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::laban_sequence_generator > SwigDirector_fl_movement_controller::get_laban_sequence_generator() const {
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp ;
  
  if (!swig_override[21]) {
    return mae::fl::fl_movement_controller::get_laban_sequence_generator();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[258], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence_generator >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_laban_sequence_generator ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::fl_pose_detector > SwigDirector_fl_movement_controller::get_fl_pose_detector() const {
  std::shared_ptr< mae::fl::fl_pose_detector > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::fl_pose_detector > *argp ;
  
  if (!swig_override[22]) {
    return mae::fl::fl_movement_controller::get_fl_pose_detector();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[259], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::fl_pose_detector >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::fl_movement_controller::get_fl_pose_detector ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_fl_movement_controller::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "next_frame", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_skeleton_t;)V", NULL 
    },
    {
      "register_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "deregister_sequence", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "clear_registered_sequences", "()V", NULL 
    },
    {
      "set_no_buffer_size_update", "(Z)V", NULL 
    },
    {
      "clear_buffer", "()V", NULL 
    },
    {
      "get_current_sequence", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_pose_listener_t;)V", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "add_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "remove_listener", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_recognition_listenerT_mae__fl__laban__laban_sequence_t_t;)V", NULL 
    },
    {
      "clear_listeners", "()V", NULL 
    },
    {
      "notify_sequence_listeners", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;)V", NULL 
    },
    {
      "notify_recognition_listeners", "(ILmaejava/laban_sequence_vector;)V", NULL 
    },
    {
      "get_movement_detector", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_movement_detectorT_mae__fl__fl_skeleton_mae__fl__laban__laban_sequence_t_t;", NULL 
    },
    {
      "get_sequence_recognizer", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__i_sequence_recognizerT_mae__fl__laban__laban_sequence_t_t;", NULL 
    },
    {
      "next_frame", "(ILmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t;)V", NULL 
    },
    {
      "set_recognition_tolerance", "(D)V", NULL 
    },
    {
      "get_laban_sequence_recognizer", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_recognizer_t;", NULL 
    },
    {
      "get_laban_sequence_generator", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_generator_t;", NULL 
    },
    {
      "get_fl_pose_detector", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__fl_pose_detector_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/fl_movement_controller");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 23; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_bvh_spec::SwigDirector_bvh_spec(JNIEnv *jenv, std::string left_anchor, std::string right_anchor, std::string top_anchor, std::string bottom_anchor, std::map< std::string,int > string_id_map, std::map< std::string,bool > string_torso_map) : mae::fl::bvh_spec(left_anchor, right_anchor, top_anchor, bottom_anchor, string_id_map, string_torso_map), Swig::Director(jenv) {
}

SwigDirector_bvh_spec::~SwigDirector_bvh_spec() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::map< std::string,int > SwigDirector_bvh_spec::get_id_map() const {
  std::map< std::string,int > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::map< std::string,int > *argp ;
  
  if (!swig_override[0]) {
    return mae::fl::bvh_spec::get_id_map();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[260], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::map< std::string,int > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::map< std::string,int >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_id_map ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::map< std::string,bool > SwigDirector_bvh_spec::get_torso_map() const {
  std::map< std::string,bool > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::map< std::string,bool > *argp ;
  
  if (!swig_override[1]) {
    return mae::fl::bvh_spec::get_torso_map();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[261], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::map< std::string,bool > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::map< std::string,bool >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_torso_map ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_spec::get_left_anchor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::bvh_spec::get_left_anchor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[262], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_left_anchor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_spec::get_right_anchor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::fl::bvh_spec::get_right_anchor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[263], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_right_anchor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_spec::get_top_anchor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[4]) {
    return mae::fl::bvh_spec::get_top_anchor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[264], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_top_anchor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_spec::get_bottom_anchor() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[5]) {
    return mae::fl::bvh_spec::get_bottom_anchor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[265], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_spec::get_bottom_anchor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_bvh_spec::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_id_map", "()Lmaejava/string_int_map;", NULL 
    },
    {
      "get_torso_map", "()Lmaejava/string_bool_map;", NULL 
    },
    {
      "get_left_anchor", "()Ljava/lang/String;", NULL 
    },
    {
      "get_right_anchor", "()Ljava/lang/String;", NULL 
    },
    {
      "get_top_anchor", "()Ljava/lang/String;", NULL 
    },
    {
      "get_bottom_anchor", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/bvh_spec");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_bvh_controller::SwigDirector_bvh_controller(JNIEnv *jenv) : mae::fl::bvh_controller(), Swig::Director(jenv) {
}

SwigDirector_bvh_controller::~SwigDirector_bvh_controller() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_bvh_controller::bvh_str(std::vector< std::shared_ptr< mae::general_skeleton > > data) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  
  if (!swig_override[0]) {
    return mae::fl::bvh_controller::bvh_str(data);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::vector< std::shared_ptr< mae::general_skeleton > > **)&jdata) = &data; 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[266], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::bvh_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_controller::bvh_str(std::vector< std::shared_ptr< mae::general_skeleton > > data, double framerate) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  jdouble jframerate  ;
  
  if (!swig_override[1]) {
    return mae::fl::bvh_controller::bvh_str(data,framerate);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::vector< std::shared_ptr< mae::general_skeleton > > **)&jdata) = &data; 
    jframerate = (jdouble) framerate;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[267], swigjobj, jdata, jframerate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::bvh_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_bvh_controller::bvh_str(std::shared_ptr< mae::general_skeleton > data) {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  
  if (!swig_override[2]) {
    return mae::fl::bvh_controller::bvh_str(data);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< mae::general_skeleton > **)&jdata) = &data; 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[268], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::bvh_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_bvh_controller::print_bvh_file(std::vector< std::shared_ptr< mae::general_skeleton > > data, std::string filename) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  jstring jfilename  ;
  
  if (!swig_override[3]) {
    mae::fl::bvh_controller::print_bvh_file(data,filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::vector< std::shared_ptr< mae::general_skeleton > > **)&jdata) = &data; 
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[269], swigjobj, jdata, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::print_bvh_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_bvh_controller::print_bvh_file(std::shared_ptr< mae::general_skeleton > data, std::string filename) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  jstring jfilename  ;
  
  if (!swig_override[4]) {
    mae::fl::bvh_controller::print_bvh_file(data,filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::shared_ptr< mae::general_skeleton > **)&jdata) = &data; 
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_maeJNI, Swig::director_methids[270], swigjobj, jdata, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::print_bvh_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > SwigDirector_bvh_controller::read_bvh_str(std::string bvh_str, std::shared_ptr< mae::fl::bvh_spec > spec) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jbvh_str  ;
  jlong jspec  ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *argp ;
  
  if (!swig_override[5]) {
    return mae::fl::bvh_controller::read_bvh_str(bvh_str,spec);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbvh_str = jenv->NewStringUTF((&bvh_str)->c_str()); 
    jspec = 0;
    *((std::shared_ptr< mae::fl::bvh_spec > **)&jspec) = &spec; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[271], swigjobj, jbvh_str, jspec);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::read_bvh_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > SwigDirector_bvh_controller::read_bvh_file(std::string filename, std::shared_ptr< mae::fl::bvh_spec > spec) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilename  ;
  jlong jspec  ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *argp ;
  
  if (!swig_override[6]) {
    return mae::fl::bvh_controller::read_bvh_file(filename,spec);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jspec = 0;
    *((std::shared_ptr< mae::fl::bvh_spec > **)&jspec) = &spec; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[272], swigjobj, jfilename, jspec);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::bvh_controller::read_bvh_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_bvh_controller::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "bvh_str", "(Lmaejava/general_skeleton_vector;)Ljava/lang/String;", NULL 
    },
    {
      "bvh_str", "(Lmaejava/general_skeleton_vector;D)Ljava/lang/String;", NULL 
    },
    {
      "bvh_str", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t;)Ljava/lang/String;", NULL 
    },
    {
      "print_bvh_file", "(Lmaejava/general_skeleton_vector;Ljava/lang/String;)V", NULL 
    },
    {
      "print_bvh_file", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__general_skeleton_t;Ljava/lang/String;)V", NULL 
    },
    {
      "read_bvh_str", "(Ljava/lang/String;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__bvh_spec_t;)Lmaejava/general_skeleton_vector_double_pair;", NULL 
    },
    {
      "read_bvh_file", "(Ljava/lang/String;Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__bvh_spec_t;)Lmaejava/general_skeleton_vector_double_pair;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/bvh_controller");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_laban_sequence_reader::SwigDirector_laban_sequence_reader(JNIEnv *jenv) : mae::fl::laban::laban_sequence_reader(), Swig::Director(jenv) {
}

SwigDirector_laban_sequence_reader::~SwigDirector_laban_sequence_reader() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_laban_sequence_reader::read_sequence_file(std::string file_name) {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfile_name  ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::laban_sequence_reader::read_sequence_file(file_name);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfile_name = jenv->NewStringUTF((&file_name)->c_str()); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[273], swigjobj, jfile_name);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_reader::read_sequence_file ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::laban_sequence > SwigDirector_laban_sequence_reader::read_sequence_str(std::string xml_string) {
  std::shared_ptr< mae::fl::laban::laban_sequence > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jxml_string  ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::laban_sequence_reader::read_sequence_str(xml_string);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jxml_string = jenv->NewStringUTF((&xml_string)->c_str()); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[274], swigjobj, jxml_string);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::laban_sequence >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::laban_sequence_reader::read_sequence_str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_laban_sequence_reader::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "read_sequence_file", "(Ljava/lang/String;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    },
    {
      "read_sequence_str", "(Ljava/lang/String;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__laban_sequence_t;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/laban_sequence_reader");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_symbol::SwigDirector_i_symbol(JNIEnv *jenv) : mae::fl::laban::mv::i_symbol(), Swig::Director(jenv) {
}

SwigDirector_i_symbol::~SwigDirector_i_symbol() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_i_symbol::equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_symbol::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[275], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_symbol::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_symbol::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_symbol::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[276], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_symbol::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_symbol::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_symbol::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[279], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_symbol::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_symbol::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_symbol::str.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[281], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_symbol::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_symbol::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_symbol");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_movement::SwigDirector_movement(JNIEnv *jenv, int column, unsigned int measure, double beat, double duration, std::shared_ptr< mae::fl::laban::mv::i_symbol > symbol, bool hold, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign) : mae::fl::laban::movement(column, measure, beat, duration, symbol, hold, pre_sign), Swig::Director(jenv) {
}

SwigDirector_movement::~SwigDirector_movement() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_movement::get_column() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::movement::get_column();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[282], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::get_column ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_movement::get_measure() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::movement::get_measure();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[283], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::get_measure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_movement::get_beat() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::movement::get_beat();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[284], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::get_beat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_movement::get_duration() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::movement::get_duration();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[285], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::get_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_movement::equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::movement::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[286], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_movement::symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::movement::symbol_equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[287], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::symbol_equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_movement::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::movement::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[288], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_movement::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::movement::svg(im_width,im_height,max_column,measures,beats_per_measure);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[291], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_movement::recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  jlong jmeasure  ;
  jdouble jbeat  ;
  jdouble jduration  ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[10]) {
    return mae::fl::laban::movement::recreate(column_mapping,measure,beat,duration);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jmeasure = (jlong) measure;
    jbeat = (jdouble) beat;
    jduration = (jdouble) duration;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[292], swigjobj, jcolumn_mapping, jmeasure, jbeat, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_movement::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::movement::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[293], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::movement::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_movement::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_column", "()I", NULL 
    },
    {
      "get_measure", "()J", NULL 
    },
    {
      "get_beat", "()D", NULL 
    },
    {
      "get_duration", "()D", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "symbol_equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;JDD)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/movement");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_path::SwigDirector_path(JNIEnv *jenv, mae::fl::laban::e_path_type type, unsigned int measure, double beat, double duration) : mae::fl::laban::path(type, measure, beat, duration), Swig::Director(jenv) {
}

SwigDirector_path::~SwigDirector_path() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_path::get_column() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::path::get_column();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[294], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::get_column ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_path::get_measure() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::path::get_measure();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[295], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::get_measure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_path::get_beat() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::path::get_beat();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[296], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::get_beat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_path::get_duration() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::path::get_duration();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[297], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::get_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_path::equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::path::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[298], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_path::symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::path::symbol_equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[299], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::symbol_equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_path::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::path::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[300], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_path::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::path::svg(im_width,im_height,max_column,measures,beats_per_measure);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[303], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_path::recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  jlong jmeasure  ;
  jdouble jbeat  ;
  jdouble jduration  ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[10]) {
    return mae::fl::laban::path::recreate(column_mapping,measure,beat,duration);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jmeasure = (jlong) measure;
    jbeat = (jdouble) beat;
    jduration = (jdouble) duration;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[304], swigjobj, jcolumn_mapping, jmeasure, jbeat, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_path::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::path::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[305], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::path::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_path::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_column", "()I", NULL 
    },
    {
      "get_measure", "()J", NULL 
    },
    {
      "get_beat", "()D", NULL 
    },
    {
      "get_duration", "()D", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "symbol_equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;JDD)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/path");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_dynamics_sign::SwigDirector_i_dynamics_sign(JNIEnv *jenv) : mae::fl::laban::mv::i_dynamics_sign(), Swig::Director(jenv) {
}

SwigDirector_i_dynamics_sign::~SwigDirector_i_dynamics_sign() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_i_dynamics_sign::equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_dynamics_sign::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[306], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_dynamics_sign::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_dynamics_sign::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_dynamics_sign::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[307], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_dynamics_sign::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_dynamics_sign::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_dynamics_sign");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_relationship_endpoint::SwigDirector_relationship_endpoint(JNIEnv *jenv, int column, bool active, std::shared_ptr< mae::fl::laban::ps::i_pre_sign > pre_sign, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics) : mae::fl::laban::mv::relationship_endpoint(column, active, pre_sign, dynamics), Swig::Director(jenv) {
}

SwigDirector_relationship_endpoint::~SwigDirector_relationship_endpoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_relationship_endpoint::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::relationship_endpoint::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[310], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::relationship_endpoint::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > SwigDirector_relationship_endpoint::recreate(std::map< int,int > column_mapping) const {
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::mv::relationship_endpoint::recreate(column_mapping);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[313], swigjobj, jcolumn_mapping);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::relationship_endpoint::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_relationship_endpoint::equals(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::mv::relationship_endpoint::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[314], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::relationship_endpoint::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_relationship_endpoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__relationship_endpoint_t;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__relationship_endpoint_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/relationship_endpoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_relationship_bow::SwigDirector_relationship_bow(JNIEnv *jenv, mae::fl::laban::e_relationship_type type, bool grasping, bool passing, bool hold, unsigned int measure, double beat, std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > left_endpoint, std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > right_endpoint) : mae::fl::laban::relationship_bow(type, grasping, passing, hold, measure, beat, left_endpoint, right_endpoint), Swig::Director(jenv) {
}

SwigDirector_relationship_bow::~SwigDirector_relationship_bow() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_relationship_bow::get_column() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::relationship_bow::get_column();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[315], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::get_column ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_relationship_bow::get_measure() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::relationship_bow::get_measure();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[316], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::get_measure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_relationship_bow::get_beat() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::relationship_bow::get_beat();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[317], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::get_beat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_relationship_bow::get_duration() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::relationship_bow::get_duration();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[318], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::get_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_relationship_bow::equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::relationship_bow::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[319], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_relationship_bow::symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::relationship_bow::symbol_equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[320], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::symbol_equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_relationship_bow::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::relationship_bow::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[321], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_relationship_bow::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::relationship_bow::svg(im_width,im_height,max_column,measures,beats_per_measure);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[324], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_relationship_bow::recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  jlong jmeasure  ;
  jdouble jbeat  ;
  jdouble jduration  ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[10]) {
    return mae::fl::laban::relationship_bow::recreate(column_mapping,measure,beat,duration);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jmeasure = (jlong) measure;
    jbeat = (jdouble) beat;
    jduration = (jdouble) duration;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[325], swigjobj, jcolumn_mapping, jmeasure, jbeat, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_relationship_bow::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::relationship_bow::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[326], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::relationship_bow::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_relationship_bow::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_column", "()I", NULL 
    },
    {
      "get_measure", "()J", NULL 
    },
    {
      "get_beat", "()D", NULL 
    },
    {
      "get_duration", "()D", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "symbol_equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;JDD)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/relationship_bow");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_degree_sign::SwigDirector_i_degree_sign(JNIEnv *jenv) : mae::fl::laban::mv::i_degree_sign(), Swig::Director(jenv) {
}

SwigDirector_i_degree_sign::~SwigDirector_i_degree_sign() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_i_degree_sign::equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_degree_sign::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[327], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_degree_sign::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_degree_sign::xml(unsigned int indent, std::string namesp, bool print_type) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  jboolean jprint_type  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_degree_sign::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jprint_type = (jboolean) print_type;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[328], swigjobj, jindent, jnamesp, jprint_type);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_degree_sign::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_degree_sign::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::mv::i_degree_sign::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[332], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::i_degree_sign::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_degree_sign::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;Z)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_degree_sign");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_pin::SwigDirector_pin(JNIEnv *jenv, mae::fl::laban::mv::e_level level, int horizontal) : mae::fl::laban::mv::pin(level, horizontal), Swig::Director(jenv) {
}

SwigDirector_pin::~SwigDirector_pin() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_pin::equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::pin::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[334], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::pin::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_pin::xml(unsigned int indent, std::string namesp, bool print_type) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  jboolean jprint_type  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::pin::xml(indent,namesp,print_type);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jprint_type = (jboolean) print_type;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[335], swigjobj, jindent, jnamesp, jprint_type);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::pin::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_pin::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::mv::pin::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[339], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::pin::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_pin::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;Z)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/pin");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_room_direction::SwigDirector_room_direction(JNIEnv *jenv, unsigned int measure, double beat, std::shared_ptr< mae::fl::laban::mv::pin > direction) : mae::fl::laban::room_direction(measure, beat, direction), Swig::Director(jenv) {
}

SwigDirector_room_direction::~SwigDirector_room_direction() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


int SwigDirector_room_direction::get_column() const {
  int c_result = SwigValueInit< int >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::room_direction::get_column();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_maeJNI, Swig::director_methids[341], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::get_column ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

unsigned int SwigDirector_room_direction::get_measure() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::room_direction::get_measure();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[342], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (unsigned int)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::get_measure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_room_direction::get_beat() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    return mae::fl::laban::room_direction::get_beat();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[343], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::get_beat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

double SwigDirector_room_direction::get_duration() const {
  double c_result = SwigValueInit< double >() ;
  jdouble jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::room_direction::get_duration();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jdouble) jenv->CallStaticDoubleMethod(Swig::jclass_maeJNI, Swig::director_methids[344], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (double)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::get_duration ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_room_direction::equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::room_direction::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[345], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_room_direction::symbol_equals(std::shared_ptr< mae::fl::laban::i_movement > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::room_direction::symbol_equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::i_movement > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[346], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::symbol_equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_room_direction::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::room_direction::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[347], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_room_direction::svg(unsigned int im_width, unsigned int im_height, unsigned int max_column, unsigned int measures, unsigned int beats_per_measure) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jim_width  ;
  jlong jim_height  ;
  jlong jmax_column  ;
  jlong jmeasures  ;
  jlong jbeats_per_measure  ;
  
  if (!swig_override[9]) {
    return mae::fl::laban::room_direction::svg(im_width,im_height,max_column,measures,beats_per_measure);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jim_width = (jlong) im_width;
    jim_height = (jlong) im_height;
    jmax_column = (jlong) max_column;
    jmeasures = (jlong) measures;
    jbeats_per_measure = (jlong) beats_per_measure;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[350], swigjobj, jim_width, jim_height, jmax_column, jmeasures, jbeats_per_measure);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::i_movement > SwigDirector_room_direction::recreate(std::map< int,int > column_mapping, unsigned int measure, double beat, double duration) const {
  std::shared_ptr< mae::fl::laban::i_movement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolumn_mapping  ;
  jlong jmeasure  ;
  jdouble jbeat  ;
  jdouble jduration  ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp ;
  
  if (!swig_override[10]) {
    return mae::fl::laban::room_direction::recreate(column_mapping,measure,beat,duration);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcolumn_mapping = 0;
    *((std::map< int,int > **)&jcolumn_mapping) = &column_mapping; 
    jmeasure = (jlong) measure;
    jbeat = (jdouble) beat;
    jduration = (jdouble) duration;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[351], swigjobj, jcolumn_mapping, jmeasure, jbeat, jduration);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::i_movement >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::recreate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_room_direction::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    return mae::fl::laban::room_direction::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[352], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::room_direction::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_room_direction::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "get_column", "()I", NULL 
    },
    {
      "get_measure", "()J", NULL 
    },
    {
      "get_beat", "()D", NULL 
    },
    {
      "get_duration", "()D", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "symbol_equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(JJJJJ)Ljava/lang/String;", NULL 
    },
    {
      "recreate", "(Lmaejava/int_int_map;JDD)Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__i_movement_t;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/room_direction");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 12; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_accent_sign::SwigDirector_accent_sign(JNIEnv *jenv, unsigned int accent) : mae::fl::laban::mv::accent_sign(accent), Swig::Director(jenv) {
}

SwigDirector_accent_sign::~SwigDirector_accent_sign() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_accent_sign::equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::accent_sign::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[353], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::accent_sign::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_accent_sign::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::accent_sign::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[354], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::accent_sign::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_accent_sign::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/accent_sign");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_dynamic_sign::SwigDirector_dynamic_sign(JNIEnv *jenv, mae::fl::laban::mv::e_dynamic dynamic) : mae::fl::laban::mv::dynamic_sign(dynamic), Swig::Director(jenv) {
}

SwigDirector_dynamic_sign::~SwigDirector_dynamic_sign() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_dynamic_sign::equals(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::dynamic_sign::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[357], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::dynamic_sign::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_dynamic_sign::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::dynamic_sign::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[358], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::dynamic_sign::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_dynamic_sign::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_dynamics_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/dynamic_sign");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_cancellation_symbol::SwigDirector_cancellation_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_cancel cancel) : mae::fl::laban::mv::cancellation_symbol(cancel), Swig::Director(jenv) {
}

SwigDirector_cancellation_symbol::~SwigDirector_cancellation_symbol() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_cancellation_symbol::equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::cancellation_symbol::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[361], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::cancellation_symbol::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_cancellation_symbol::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::cancellation_symbol::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[362], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::cancellation_symbol::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_cancellation_symbol::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::mv::cancellation_symbol::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[365], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::cancellation_symbol::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_cancellation_symbol::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::mv::cancellation_symbol::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[367], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::cancellation_symbol::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_cancellation_symbol::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/cancellation_symbol");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_space_measurement::SwigDirector_space_measurement(JNIEnv *jenv, mae::fl::laban::mv::e_space type, unsigned int degree, mae::fl::laban::mv::e_space_direction direction) : mae::fl::laban::mv::space_measurement(type, degree, direction), Swig::Director(jenv) {
}

SwigDirector_space_measurement::~SwigDirector_space_measurement() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_space_measurement::equals(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::space_measurement::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[368], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::space_measurement::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_space_measurement::xml(unsigned int indent, std::string namesp, bool print_type) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  jboolean jprint_type  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::space_measurement::xml(indent,namesp,print_type);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jprint_type = (jboolean) print_type;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[369], swigjobj, jindent, jnamesp, jprint_type);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::space_measurement::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_space_measurement::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::mv::space_measurement::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[373], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::space_measurement::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_space_measurement::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::mv::space_measurement::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[375], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::space_measurement::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_space_measurement::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_degree_sign_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;Z)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/space_measurement");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_direction_symbol::SwigDirector_direction_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_level vertical, mae::fl::laban::mv::e_direction horizontal, std::shared_ptr< mae::fl::laban::mv::pin > modification_pin, std::shared_ptr< mae::fl::laban::mv::pin > relationship_pin, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics, std::shared_ptr< mae::fl::laban::mv::space_measurement > space_measurement, mae::fl::laban::mv::e_contact_hook contact_hook) : mae::fl::laban::mv::direction_symbol(vertical, horizontal, modification_pin, relationship_pin, dynamics, space_measurement, contact_hook), Swig::Director(jenv) {
}

SwigDirector_direction_symbol::~SwigDirector_direction_symbol() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_direction_symbol::equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::direction_symbol::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[376], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::direction_symbol::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_direction_symbol::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::direction_symbol::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[377], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::direction_symbol::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_direction_symbol::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::mv::direction_symbol::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[380], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::direction_symbol::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_direction_symbol::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::mv::direction_symbol::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[382], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::direction_symbol::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_direction_symbol::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/direction_symbol");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_turn_symbol::SwigDirector_turn_symbol(JNIEnv *jenv, mae::fl::laban::mv::e_turn_direction direction, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics, std::shared_ptr< mae::fl::laban::mv::i_degree_sign > degree) : mae::fl::laban::mv::turn_symbol(direction, dynamics, degree), Swig::Director(jenv) {
}

SwigDirector_turn_symbol::~SwigDirector_turn_symbol() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_turn_symbol::equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::turn_symbol::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[383], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::turn_symbol::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_turn_symbol::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::turn_symbol::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[384], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::turn_symbol::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_turn_symbol::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::mv::turn_symbol::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[387], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::turn_symbol::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_turn_symbol::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::mv::turn_symbol::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[389], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::turn_symbol::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_turn_symbol::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/turn_symbol");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_vibration_symbol::SwigDirector_vibration_symbol(JNIEnv *jenv, std::shared_ptr< mae::fl::laban::mv::pin > displacement1, std::shared_ptr< mae::fl::laban::mv::pin > displacement2, std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > dynamics) : mae::fl::laban::mv::vibration_symbol(displacement1, displacement2, dynamics), Swig::Director(jenv) {
}

SwigDirector_vibration_symbol::~SwigDirector_vibration_symbol() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_vibration_symbol::equals(std::shared_ptr< mae::fl::laban::mv::i_symbol > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::mv::vibration_symbol::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[390], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::vibration_symbol::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_vibration_symbol::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[1]) {
    return mae::fl::laban::mv::vibration_symbol::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[391], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::vibration_symbol::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_vibration_symbol::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[4]) {
    return mae::fl::laban::mv::vibration_symbol::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[394], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::vibration_symbol::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_vibration_symbol::str() const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::mv::vibration_symbol::str();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[396], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::mv::vibration_symbol::str ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_vibration_symbol::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__mv__i_symbol_t;)Z", NULL 
    },
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "str", "()Ljava/lang/String;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/vibration_symbol");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_part::SwigDirector_i_part(JNIEnv *jenv) : mae::fl::laban::ps::i_part(), Swig::Director(jenv) {
}

SwigDirector_i_part::~SwigDirector_i_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_i_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_part::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[397], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_part::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[400], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_part::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_part::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[402], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_endpoint::SwigDirector_i_endpoint(JNIEnv *jenv) : mae::fl::laban::ps::i_endpoint(), Swig::Director(jenv) {
}

SwigDirector_i_endpoint::~SwigDirector_i_endpoint() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_i_endpoint::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_endpoint::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[403], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_endpoint::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_endpoint::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_endpoint::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[406], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_endpoint::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_endpoint::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_endpoint::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[408], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_endpoint::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::ps::i_endpoint > SwigDirector_i_endpoint::get_fixed_end() const {
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_endpoint::get_fixed_end.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[409], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::ps::i_endpoint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_endpoint::get_fixed_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_endpoint::equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_endpoint::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[410], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_endpoint::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_endpoint::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "get_fixed_end", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_endpoint");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_area_part::SwigDirector_area_part(JNIEnv *jenv, mae::fl::laban::ps::e_area area) : mae::fl::laban::ps::area_part(area), Swig::Director(jenv) {
}

SwigDirector_area_part::~SwigDirector_area_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_area_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::area_part::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[411], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::area_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_area_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::area_part::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[414], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::area_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_area_part::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::area_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[416], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::area_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::ps::i_endpoint > SwigDirector_area_part::get_fixed_end() const {
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::ps::area_part::get_fixed_end();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[417], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::ps::i_endpoint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::area_part::get_fixed_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_area_part::equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::ps::area_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[418], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::area_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_area_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "get_fixed_end", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/area_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_body_part::SwigDirector_body_part(JNIEnv *jenv, mae::fl::laban::ps::e_side side, std::shared_ptr< mae::fl::laban::ps::i_part > part) : mae::fl::laban::ps::body_part(side, part), Swig::Director(jenv) {
}

SwigDirector_body_part::~SwigDirector_body_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_body_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::body_part::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[419], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::body_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_body_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::body_part::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[422], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::body_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_body_part::equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::body_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[424], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::body_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_body_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/body_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_i_limb::SwigDirector_i_limb(JNIEnv *jenv) : mae::fl::laban::ps::i_limb(), Swig::Director(jenv) {
}

SwigDirector_i_limb::~SwigDirector_i_limb() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_i_limb::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_limb::xml.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[425], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_limb::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_i_limb::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_limb::svg.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[428], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_limb::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_limb::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[430], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_i_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method mae::fl::laban::ps::i_limb::equals.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_limb > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[431], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::i_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_i_limb::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/i_limb");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_custom_limb::SwigDirector_custom_limb(JNIEnv *jenv, std::shared_ptr< mae::fl::laban::ps::i_endpoint > extremity, std::shared_ptr< mae::fl::laban::ps::i_endpoint > fixed_end) : mae::fl::laban::ps::custom_limb(extremity, fixed_end), Swig::Director(jenv) {
}

SwigDirector_custom_limb::~SwigDirector_custom_limb() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_custom_limb::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::custom_limb::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[432], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::custom_limb::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_custom_limb::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::custom_limb::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[435], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::custom_limb::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_custom_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::custom_limb::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[437], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::custom_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_custom_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::ps::custom_limb::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_limb > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[438], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::custom_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_custom_limb::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/custom_limb");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_default_limb::SwigDirector_default_limb(JNIEnv *jenv, mae::fl::laban::ps::e_limb limb) : mae::fl::laban::ps::default_limb(limb), Swig::Director(jenv) {
}

SwigDirector_default_limb::~SwigDirector_default_limb() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_default_limb::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::default_limb::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[439], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::default_limb::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_default_limb::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::default_limb::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[442], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::default_limb::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_default_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::default_limb::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[444], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::default_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_default_limb::equals(std::shared_ptr< mae::fl::laban::ps::i_limb > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::ps::default_limb::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_limb > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[445], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::default_limb::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_default_limb::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_limb_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/default_limb");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_digit_part::SwigDirector_digit_part(JNIEnv *jenv, mae::fl::laban::ps::e_digit digit, unsigned int knuckle) : mae::fl::laban::ps::digit_part(digit, knuckle), Swig::Director(jenv) {
}

SwigDirector_digit_part::~SwigDirector_digit_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_digit_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::digit_part::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[446], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::digit_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_digit_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::digit_part::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[449], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::digit_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_digit_part::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::digit_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[451], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::digit_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::ps::i_endpoint > SwigDirector_digit_part::get_fixed_end() const {
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::ps::digit_part::get_fixed_end();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[452], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::ps::i_endpoint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::digit_part::get_fixed_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_digit_part::equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::ps::digit_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[453], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::digit_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_digit_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "get_fixed_end", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/digit_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_surface_part::SwigDirector_surface_part(JNIEnv *jenv, mae::fl::laban::ps::e_limb_side lside, std::shared_ptr< mae::fl::laban::ps::i_limb > limb) : mae::fl::laban::ps::surface_part(lside, limb), Swig::Director(jenv) {
}

SwigDirector_surface_part::~SwigDirector_surface_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_surface_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::surface_part::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[454], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::surface_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_surface_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::surface_part::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[457], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::surface_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_surface_part::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::surface_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[459], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::surface_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_surface_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/surface_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_joint_part::SwigDirector_joint_part(JNIEnv *jenv, mae::fl::laban::ps::e_joint joint) : mae::fl::laban::ps::joint_part(joint), Swig::Director(jenv) {
}

SwigDirector_joint_part::~SwigDirector_joint_part() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_joint_part::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::joint_part::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[460], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::joint_part::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_joint_part::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::joint_part::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[463], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::joint_part::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_joint_part::equals(std::shared_ptr< mae::fl::laban::ps::i_part > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::joint_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[465], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::joint_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::shared_ptr< mae::fl::laban::ps::i_endpoint > SwigDirector_joint_part::get_fixed_end() const {
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp ;
  
  if (!swig_override[6]) {
    return mae::fl::laban::ps::joint_part::get_fixed_end();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_maeJNI, Swig::director_methids[466], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::shared_ptr< mae::fl::laban::ps::i_endpoint >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::joint_part::get_fixed_end ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_joint_part::equals(std::shared_ptr< mae::fl::laban::ps::i_endpoint > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[7]) {
    return mae::fl::laban::ps::joint_part::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[467], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::joint_part::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_joint_part::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_part_t;)Z", NULL 
    },
    {
      "get_fixed_end", "()Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_endpoint_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/joint_part");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_prop::SwigDirector_prop(JNIEnv *jenv, std::string name, std::string description) : mae::fl::laban::ps::prop(name, description), Swig::Director(jenv) {
}

SwigDirector_prop::~SwigDirector_prop() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_prop::xml(unsigned int indent, std::string namesp) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jindent  ;
  jstring jnamesp  ;
  
  if (!swig_override[0]) {
    return mae::fl::laban::ps::prop::xml(indent,namesp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jindent = (jlong) indent;
    jnamesp = jenv->NewStringUTF((&namesp)->c_str()); 
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[468], swigjobj, jindent, jnamesp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::prop::xml ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

std::string SwigDirector_prop::svg(std::string identifier, double posx, double posy, double width, double height, bool left) const {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jidentifier  ;
  jdouble jposx  ;
  jdouble jposy  ;
  jdouble jwidth  ;
  jdouble jheight  ;
  jboolean jleft  ;
  
  if (!swig_override[3]) {
    return mae::fl::laban::ps::prop::svg(identifier,posx,posy,width,height,left);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jidentifier = jenv->NewStringUTF((&identifier)->c_str()); 
    jposx = (jdouble) posx;
    jposy = (jdouble) posy;
    jwidth = (jdouble) width;
    jheight = (jdouble) height;
    jleft = (jboolean) left;
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_maeJNI, Swig::director_methids[471], swigjobj, jidentifier, jposx, jposy, jwidth, jheight, jleft);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    if(!jresult) {
      if (!jenv->ExceptionCheck()) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      }
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::prop::svg ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_prop::equals(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > a) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong ja  ;
  
  if (!swig_override[5]) {
    return mae::fl::laban::ps::prop::equals(a);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    ja = 0;
    *((std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&ja) = &a; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_maeJNI, Swig::director_methids[473], swigjobj, ja);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in mae::fl::laban::ps::prop::equals ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_prop::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "xml", "(JLjava/lang/String;)Ljava/lang/String;", NULL 
    },
    {
      "xml", "(J)Ljava/lang/String;", NULL 
    },
    {
      "xml", "()Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDDZ)Ljava/lang/String;", NULL 
    },
    {
      "svg", "(Ljava/lang/String;DDDD)Ljava/lang/String;", NULL 
    },
    {
      "equals", "(Lmaejava/SWIGTYPE_p_std__shared_ptrT_mae__fl__laban__ps__i_pre_sign_t;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("maejava/prop");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_maejava_maeJNI_INVALID_1BONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::INVALID_BONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::HEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_LEFT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_RIGHT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1bone_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::e_bone arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = mae::e_bone_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1bone_1c_1to_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::e_bone arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (int)mae::e_bone_c::to_int(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1bone_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::e_bone_c::vec();
  *(std::vector< mae::e_bone > **)&jresult = new std::vector< mae::e_bone >((const std::vector< mae::e_bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1bone_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::e_bone)mae::e_bone_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1bone_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::e_bone_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone_c *)new mae::e_bone_c();
  *(mae::e_bone_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1bone_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::e_bone_c *arg1 = (mae::e_bone_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::e_bone_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1int_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1int_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_int_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_int_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_int_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_int_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1int_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1bone_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::e_bone > *)new std::vector< mae::e_bone >();
  *(std::vector< mae::e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1bone_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::e_bone >::size_type arg1 ;
  std::vector< mae::e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::e_bone >::size_type)jarg1; 
  result = (std::vector< mae::e_bone > *)new std::vector< mae::e_bone >(arg1);
  *(std::vector< mae::e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1bone_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  result = ((std::vector< mae::e_bone > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1bone_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  result = ((std::vector< mae::e_bone > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1bone_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (std::vector< enum mae::e_bone >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1bone_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  result = (bool)((std::vector< mae::e_bone > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1bone_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1bone_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::value_type *arg2 = 0 ;
  std::vector< enum mae::e_bone >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  temp2 = (std::vector< enum mae::e_bone >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::e_bone >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1bone_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::e_bone >::value_type *) &std_vector_Sl_mae_e_bone_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1bone_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_bone >::value_type *arg3 = 0 ;
  std::vector< enum mae::e_bone >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::e_bone >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_e_bone_Sg__set(arg1,arg2,(enum mae::e_bone const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1bone_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::bone *)new SwigDirector_bone(jenv);
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (mae::bone *)new SwigDirector_bone(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (mae::bone *)new SwigDirector_bone(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (mae::bone *)new SwigDirector_bone(jenv,arg1);
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1bone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1idSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->mae::bone::get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bone_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::bone const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bone_1get_1nameSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::bone const *)arg1)->mae::bone::get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->get_from();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1fromSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->mae::bone::get_from();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->get_to();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1toSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->mae::bone::get_to();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_bone_1has_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::bone const *)arg1)->has_middle_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_bone_1has_1middle_1jointSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::bone const *)arg1)->mae::bone::has_middle_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->get_middle_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1get_1middle_1jointSwigExplicitbone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::bone const *)arg1)->mae::bone::get_middle_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bone_1default_1bones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::bone::default_bones();
  *(std::vector< mae::bone > **)&jresult = new std::vector< mae::bone >((const std::vector< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1RESERVED_1TOP_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_TOP_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_bone_1RESERVED_1RIGHT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_RIGHT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::bone > *obj = *((std::shared_ptr< mae::bone > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_bone *director = dynamic_cast<SwigDirector_bone *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::bone *obj = *((mae::bone **)&objarg);
  SwigDirector_bone *director = dynamic_cast<SwigDirector_bone *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::bone > *)new std::vector< mae::bone >();
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bone_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< mae::bone >::size_type arg1 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< mae::bone >::size_type)jarg1; 
  result = (std::vector< mae::bone > *)new std::vector< mae::bone >(arg1);
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bone_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = ((std::vector< mae::bone > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bone_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = ((std::vector< mae::bone > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (std::vector< mae::bone >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_bone_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = (bool)((std::vector< mae::bone > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  
  arg2 = (std::vector< mae::bone >::value_type *)((*(std::shared_ptr< const mae::bone > **)&jarg2) ? (*(std::shared_ptr< const mae::bone > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< mae::bone >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bone_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< mae::bone >::value_type *) &std_vector_Sl_mae_bone_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::shared_ptr< const mae::bone > **)&jresult = new std::shared_ptr< const mae::bone >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bone_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = (std::vector< mae::bone >::value_type *)((*(std::shared_ptr< const mae::bone > **)&jarg3) ? (*(std::shared_ptr< const mae::bone > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_mae_bone_Sg__set(arg1,arg2,(mae::bone const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1bone_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1pose(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_pose *)new SwigDirector_general_pose(jenv);
  
  *(std::shared_ptr<  mae::general_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_direction(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1directionSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->mae::general_pose::set_direction(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_general_1pose_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)((mae::general_pose const *)arg1)->get_direction(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_general_1pose_1get_1directionSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)((mae::general_pose const *)arg1)->mae::general_pose::get_direction(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->set_distance(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1distanceSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->mae::general_pose::set_distance(arg2,arg3,arg4);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1pose_1get_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)((mae::general_pose const *)arg1)->get_distance(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1pose_1get_1distanceSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)((mae::general_pose const *)arg1)->mae::general_pose::get_distance(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  double arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set_rotation(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1set_1rotationSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  double arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->mae::general_pose::set_rotation(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1pose_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (double)((mae::general_pose const *)arg1)->get_rotation(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1pose_1get_1rotationSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (double)((mae::general_pose const *)arg1)->mae::general_pose::get_rotation(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1pose_1get_1body_1parts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->get_body_parts();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1pose_1get_1body_1partsSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->mae::general_pose::get_body_parts();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1pose_1get_1directions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->get_directions();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1pose_1get_1directionsSwigExplicitgeneral_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->mae::general_pose::get_directions();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::general_pose > *obj = *((std::shared_ptr< mae::general_pose > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_general_pose *director = dynamic_cast<SwigDirector_general_pose *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1pose_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::general_pose *obj = *((mae::general_pose **)&objarg);
  SwigDirector_general_pose *director = dynamic_cast<SwigDirector_general_pose *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1int_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< int > *)new std::list< int >();
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_int_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = ((std::list< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_int_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (bool)((std::list< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1list_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  std::list< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  temp2 = (std::list< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::list< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_int_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  std::list< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< int >::value_type *) &std_list_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1int_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1pose_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1pose_1listener_1on_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_pose > arg3 ;
  std::shared_ptr< mae::general_pose > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_pose > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->on_pose(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1pose_1listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_pose_listener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_pose_listener *)new SwigDirector_i_pose_listener(jenv);
  *(mae::i_pose_listener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1pose_1listener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mae::i_pose_listener *obj = *((mae::i_pose_listener **)&objarg);
  (void)jcls;
  SwigDirector_i_pose_listener *director = dynamic_cast<SwigDirector_i_pose_listener *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1pose_1listener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_pose_listener *obj = *((mae::i_pose_listener **)&objarg);
  SwigDirector_i_pose_listener *director = dynamic_cast<SwigDirector_i_pose_listener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1enriched_1pose_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_enriched_pose *)new SwigDirector_general_enriched_pose(jenv);
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1enriched_1pose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::general_pose > arg1 ;
  std::shared_ptr< mae::general_pose > *argp1 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::general_pose > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::general_enriched_pose *)new SwigDirector_general_enriched_pose(jenv,arg1);
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1set_1key_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_key_pose(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1set_1key_1poseSwigExplicitgeneral_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->mae::general_enriched_pose::set_key_pose(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1is_1key_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->is_key_pose(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1is_1key_1poseSwigExplicitgeneral_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->mae::general_enriched_pose::is_key_pose(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1set_1in_1motion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_in_motion(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1set_1in_1motionSwigExplicitgeneral_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->mae::general_enriched_pose::set_in_motion(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1is_1in_1motion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->is_in_motion(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1is_1in_1motionSwigExplicitgeneral_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->mae::general_enriched_pose::is_in_motion(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::general_enriched_pose > *obj = *((std::shared_ptr< mae::general_enriched_pose > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_general_enriched_pose *director = dynamic_cast<SwigDirector_general_enriched_pose *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::general_enriched_pose *obj = *((mae::general_enriched_pose **)&objarg);
  SwigDirector_general_enriched_pose *director = dynamic_cast<SwigDirector_general_enriched_pose *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1enriched_1pose_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::shared_ptr< mae::general_enriched_pose > > *)new std::list< std::shared_ptr< mae::general_enriched_pose > >();
  *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_enriched_1pose_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  result = ((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_enriched_1pose_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  result = (bool)((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_enriched_1pose_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_enriched_1pose_1list_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *arg2 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = jarg2 ? *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_enriched_1pose_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  int arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *) &std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_enriched_pose >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1enriched_1pose_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::hierarchy *)new mae::hierarchy();
  
  *(std::shared_ptr<  mae::hierarchy > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy_element > arg1 ;
  std::shared_ptr< mae::hierarchy_element > *argp1 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::hierarchy *)new mae::hierarchy(arg1);
  
  *(std::shared_ptr<  mae::hierarchy > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1get_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy const *)arg1)->get_root();
  *(std::shared_ptr< mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr< mae::hierarchy_element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1set_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_root(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (mae::hierarchy_element *)((mae::hierarchy const *)arg1)->at(arg2);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_hierarchy_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1default_1hierarchy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::hierarchy::default_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1element_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1element_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >(arg1);
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::hierarchy_element >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::hierarchy_element > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1hierarchy_1element_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1hierarchy_1element_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1hierarchy_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_hierarchy_1element_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::hierarchy_element const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_hierarchy_1element_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_hierarchy_1element_1is_1torso_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_torso_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_hierarchy_1element_1is_1dummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_dummy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1get_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::hierarchy_element *)((mae::hierarchy_element const *)arg1)->get_parent();
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_hierarchy_1element_1is_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_hierarchy_1element_1is_1parent_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent_of(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1get_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->get_children();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1push_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_front(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1push_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->push_front(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->insert(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->insert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_back(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1erase_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase_at(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1erase_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->erase_at(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_hierarchy_1element_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_hierarchy_1element_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_hierarchy_1element_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::hierarchy_element const *)arg1)->str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_hierarchy_1element_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1vec3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::math::vec3d *)new SwigDirector_vec3d(jenv);
  
  *(std::shared_ptr<  mae::math::vec3d > **)&jresult = result ? new std::shared_ptr<  mae::math::vec3d >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1vec3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::math::vec3d *)new SwigDirector_vec3d(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::math::vec3d > **)&jresult = result ? new std::shared_ptr<  mae::math::vec3d >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1vec3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1xSwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::math::vec3d::set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1xSwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->mae::math::vec3d::get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1ySwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::math::vec3d::set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1ySwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->mae::math::vec3d::get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1set_1zSwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::math::vec3d::set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_vec3d_1get_1zSwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::math::vec3d const *)arg1)->mae::math::vec3d::get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vec3d_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::vec3d const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vec3d_1strSwigExplicitvec3d(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::vec3d const *)arg1)->mae::math::vec3d::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::math::vec3d > *obj = *((std::shared_ptr< mae::math::vec3d > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_vec3d *director = dynamic_cast<SwigDirector_vec3d *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vec3d_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::math::vec3d *obj = *((mae::math::vec3d **)&objarg);
  SwigDirector_vec3d *director = dynamic_cast<SwigDirector_vec3d *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1joint_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::general_joint *)new SwigDirector_general_joint(jenv,arg1);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1xSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::general_joint::set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1xSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->mae::general_joint::get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1ySwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::general_joint::set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1ySwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->mae::general_joint::get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1zSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::general_joint::set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1zSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->mae::general_joint::get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_valid(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1validSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->mae::general_joint::set_valid(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::general_joint const *)arg1)->is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1is_1validSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::general_joint const *)arg1)->mae::general_joint::is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_confidence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1confidenceSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::general_joint::set_confidence(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1confidenceSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->mae::general_joint::get_confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1set_1rotationSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::general_joint::set_rotation(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1joint_1get_1rotationSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->mae::general_joint::get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1joint_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->vec();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1joint_1vecSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::general_joint::vec();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1equals_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  mae::general_joint arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  mae::general_joint *argp2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = (*(std::shared_ptr<  mae::general_joint > **)&jarg2) ? (*(std::shared_ptr<  mae::general_joint > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mae::general_joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals_val(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1equals_1valSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  mae::general_joint arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  mae::general_joint *argp2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = (*(std::shared_ptr<  mae::general_joint > **)&jarg2) ? (*(std::shared_ptr<  mae::general_joint > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mae::general_joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->mae::general_joint::equals_val(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_joint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1joint_1equalsSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_joint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->mae::general_joint::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1joint_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_joint const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1joint_1strSwigExplicitgeneral_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_joint const *)arg1)->mae::general_joint::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::general_joint > *obj = *((std::shared_ptr< mae::general_joint > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_general_joint *director = dynamic_cast<SwigDirector_general_joint *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1joint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::general_joint *obj = *((mae::general_joint **)&objarg);
  SwigDirector_general_joint *director = dynamic_cast<SwigDirector_general_joint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1basis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::math::basis *)new SwigDirector_basis(jenv);
  
  *(std::shared_ptr<  mae::math::basis > **)&jresult = result ? new std::shared_ptr<  mae::math::basis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1basis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > arg3 ;
  std::shared_ptr< mae::math::vec3d > arg4 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > *argp3 ;
  std::shared_ptr< mae::math::vec3d > *argp4 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::math::vec3d > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::math::vec3d > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::math::basis *)new SwigDirector_basis(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::math::basis > **)&jresult = result ? new std::shared_ptr<  mae::math::basis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->get_u();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1uSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->mae::math::basis::get_u();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->get_r();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1rSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->mae::math::basis::get_r();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->get_t();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1tSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->mae::math::basis::get_t();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->get_position_vector();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_basis_1get_1position_1vectorSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->mae::math::basis::get_position_vector();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_u(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1uSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::math::basis::set_u(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_r(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1rSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::math::basis::set_r(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_t(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1tSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::math::basis::set_t(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_position_vector(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1set_1position_1vectorSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::math::basis::set_position_vector(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_basis_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_basis_1strSwigExplicitbasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::math::basis const *)arg1)->mae::math::basis::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::math::basis > *obj = *((std::shared_ptr< mae::math::basis > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_basis *director = dynamic_cast<SwigDirector_basis *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_basis_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::math::basis *obj = *((mae::math::basis **)&objarg);
  SwigDirector_basis *director = dynamic_cast<SwigDirector_basis *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_skeleton *)new SwigDirector_general_skeleton(jenv);
  
  *(std::shared_ptr<  mae::general_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::general_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > arg1 ;
  std::shared_ptr< mae::hierarchy > *argp1 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::general_skeleton *)new SwigDirector_general_skeleton(jenv,arg1);
  
  *(std::shared_ptr<  mae::general_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::general_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_joint > arg3 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_joint > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->set_joint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1jointSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_joint > arg3 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_joint > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::general_skeleton::set_joint(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::general_skeleton const *)arg1)->get_joint(arg2);
  *(std::shared_ptr< mae::general_joint > **)&jresult = result ? new std::shared_ptr< mae::general_joint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1jointSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::get_joint(arg2);
  *(std::shared_ptr< mae::general_joint > **)&jresult = result ? new std::shared_ptr< mae::general_joint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->get_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1hierarchySwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::get_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::hierarchy > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_hierarchy(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1hierarchySwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::hierarchy > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::general_skeleton::set_hierarchy(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_top_down(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1top_1downSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::general_skeleton::set_top_down(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->get_top_down();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1top_1downSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::get_top_down();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_right_left(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1right_1leftSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::general_skeleton::set_right_left(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->get_right_left();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1right_1leftSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::get_right_left();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_weight(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1set_1weightSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::general_skeleton::set_weight(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->get_weight();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1get_1weightSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::get_weight();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1skeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1skeleton_1strSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1skeleton_1ply_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->ply_str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_general_1skeleton_1ply_1strSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_skeleton const *)arg1)->mae::general_skeleton::ply_str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1ply_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::general_skeleton const *)arg1)->ply_file(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1ply_1fileSwigExplicitgeneral_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::general_skeleton const *)arg1)->mae::general_skeleton::ply_file(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::general_skeleton > *obj = *((std::shared_ptr< mae::general_skeleton > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_general_skeleton *director = dynamic_cast<SwigDirector_general_skeleton *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::general_skeleton *obj = *((mae::general_skeleton **)&objarg);
  SwigDirector_general_skeleton *director = dynamic_cast<SwigDirector_general_skeleton *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_skeleton *)new SwigDirector_fl_skeleton(jenv);
  
  *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1set_1torso_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::math::basis > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::basis > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_torso_basis(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1set_1torso_1basisSwigExplicitfl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::math::basis > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::basis > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::fl_skeleton::set_torso_basis(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1get_1torso_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->get_torso_basis();
  *(std::shared_ptr< mae::math::basis > **)&jresult = result ? new std::shared_ptr< mae::math::basis >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1get_1torso_1basisSwigExplicitfl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->mae::fl::fl_skeleton::get_torso_basis();
  *(std::shared_ptr< mae::math::basis > **)&jresult = result ? new std::shared_ptr< mae::math::basis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1set_1orig_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_orig_skeleton(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1set_1orig_1skeletonSwigExplicitfl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::fl_skeleton::set_orig_skeleton(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1get_1orig_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->get_orig_skeleton();
  *(std::shared_ptr< mae::general_skeleton > **)&jresult = result ? new std::shared_ptr< mae::general_skeleton >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1get_1orig_1skeletonSwigExplicitfl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->mae::fl::fl_skeleton::get_orig_skeleton();
  *(std::shared_ptr< mae::general_skeleton > **)&jresult = result ? new std::shared_ptr< mae::general_skeleton >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_fl_1skeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_fl_1skeleton_1strSwigExplicitfl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::fl_skeleton const *)arg1)->mae::fl::fl_skeleton::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::fl_skeleton > *obj = *((std::shared_ptr< mae::fl::fl_skeleton > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_fl_skeleton *director = dynamic_cast<SwigDirector_fl_skeleton *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::fl_skeleton *obj = *((mae::fl::fl_skeleton **)&objarg);
  SwigDirector_fl_skeleton *director = dynamic_cast<SwigDirector_fl_skeleton *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1skeleton_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jarg1;
  arg1 = (mae::i_pose_detector<mae::fl::fl_skeleton> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1pose_1detector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jarg1;
  arg1 = (mae::i_pose_detector<mae::fl::fl_skeleton> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1pose_1detector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_pose_detector< mae::fl::fl_skeleton > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_pose_detector< mae::fl::fl_skeleton > *)new SwigDirector_fl_skeleton_pose_detector(jenv);
  
  *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jresult = result ? new std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1pose_1detector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_pose_detector<mae::fl::fl_skeleton> > *obj = *((std::shared_ptr< mae::i_pose_detector<mae::fl::fl_skeleton> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_fl_skeleton_pose_detector *director = dynamic_cast<SwigDirector_fl_skeleton_pose_detector *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1pose_1detector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_pose_detector< mae::fl::fl_skeleton > *obj = *((mae::i_pose_detector< mae::fl::fl_skeleton > **)&objarg);
  SwigDirector_fl_skeleton_pose_detector *director = dynamic_cast<SwigDirector_fl_skeleton_pose_detector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1pose_1detector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (mae::fl::fl_pose_detector *)new SwigDirector_fl_pose_detector(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1pose_1detector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (mae::fl::fl_pose_detector *)new SwigDirector_fl_pose_detector(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1pose_1detector_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_pose_detector *)new SwigDirector_fl_pose_detector(jenv);
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1set_1hysteresis_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_hysteresis_val(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1set_1hysteresis_1valSwigExplicitfl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::fl::fl_pose_detector::set_hysteresis_val(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1get_1hysteresis_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::fl_pose_detector const *)arg1)->get_hysteresis_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1get_1hysteresis_1valSwigExplicitfl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::fl_pose_detector const *)arg1)->mae::fl::fl_pose_detector::get_hysteresis_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1poseSwigExplicitfl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->mae::fl::fl_pose_detector::pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1vector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->vector_pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1vector_1poseSwigExplicitfl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->mae::fl::fl_pose_detector::vector_pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1default_1hysteresis_1val(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)mae::fl::fl_pose_detector::default_hysteresis_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::fl_pose_detector > *obj = *((std::shared_ptr< mae::fl::fl_pose_detector > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_fl_pose_detector *director = dynamic_cast<SwigDirector_fl_pose_detector *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::fl_pose_detector *obj = *((mae::fl::fl_pose_detector **)&objarg);
  SwigDirector_fl_pose_detector *director = dynamic_cast<SwigDirector_fl_pose_detector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1pre_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1pre_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1pre_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1pre_1sign_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1pre_1sign_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1pre_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_pre_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1pre_1sign(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::i_pre_sign *)new SwigDirector_i_pre_sign(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::i_pre_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1pre_1sign_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *obj = *((std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_pre_sign *director = dynamic_cast<SwigDirector_i_pre_sign *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1pre_1sign_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::i_pre_sign *obj = *((mae::fl::laban::ps::i_pre_sign **)&objarg);
  SwigDirector_i_pre_sign *director = dynamic_cast<SwigDirector_i_pre_sign *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1column_1definition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::column_definition *)new SwigDirector_column_definition(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1column_1definition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (mae::fl::laban::column_definition *)new SwigDirector_column_definition(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_column_1definition_1get_1column_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::column_definition const *)arg1)->get_column_index();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_column_1definition_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::column_definition const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xmlSwigExplicitcolumn_1definition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::column_definition const *)arg1)->mae::fl::laban::column_definition::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xmlSwigExplicitcolumn_1definition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::column_definition const *)arg1)->mae::fl::laban::column_definition::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1xmlSwigExplicitcolumn_1definition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::column_definition const *)arg1)->mae::fl::laban::column_definition::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::column_definition const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_column_1definition_1svgSwigExplicitcolumn_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::column_definition const *)arg1)->mae::fl::laban::column_definition::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_column_1definition_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::column_definition const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_column_1definition_1equalsSwigExplicitcolumn_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::column_definition const *)arg1)->mae::fl::laban::column_definition::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_column_1definition_1default_1definitions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::column_definition::default_definitions();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_column_1definition_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::column_definition > *obj = *((std::shared_ptr< mae::fl::laban::column_definition > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_column_definition *director = dynamic_cast<SwigDirector_column_definition *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_column_1definition_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::column_definition *obj = *((mae::fl::laban::column_definition **)&objarg);
  SwigDirector_column_definition *director = dynamic_cast<SwigDirector_column_definition *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1coldef_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1coldef_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_coldef_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_coldef_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_coldef_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_coldef_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_coldef_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_coldef_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_coldef_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::column_definition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_coldef_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::column_definition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1coldef_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_i_1movement_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::i_movement const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1movement_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::i_movement const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_i_1movement_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::i_movement const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_i_1movement_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::i_movement const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1movement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::i_movement const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1movement_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::i_movement const *)arg1)->symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1movement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::i_movement const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1movement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::i_movement const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1movement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::i_movement const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1movement_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::i_movement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1movement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::i_movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1movement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::i_movement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1movement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::i_movement *)new SwigDirector_i_movement(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::i_movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1movement_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::i_movement > *obj = *((std::shared_ptr< mae::fl::laban::i_movement > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_movement *director = dynamic_cast<SwigDirector_i_movement *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1movement_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::i_movement *obj = *((mae::fl::laban::i_movement **)&objarg);
  SwigDirector_i_movement *director = dynamic_cast<SwigDirector_i_movement *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1int_1int_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,int > *)new std::map< int,int >();
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1int_1int_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int > const & reference is null");
    return 0;
  } 
  result = (std::map< int,int > *)new std::map< int,int >((std::map< int,int > const &)*arg1);
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_int_1int_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (unsigned int)((std::map< int,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_int_1int_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (bool)((std::map< int,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1int_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_int_1int_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int *) &std_map_Sl_int_Sc_int_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1int_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_int_1int_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_int_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_int_1int_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1int_1int_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1time_1unit_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_time_unit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_time_unit)jarg1; 
  result = mae::fl::laban::e_time_unit_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1time_1unit_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_time_unit_c::vec();
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = new std::vector< mae::fl::laban::e_time_unit >((const std::vector< mae::fl::laban::e_time_unit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1time_1unit_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_time_unit)mae::fl::laban::e_time_unit_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1time_1unit_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_time_unit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_time_unit_c *)new mae::fl::laban::e_time_unit_c();
  *(mae::fl::laban::e_time_unit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1time_1unit_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_time_unit_c *arg1 = (mae::fl::laban::e_time_unit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_time_unit_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1time_1unit_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::e_time_unit > *)new std::vector< mae::fl::laban::e_time_unit >();
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1time_1unit_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type arg1 ;
  std::vector< mae::fl::laban::e_time_unit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_time_unit >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::e_time_unit > *)new std::vector< mae::fl::laban::e_time_unit >(arg1);
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_time_unit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_time_unit >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::e_time_unit >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::e_time_unit >::value_type *) &std_vector_Sl_mae_fl_laban_e_time_unit_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1time_1unit_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_time_unit >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_e_time_unit_Sg__set(arg1,arg2,(enum mae::fl::laban::e_time_unit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1time_1unit_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence *)new SwigDirector_laban_sequence(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (mae::fl::laban::laban_sequence *)new SwigDirector_laban_sequence(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_version();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1versionSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_version();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1authors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::string > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_authors(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1authorsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::string > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence::set_authors(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1author(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->add_author(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1authorSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->mae::fl::laban::laban_sequence::add_author(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1authors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_authors();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1authorsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_authors();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_title(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1titleSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->mae::fl::laban::laban_sequence::set_title(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_title();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1titleSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_title();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_description(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1descriptionSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->mae::fl::laban::laban_sequence::set_description(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1descriptionSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1measures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_measures(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1measuresSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->mae::fl::laban::laban_sequence::set_measures(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1measures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_measures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1measuresSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_measures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1time_1unit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  mae::fl::laban::e_time_unit arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (mae::fl::laban::e_time_unit)jarg2; 
  (arg1)->set_time_unit(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1time_1unitSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  mae::fl::laban::e_time_unit arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (mae::fl::laban::e_time_unit)jarg2; 
  (arg1)->mae::fl::laban::laban_sequence::set_time_unit(arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1time_1unit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_time_unit)((mae::fl::laban::laban_sequence const *)arg1)->get_time_unit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1time_1unitSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_time_unit)((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_time_unit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1beat_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_beat_duration(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1beat_1durationSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->mae::fl::laban::laban_sequence::set_beat_duration(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1beat_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beat_duration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1beat_1durationSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_beat_duration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1beats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_beats(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1beatsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->mae::fl::laban::laban_sequence::set_beats(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1beats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beats();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1beatsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_beats();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_column_definitions(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1column_1definitionsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence::set_column_definitions(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_column_definition(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1column_1definitionSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence::add_column_definition(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_definitions();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1definitionsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_column_definitions();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->get_column_definition(arg2);
  *(std::shared_ptr< mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::column_definition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1definitionSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (arg1)->mae::fl::laban::laban_sequence::get_column_definition(arg2);
  *(std::shared_ptr< mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::column_definition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1clear_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_column_definitions();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1clear_1column_1definitionsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->mae::fl::laban::laban_sequence::clear_column_definitions();
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_columns();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1columnsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_columns();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_movements(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1set_1movementsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence::set_movements(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_movements();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1movementsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_movements();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_movement(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1add_1movementSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence::add_movement(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_movements(arg2);
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1column_1movementsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_column_movements(arg2);
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1last_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_last_movement();
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1get_1last_1movementSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::get_last_movement();
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1clear_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_movements();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1clear_1movementsSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->mae::fl::laban::laban_sequence::clear_movements();
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xmlSwigExplicitlaban_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xmlSwigExplicitlaban_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xmlSwigExplicitlaban_1sequence_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xmlSwigExplicitlaban_1sequence_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1headerSwigExplicitlaban_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml_namespace_header(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1headerSwigExplicitlaban_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml_namespace_header();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1schema_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_schema_location();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1schema_1locationSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml_schema_location();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_uri();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1namespace_1uriSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml_namespace_uri();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::fl::laban::laban_sequence const *)arg1)->xml_file(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1xml_1fileSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::xml_file(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->svg(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1svgSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::svg(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1file_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1fileSwigExplicitlaban_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::svg_file(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1file_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1fileSwigExplicitlaban_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::svg_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1file_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1fileSwigExplicitlaban_1sequence_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::svg_file(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1strSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->mae::fl::laban::laban_sequence::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1default_1beat_1duration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)mae::fl::laban::laban_sequence::default_beat_duration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1default_1beats_1per_1measure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)mae::fl::laban::laban_sequence::default_beats_per_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1default_1time_1unit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_time_unit)mae::fl::laban::laban_sequence::default_time_unit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1default_1columns(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::laban_sequence::default_columns();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1fill_1pattern(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  SwigDirector_laban_sequence *darg = 0;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  darg = dynamic_cast<SwigDirector_laban_sequence *>(arg1);
  result = ((SwigDirector_laban_sequence const *)darg)->svg_fill_pattern(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1svg_1fill_1patternSwigExplicitlaban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  SwigDirector_laban_sequence *darg = 0;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  darg = dynamic_cast<SwigDirector_laban_sequence *>(arg1);
  result = ((SwigDirector_laban_sequence const *)darg)->svg_fill_patternSwigPublic(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::laban_sequence > *obj = *((std::shared_ptr< mae::fl::laban::laban_sequence > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence *director = dynamic_cast<SwigDirector_laban_sequence *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::laban_sequence *obj = *((mae::fl::laban::laban_sequence **)&objarg);
  SwigDirector_laban_sequence *director = dynamic_cast<SwigDirector_laban_sequence *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1mov_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::i_movement >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::i_movement > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1mov_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1movement_1decision_1maker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1get_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_recognition_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1decide_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_match(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1decide_1insertion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_insertion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1position_1okay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->position_okay(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1movement_1decision_1maker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *)new SwigDirector_i_movement_decision_maker(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > *obj = *((std::shared_ptr< mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_movement_decision_maker *director = dynamic_cast<SwigDirector_i_movement_decision_maker *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1movement_1decision_1maker_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *obj = *((mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > **)&objarg);
  SwigDirector_i_movement_decision_maker *director = dynamic_cast<SwigDirector_i_movement_decision_maker *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  double arg4 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  double arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1rewriting_1forest_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::rewriting_forest *)new SwigDirector_rewriting_forest(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1rewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_rewriting_1forest_1get_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_rewriting_1forest_1get_1toleranceSwigExplicitrewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->mae::fl::laban::rewriting_forest::get_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1set_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1set_1toleranceSwigExplicitrewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::fl::laban::rewriting_forest::set_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_rewriting_1forest_1replacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->replacements(arg2);
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_rewriting_1forest_1replacementsSwigExplicitrewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->mae::fl::laban::rewriting_forest::replacements(arg2);
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > &)result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1add_1rule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->add_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1add_1ruleSwigExplicitrewriting_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::fl::laban::rewriting_forest::add_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1add_1rule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_rule(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1add_1ruleSwigExplicitrewriting_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::rewriting_forest::add_rule(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_rewriting_1forest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_rewriting_1forest_1strSwigExplicitrewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::laban::rewriting_forest::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::rewriting_forest > *obj = *((std::shared_ptr< mae::fl::laban::rewriting_forest > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_rewriting_forest *director = dynamic_cast<SwigDirector_rewriting_forest *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_rewriting_1forest_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::rewriting_forest *obj = *((mae::fl::laban::rewriting_forest **)&objarg);
  SwigDirector_rewriting_forest *director = dynamic_cast<SwigDirector_rewriting_forest *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >();
  
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = result ? new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg1 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >(arg1);
  
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = result ? new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg2 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg3 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1mov_1vector_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1dec_1val_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp2 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new SwigDirector_i_mov_vector_vector_dec_val(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1dec_1val_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp1 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new SwigDirector_i_mov_vector_vector_dec_val(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1mov_1vector_1vector_1dec_1val(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1get_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_sequence();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1get_1sequenceSwigExpliciti_1mov_1vector_1vector_1dec_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_sequence();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_value();
  *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jresult = result ? new std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1get_1valueSwigExpliciti_1mov_1vector_1vector_1dec_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >::get_value();
  *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jresult = result ? new std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > *obj = *((std::shared_ptr< mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_mov_vector_vector_dec_val *director = dynamic_cast<SwigDirector_i_mov_vector_vector_dec_val *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *obj = *((mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&objarg);
  SwigDirector_i_mov_vector_vector_dec_val *director = dynamic_cast<SwigDirector_i_mov_vector_vector_dec_val *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1dec_1val_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1mov_1vector_1vector_1dec_1val_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1mov_1vector_1vector_1dec_1val_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jobject jarg8_, jboolean jarg9) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg7 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > arg8 ;
  bool arg9 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp7 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *argp8 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  argp8 = *(std::shared_ptr< mae::fl::laban::rewriting_forest > **)&jarg8; 
  if (argp8) arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg7 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > arg8 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp7 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *argp8 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg8_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  argp8 = *(std::shared_ptr< mae::fl::laban::rewriting_forest > **)&jarg8; 
  if (argp8) arg8 = *argp8; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg7 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp7 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  double arg6 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  arg6 = (double)jarg6; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1decision_1forest_1_1SWIG_19(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::decision_forest *)new SwigDirector_decision_forest(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1decision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1set_1recognition_1toleranceSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::fl::laban::decision_forest::set_recognition_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1set_1cooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_cooldown(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1set_1cooldownSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->mae::fl::laban::decision_forest::set_cooldown(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1get_1cooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::decision_forest const *)arg1)->get_cooldown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1get_1cooldownSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::decision_forest const *)arg1)->mae::fl::laban::decision_forest::get_cooldown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_decision_1forest_1get_1sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)((mae::fl::laban::decision_forest const *)arg1)->get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_decision_1forest_1get_1sequence_1lengthSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)((mae::fl::laban::decision_forest const *)arg1)->mae::fl::laban::decision_forest::get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1sequenceSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::decision_forest::add_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1remove_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1remove_1sequenceSwigExplicitdecision_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->mae::fl::laban::decision_forest::remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1remove_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_decision_1forest_1remove_1sequenceSwigExplicitdecision_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->mae::fl::laban::decision_forest::remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1clearSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->mae::fl::laban::decision_forest::clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1rewriting_1rule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->add_rewriting_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1rewriting_1ruleSwigExplicitdecision_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::fl::laban::decision_forest::add_rewriting_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1rewriting_1rule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_rewriting_rule(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1add_1rewriting_1ruleSwigExplicitdecision_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::decision_forest::add_rewriting_rule(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_decision_1forest_1recreate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (arg1)->recreate_sequence(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_decision_1forest_1get_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::decision_forest const *)arg1)->get_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_decision_1forest_1get_1sequencesSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::decision_forest const *)arg1)->mae::fl::laban::decision_forest::get_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_decision_1forest_1find_1submatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->find_submatches(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_decision_1forest_1find_1submatchesSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->mae::fl::laban::decision_forest::find_submatches(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_decision_1forest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::decision_forest const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_decision_1forest_1strSwigExplicitdecision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::decision_forest const *)arg1)->mae::fl::laban::decision_forest::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::decision_forest > *obj = *((std::shared_ptr< mae::fl::laban::decision_forest > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_decision_forest *director = dynamic_cast<SwigDirector_decision_forest *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_decision_1forest_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::decision_forest *obj = *((mae::fl::laban::decision_forest **)&objarg);
  SwigDirector_decision_forest *director = dynamic_cast<SwigDirector_decision_forest *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1dec_1maker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1dec_1maker_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_i_1dec_1maker_1get_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_recognition_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1dec_1maker_1decide_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_match(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1dec_1maker_1decide_1insertion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_insertion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1dec_1maker_1position_1okay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->position_okay(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1dec_1maker(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *)new SwigDirector_i_dec_maker(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1dec_1maker_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > *obj = *((std::shared_ptr< mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_dec_maker *director = dynamic_cast<SwigDirector_i_dec_maker *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1dec_1maker_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *obj = *((mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > **)&objarg);
  SwigDirector_i_dec_maker *director = dynamic_cast<SwigDirector_i_dec_maker *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::laban_sequence > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  result = ((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  result = (bool)((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1list_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg2 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = jarg2 ? *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *) &std_list_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1get_1sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)((mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > const *)arg1)->get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1recognize_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->recognize_sequence(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1sequence_1recognizer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *)new SwigDirector_laban_sequence_sequence_recognizer(jenv);
  
  *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jresult = result ? new std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > *obj = *((std::shared_ptr< mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_sequence_recognizer *director = dynamic_cast<SwigDirector_laban_sequence_sequence_recognizer *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1recognizer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *obj = *((mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_laban_sequence_sequence_recognizer *director = dynamic_cast<SwigDirector_laban_sequence_sequence_recognizer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  double arg5 ;
  bool arg6 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  double arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognizer_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new SwigDirector_laban_sequence_recognizer(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1set_1recognition_1toleranceSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->mae::fl::laban::laban_sequence_recognizer::set_recognition_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1decision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_decision_forest();
  *(std::shared_ptr< mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::decision_forest >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1decision_1forestSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->mae::fl::laban::laban_sequence_recognizer::get_decision_forest();
  *(std::shared_ptr< mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::decision_forest >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1register_1sequenceSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::fl::laban::laban_sequence_recognizer::register_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1deregister_1sequenceSwigExplicitlaban_1sequence_1recognizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->mae::fl::laban::laban_sequence_recognizer::deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1deregister_1sequenceSwigExplicitlaban_1sequence_1recognizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->mae::fl::laban::laban_sequence_recognizer::deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1clear_1registered_1sequencesSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->mae::fl::laban::laban_sequence_recognizer::clear_registered_sequences();
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_registered_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1registered_1sequencesSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->mae::fl::laban::laban_sequence_recognizer::get_registered_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1get_1sequence_1lengthSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)((mae::fl::laban::laban_sequence_recognizer const *)arg1)->mae::fl::laban::laban_sequence_recognizer::get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1recognize_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->recognize_sequence(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1recognize_1sequenceSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->mae::fl::laban::laban_sequence_recognizer::recognize_sequence(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1strSwigExplicitlaban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->mae::fl::laban::laban_sequence_recognizer::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *obj = *((std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_recognizer *director = dynamic_cast<SwigDirector_laban_sequence_recognizer *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::laban_sequence_recognizer *obj = *((mae::fl::laban::laban_sequence_recognizer **)&objarg);
  SwigDirector_laban_sequence_recognizer *director = dynamic_cast<SwigDirector_laban_sequence_recognizer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_generator<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1generator_1generate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_generator<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->generate_sequence(arg2,arg3,arg4);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1sequence_1generator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *)new SwigDirector_laban_sequence_sequence_generator(jenv);
  
  *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jresult = result ? new std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1generator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_sequence_generator<mae::fl::laban::laban_sequence> > *obj = *((std::shared_ptr< mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_sequence_generator *director = dynamic_cast<SwigDirector_laban_sequence_sequence_generator *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1generator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *obj = *((mae::i_sequence_generator< mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_laban_sequence_sequence_generator *director = dynamic_cast<SwigDirector_laban_sequence_sequence_generator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  bool arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1generator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::laban_sequence_generator *)new SwigDirector_laban_sequence_generator(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1generator_1generate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->generate_sequence(arg2,arg3,arg4);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1generator_1generate_1sequenceSwigExplicitlaban_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->mae::fl::laban::laban_sequence_generator::generate_sequence(arg2,arg3,arg4);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1generator_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *obj = *((std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_generator *director = dynamic_cast<SwigDirector_laban_sequence_generator *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1generator_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::laban_sequence_generator *obj = *((mae::fl::laban::laban_sequence_generator **)&objarg);
  SwigDirector_laban_sequence_generator *director = dynamic_cast<SwigDirector_laban_sequence_generator *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1sequence_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_listener< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1listener_1on_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_listener< mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->on_sequence(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1sequence_1listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_sequence_listener< mae::fl::laban::laban_sequence > *)new SwigDirector_laban_sequence_sequence_listener(jenv);
  
  *(std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&jresult = result ? new std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1listener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_sequence_listener<mae::fl::laban::laban_sequence> > *obj = *((std::shared_ptr< mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_sequence_listener *director = dynamic_cast<SwigDirector_laban_sequence_sequence_listener *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1sequence_1listener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *obj = *((mae::i_sequence_listener< mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_laban_sequence_sequence_listener *director = dynamic_cast<SwigDirector_laban_sequence_sequence_listener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1recognition_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognition_1listener_1on_1recognition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > arg3 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long)jarg2; 
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_recognition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognition_1listener_1on_1recognition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::vector< std::string > arg3 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::vector< std::string > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long)jarg2; 
  argp3 = *(std::vector< std::string > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->on_recognition(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1recognition_1listener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *)new SwigDirector_laban_sequence_recognition_listener(jenv);
  
  *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jresult = result ? new std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognition_1listener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_recognition_listener<mae::fl::laban::laban_sequence> > *obj = *((std::shared_ptr< mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_laban_sequence_recognition_listener *director = dynamic_cast<SwigDirector_laban_sequence_recognition_listener *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1recognition_1listener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *obj = *((mae::i_recognition_listener< mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_laban_sequence_recognition_listener *director = dynamic_cast<SwigDirector_laban_sequence_recognition_listener *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1skeleton_1laban_1sequence_1movement_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1detect_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  double arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg4 ;
  std::vector< mae::bone > arg5 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp4 ;
  std::vector< mae::bone > *argp5 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::vector< mae::bone > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->detect_movement(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1set_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_buffer(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1clear_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_buffer();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1add_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1remove_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1clear_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear_listeners();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1notify_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_pose > arg3 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_pose > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_pose > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->notify_listeners(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1detector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_detector(jenv);
  
  *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jresult = result ? new std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > *obj = *((std::shared_ptr< mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_fl_skeleton_laban_sequence_movement_detector *director = dynamic_cast<SwigDirector_fl_skeleton_laban_sequence_movement_detector *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1detector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *obj = *((mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_fl_skeleton_laban_sequence_movement_detector *director = dynamic_cast<SwigDirector_fl_skeleton_laban_sequence_movement_detector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new SwigDirector_fl_skeleton_laban_sequence_movement_controller(jenv,arg1,arg2,arg3,arg4);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1next_1frame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1next_1frameSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1register_1sequenceSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::register_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1deregister_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->deregister_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1deregister_1sequenceSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::deregister_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1registered_1sequencesSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_registered_sequences();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1set_1no_1buffer_1size_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_no_buffer_size_update(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1set_1no_1buffer_1size_1updateSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::set_no_buffer_size_update(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_buffer();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1bufferSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_buffer();
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1current_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_current_sequence();
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1current_1sequenceSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_current_sequence();
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1add_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1remove_1listenerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_listeners();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1clear_1listenersSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::clear_listeners();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1notify_1sequence_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->notify_sequence_listeners(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1notify_1sequence_1listenersSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_sequence_listeners(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1notify_1recognition_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->notify_recognition_listeners(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1notify_1recognition_1listenersSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::notify_recognition_listeners(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1movement_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_movement_detector();
  *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1movement_1detectorSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_movement_detector();
  *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_sequence_recognizer();
  *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1get_1sequence_1recognizerSwigExplicitfl_1skeleton_1laban_1sequence_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >::get_sequence_recognizer();
  *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *obj = *((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&objarg);
  (void)jcls;
  SwigDirector_fl_skeleton_laban_sequence_movement_controller *director = dynamic_cast<SwigDirector_fl_skeleton_laban_sequence_movement_controller *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1skeleton_1laban_1sequence_1movement_1controller_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *obj = *((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&objarg);
  SwigDirector_fl_skeleton_laban_sequence_movement_controller *director = dynamic_cast<SwigDirector_fl_skeleton_laban_sequence_movement_controller *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  bool arg3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  bool arg8 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jdouble jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  double arg8 ;
  bool arg9 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  double arg8 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  arg8 = (double)jarg8; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3,arg4);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1fl_1movement_1controller_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::fl_movement_controller *)new SwigDirector_fl_movement_controller(jenv,arg1,arg2,arg3);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1fl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1next_1frame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_skeleton > arg3 ;
  std::shared_ptr< mae::general_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1next_1frameSwigExplicitfl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_skeleton > arg3 ;
  std::shared_ptr< mae::general_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->mae::fl::fl_movement_controller::next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1set_1recognition_1toleranceSwigExplicitfl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->mae::fl::fl_movement_controller::set_recognition_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1laban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_recognizer();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_recognizer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1laban_1sequence_1recognizerSwigExplicitfl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->mae::fl::fl_movement_controller::get_laban_sequence_recognizer();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_recognizer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1laban_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_generator();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_generator >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1laban_1sequence_1generatorSwigExplicitfl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->mae::fl::fl_movement_controller::get_laban_sequence_generator();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_generator >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1fl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_fl_pose_detector();
  *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr< mae::fl::fl_pose_detector >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1get_1fl_1pose_1detectorSwigExplicitfl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->mae::fl::fl_movement_controller::get_fl_pose_detector();
  *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr< mae::fl::fl_pose_detector >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mae::fl::fl_movement_controller *obj = *((mae::fl::fl_movement_controller **)&objarg);
  (void)jcls;
  SwigDirector_fl_movement_controller *director = dynamic_cast<SwigDirector_fl_movement_controller *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::fl_movement_controller *obj = *((mae::fl::fl_movement_controller **)&objarg);
  SwigDirector_fl_movement_controller *director = dynamic_cast<SwigDirector_fl_movement_controller *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bvh_1spec(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::map< std::string,int > arg5 ;
  std::map< std::string,bool > arg6 ;
  std::map< std::string,int > *argp5 ;
  std::map< std::string,bool > *argp6 ;
  mae::fl::bvh_spec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(std::map< std::string,int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::map< std::string,bool > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,bool >");
    return 0;
  }
  arg6 = *argp6; 
  result = (mae::fl::bvh_spec *)new SwigDirector_bvh_spec(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_spec >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1bvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1id_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->get_id_map();
  *(std::map< std::string,int > **)&jresult = new std::map< std::string,int >((const std::map< std::string,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1id_1mapSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->mae::fl::bvh_spec::get_id_map();
  *(std::map< std::string,int > **)&jresult = new std::map< std::string,int >((const std::map< std::string,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1torso_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->get_torso_map();
  *(std::map< std::string,bool > **)&jresult = new std::map< std::string,bool >((const std::map< std::string,bool > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1torso_1mapSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->mae::fl::bvh_spec::get_torso_map();
  *(std::map< std::string,bool > **)&jresult = new std::map< std::string,bool >((const std::map< std::string,bool > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1left_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_left_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1left_1anchorSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::bvh_spec::get_left_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1right_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_right_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1right_1anchorSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::bvh_spec::get_right_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1top_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_top_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1top_1anchorSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::bvh_spec::get_top_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1bottom_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_bottom_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1spec_1get_1bottom_1anchorSwigExplicitbvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->mae::fl::bvh_spec::get_bottom_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1spec_1default_1spec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::bvh_spec::default_spec();
  *(std::shared_ptr< mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr< mae::fl::bvh_spec >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1spec_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::bvh_spec > *obj = *((std::shared_ptr< mae::fl::bvh_spec > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_bvh_spec *director = dynamic_cast<SwigDirector_bvh_spec *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1spec_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::bvh_spec *obj = *((mae::fl::bvh_spec **)&objarg);
  SwigDirector_bvh_spec *director = dynamic_cast<SwigDirector_bvh_spec *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1int_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1int_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_string_1int_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1int_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1int_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_string_1int_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1int_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1int_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1int_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1string_1int_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1bool_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >();
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1string_1bool_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,bool > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >((std::map< std::string,bool > const &)*arg1);
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_string_1bool_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1bool_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  result = (bool)((std::map< std::string,bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1bool_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1bool_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool *) &std_map_Sl_std_string_Sc_bool_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1bool_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_bool_Sg__set(arg1,(std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_string_1bool_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_bool_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_string_1bool_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1string_1bool_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1bvh_1controller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::bvh_controller *)new SwigDirector_bvh_controller(jenv);
  
  *(std::shared_ptr<  mae::fl::bvh_controller > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_controller >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1bvh_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1strSwigExplicitbvh_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->mae::fl::bvh_controller::bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  double arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  result = (arg1)->bvh_str(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1strSwigExplicitbvh_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  double arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  result = (arg1)->mae::fl::bvh_controller::bvh_str(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1str_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (arg1)->bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_bvh_1controller_1bvh_1strSwigExplicitbvh_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (arg1)->mae::fl::bvh_controller::bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1print_1bvh_1file_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->print_bvh_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1print_1bvh_1fileSwigExplicitbvh_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->mae::fl::bvh_controller::print_bvh_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1print_1bvh_1file_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->print_bvh_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1print_1bvh_1fileSwigExplicitbvh_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->mae::fl::bvh_controller::print_bvh_file(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1controller_1read_1bvh_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->read_bvh_str(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1controller_1read_1bvh_1strSwigExplicitbvh_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->mae::fl::bvh_controller::read_bvh_str(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1controller_1read_1bvh_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->read_bvh_file(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_bvh_1controller_1read_1bvh_1fileSwigExplicitbvh_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->mae::fl::bvh_controller::read_bvh_file(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::bvh_controller > *obj = *((std::shared_ptr< mae::fl::bvh_controller > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_bvh_controller *director = dynamic_cast<SwigDirector_bvh_controller *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_bvh_1controller_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::bvh_controller *obj = *((mae::fl::bvh_controller **)&objarg);
  SwigDirector_bvh_controller *director = dynamic_cast<SwigDirector_bvh_controller *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >();
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >(arg1);
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_skeleton >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::general_skeleton > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1skeleton_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >();
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg1 ;
  double arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp1 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >(arg1,arg2);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > const &)*arg1);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1double_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg2 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  arg2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1double_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)& ((arg1)->first);
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1double_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_general_1skeleton_1vector_1double_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1general_1skeleton_1vector_1double_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1laban_1sequence_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_reader *)new SwigDirector_laban_sequence_reader(jenv);
  *(mae::fl::laban::laban_sequence_reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1laban_1sequence_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1read_1sequence_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->read_sequence_file(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1read_1sequence_1fileSwigExplicitlaban_1sequence_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->mae::fl::laban::laban_sequence_reader::read_sequence_file(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1read_1sequence_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->read_sequence_str(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1read_1sequence_1strSwigExplicitlaban_1sequence_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->mae::fl::laban::laban_sequence_reader::read_sequence_str(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  mae::fl::laban::laban_sequence_reader *obj = *((mae::fl::laban::laban_sequence_reader **)&objarg);
  (void)jcls;
  SwigDirector_laban_sequence_reader *director = dynamic_cast<SwigDirector_laban_sequence_reader *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_laban_1sequence_1reader_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::laban_sequence_reader *obj = *((mae::fl::laban::laban_sequence_reader **)&objarg);
  SwigDirector_laban_sequence_reader *director = dynamic_cast<SwigDirector_laban_sequence_reader *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::i_symbol const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1symbol(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::i_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::i_symbol *)new SwigDirector_i_symbol(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::i_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1symbol_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *obj = *((std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_symbol *director = dynamic_cast<SwigDirector_i_symbol *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1symbol_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::i_symbol *obj = *((mae::fl::laban::mv::i_symbol **)&objarg);
  SwigDirector_i_symbol *director = dynamic_cast<SwigDirector_i_symbol *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1movement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp7 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  argp7 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  result = (mae::fl::laban::movement *)new SwigDirector_movement(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1movement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  result = (mae::fl::laban::movement *)new SwigDirector_movement(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1movement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (mae::fl::laban::movement *)new SwigDirector_movement(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_movement_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::movement const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_movement_1get_1columnSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::movement const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1get_1measureSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_movement_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_movement_1get_1beatSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_movement_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_movement_1get_1durationSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_movement_1get_1hold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::movement const *)arg1)->get_hold();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1get_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->get_symbol();
  *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_movement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::movement const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_movement_1equalsSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_movement_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::movement const *)arg1)->symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_movement_1symbol_1equalsSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::movement const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xmlSwigExplicitmovement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::movement const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xmlSwigExplicitmovement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1xmlSwigExplicitmovement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::movement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1svgSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1recreateSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_movement_1strSwigExplicitmovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->mae::fl::laban::movement::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_movement_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::movement > *obj = *((std::shared_ptr< mae::fl::laban::movement > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_movement *director = dynamic_cast<SwigDirector_movement *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_movement_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::movement *obj = *((mae::fl::laban::movement **)&objarg);
  SwigDirector_movement *director = dynamic_cast<SwigDirector_movement *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1path_1type_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  result = mae::fl::laban::e_path_type_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1path_1type_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_path_type_c::vec();
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = new std::vector< mae::fl::laban::e_path_type >((const std::vector< mae::fl::laban::e_path_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1path_1type_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_path_type)mae::fl::laban::e_path_type_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1path_1type_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_path_type_c *)new mae::fl::laban::e_path_type_c();
  *(mae::fl::laban::e_path_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1path_1type_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_path_type_c *arg1 = (mae::fl::laban::e_path_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_path_type_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1path_1type_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::e_path_type > *)new std::vector< mae::fl::laban::e_path_type >();
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1path_1type_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type arg1 ;
  std::vector< mae::fl::laban::e_path_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_path_type >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::e_path_type > *)new std::vector< mae::fl::laban::e_path_type >(arg1);
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_path_type > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_path_type > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_path_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::e_path_type > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_path_type >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::e_path_type >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::e_path_type >::value_type *) &std_vector_Sl_mae_fl_laban_e_path_type_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1path_1type_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_path_type >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_e_path_type_Sg__set(arg1,arg2,(enum mae::fl::laban::e_path_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1path_1type_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1path(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  mae::fl::laban::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::fl::laban::path *)new SwigDirector_path(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::path > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::path >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_path_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_path_type)((mae::fl::laban::path const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_path_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::path const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_path_1get_1columnSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_path_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::path const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_path_1get_1measureSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_path_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_path_1get_1beatSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_path_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_path_1get_1durationSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_path_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::path const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_path_1equalsSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_path_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::path const *)arg1)->symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_path_1symbol_1equalsSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::path const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xmlSwigExplicitpath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::path const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xmlSwigExplicitpath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::path const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1xmlSwigExplicitpath_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::path const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1svgSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_path_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::path const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_path_1recreateSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::path const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_path_1strSwigExplicitpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::path const *)arg1)->mae::fl::laban::path::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_path_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::path > *obj = *((std::shared_ptr< mae::fl::laban::path > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_path *director = dynamic_cast<SwigDirector_path *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_path_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::path *obj = *((mae::fl::laban::path **)&objarg);
  SwigDirector_path *director = dynamic_cast<SwigDirector_path *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1relationship_1type_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  result = mae::fl::laban::e_relationship_type_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1relationship_1type_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_relationship_type_c::vec();
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = new std::vector< mae::fl::laban::e_relationship_type >((const std::vector< mae::fl::laban::e_relationship_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1relationship_1type_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_relationship_type)mae::fl::laban::e_relationship_type_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1relationship_1type_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_relationship_type_c *)new mae::fl::laban::e_relationship_type_c();
  *(mae::fl::laban::e_relationship_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1relationship_1type_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_relationship_type_c *arg1 = (mae::fl::laban::e_relationship_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_relationship_type_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1relationship_1type_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::e_relationship_type > *)new std::vector< mae::fl::laban::e_relationship_type >();
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1relationship_1type_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type arg1 ;
  std::vector< mae::fl::laban::e_relationship_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_relationship_type >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::e_relationship_type > *)new std::vector< mae::fl::laban::e_relationship_type >(arg1);
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_relationship_type >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::e_relationship_type >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type *) &std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1relationship_1type_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__set(arg1,arg2,(enum mae::fl::laban::e_relationship_type const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1relationship_1type_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1dynamics_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1dynamics_1sign(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::i_dynamics_sign *)new SwigDirector_i_dynamics_sign(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *obj = *((std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_dynamics_sign *director = dynamic_cast<SwigDirector_i_dynamics_sign *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1dynamics_1sign_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::i_dynamics_sign *obj = *((mae::fl::laban::mv::i_dynamics_sign **)&objarg);
  SwigDirector_i_dynamics_sign *director = dynamic_cast<SwigDirector_i_dynamics_sign *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1relationship_1endpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg4 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp4 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new SwigDirector_relationship_endpoint(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1relationship_1endpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new SwigDirector_relationship_endpoint(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1relationship_1endpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new SwigDirector_relationship_endpoint(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1relationship_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_relationship_1endpoint_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1endpoint_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1endpoint_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1endpoint_1get_1active(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_active();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xmlSwigExplicitrelationship_1endpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->mae::fl::laban::mv::relationship_endpoint::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xmlSwigExplicitrelationship_1endpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->mae::fl::laban::mv::relationship_endpoint::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1endpoint_1xmlSwigExplicitrelationship_1endpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->mae::fl::laban::mv::relationship_endpoint::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1endpoint_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::map< int,int > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->recreate(arg2);
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1endpoint_1recreateSwigExplicitrelationship_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::map< int,int > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->mae::fl::laban::mv::relationship_endpoint::recreate(arg2);
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1endpoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1endpoint_1equalsSwigExplicitrelationship_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->mae::fl::laban::mv::relationship_endpoint::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_relationship_1endpoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *obj = *((std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_relationship_endpoint *director = dynamic_cast<SwigDirector_relationship_endpoint *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_relationship_1endpoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::relationship_endpoint *obj = *((mae::fl::laban::mv::relationship_endpoint **)&objarg);
  SwigDirector_relationship_endpoint *director = dynamic_cast<SwigDirector_relationship_endpoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1relationship_1bow(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jdouble jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg8 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp8 ;
  mae::fl::laban::relationship_bow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  argp8 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg8; 
  if (argp8) arg8 = *argp8; 
  result = (mae::fl::laban::relationship_bow *)new SwigDirector_relationship_bow(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::relationship_bow >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1relationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_relationship_type)((mae::fl::laban::relationship_bow const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1grasping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_grasping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1passing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_passing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1hold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_hold();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1left_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->get_left_endpoint();
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1right_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->get_right_endpoint();
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::relationship_bow const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1columnSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::relationship_bow const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1measureSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1beatSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_relationship_1bow_1get_1durationSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1equalsSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_relationship_1bow_1symbol_1equalsSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xmlSwigExplicitrelationship_1bow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xmlSwigExplicitrelationship_1bow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1xmlSwigExplicitrelationship_1bow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1svgSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1recreateSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_relationship_1bow_1strSwigExplicitrelationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->mae::fl::laban::relationship_bow::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_relationship_1bow_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::relationship_bow > *obj = *((std::shared_ptr< mae::fl::laban::relationship_bow > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_relationship_bow *director = dynamic_cast<SwigDirector_relationship_bow *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_relationship_1bow_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::relationship_bow *obj = *((mae::fl::laban::relationship_bow **)&objarg);
  SwigDirector_relationship_bow *director = dynamic_cast<SwigDirector_relationship_bow *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1degree_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1degree_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::i_degree_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1degree_1sign_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1degree_1sign(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::i_degree_sign *)new SwigDirector_i_degree_sign(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::i_degree_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1degree_1sign_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *obj = *((std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_degree_sign *director = dynamic_cast<SwigDirector_i_degree_sign *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1degree_1sign_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::i_degree_sign *obj = *((mae::fl::laban::mv::i_degree_sign **)&objarg);
  SwigDirector_i_degree_sign *director = dynamic_cast<SwigDirector_i_degree_sign *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1level_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  result = mae::fl::laban::mv::e_level_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1level_1c_1lvl(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::lvl(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1level_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_level_c::vec();
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = new std::vector< mae::fl::laban::mv::e_level >((const std::vector< mae::fl::laban::mv::e_level > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1level_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1level_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_level_c *)new mae::fl::laban::mv::e_level_c();
  *(mae::fl::laban::mv::e_level_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1level_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_level_c *arg1 = (mae::fl::laban::mv::e_level_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_level_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1level_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_level > *)new std::vector< mae::fl::laban::mv::e_level >();
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1level_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_level > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_level >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_level > *)new std::vector< mae::fl::laban::mv::e_level >(arg1);
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1level_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1level_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1level_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_level >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1level_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1level_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1level_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_level >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_level >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1level_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_level >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_level_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1level_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_level >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_level_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_level const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1level_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1pin(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  int arg2 ;
  mae::fl::laban::mv::pin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (int)jarg2; 
  result = (mae::fl::laban::mv::pin *)new SwigDirector_pin(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::pin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_pin_1get_1level(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_level)((mae::fl::laban::mv::pin const *)arg1)->get_level();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_pin_1get_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::mv::pin const *)arg1)->get_horizontal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_pin_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::pin const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_pin_1equalsSwigExplicitpin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xmlSwigExplicitpin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xmlSwigExplicitpin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xmlSwigExplicitpin_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::pin const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1xmlSwigExplicitpin_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1svgSwigExplicitpin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_pin_1svgSwigExplicitpin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::pin const *)arg1)->mae::fl::laban::mv::pin::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_pin_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::pin > *obj = *((std::shared_ptr< mae::fl::laban::mv::pin > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_pin *director = dynamic_cast<SwigDirector_pin *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_pin_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::pin *obj = *((mae::fl::laban::mv::pin **)&objarg);
  SwigDirector_pin *director = dynamic_cast<SwigDirector_pin *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1room_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::room_direction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::room_direction *)new SwigDirector_room_direction(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::room_direction >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1room_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_room_1direction_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::room_direction const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_room_1direction_1get_1columnSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::room_direction const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1get_1measureSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_room_1direction_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_room_1direction_1get_1beatSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_room_1direction_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_maeJNI_room_1direction_1get_1durationSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->get_direction();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_room_1direction_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::room_direction const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_room_1direction_1equalsSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_room_1direction_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::room_direction const *)arg1)->symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_room_1direction_1symbol_1equalsSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::symbol_equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::room_direction const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xmlSwigExplicitroom_1direction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::room_direction const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xmlSwigExplicitroom_1direction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1xmlSwigExplicitroom_1direction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::room_direction const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1svgSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::room_direction const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1recreateSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_room_1direction_1strSwigExplicitroom_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->mae::fl::laban::room_direction::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_room_1direction_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::room_direction > *obj = *((std::shared_ptr< mae::fl::laban::room_direction > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_room_direction *director = dynamic_cast<SwigDirector_room_direction *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_room_1direction_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::room_direction *obj = *((mae::fl::laban::room_direction **)&objarg);
  SwigDirector_room_direction *director = dynamic_cast<SwigDirector_room_direction *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1accent_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::mv::accent_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::laban::mv::accent_sign *)new SwigDirector_accent_sign(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::accent_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1accent_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_accent_1sign_1get_1accent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::mv::accent_sign const *)arg1)->get_accent();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_accent_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::accent_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_accent_1sign_1equalsSwigExplicitaccent_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::accent_sign const *)arg1)->mae::fl::laban::mv::accent_sign::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xmlSwigExplicitaccent_1sign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->mae::fl::laban::mv::accent_sign::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xmlSwigExplicitaccent_1sign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->mae::fl::laban::mv::accent_sign::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_accent_1sign_1xmlSwigExplicitaccent_1sign_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::accent_sign const *)arg1)->mae::fl::laban::mv::accent_sign::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_accent_1sign_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *obj = *((std::shared_ptr< mae::fl::laban::mv::accent_sign > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_accent_sign *director = dynamic_cast<SwigDirector_accent_sign *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_accent_1sign_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::accent_sign *obj = *((mae::fl::laban::mv::accent_sign **)&objarg);
  SwigDirector_accent_sign *director = dynamic_cast<SwigDirector_accent_sign *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1dynamic_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  result = mae::fl::laban::mv::e_dynamic_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1dynamic_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_dynamic_c::vec();
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = new std::vector< mae::fl::laban::mv::e_dynamic >((const std::vector< mae::fl::laban::mv::e_dynamic > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1dynamic_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_dynamic)mae::fl::laban::mv::e_dynamic_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1dynamic_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_dynamic_c *)new mae::fl::laban::mv::e_dynamic_c();
  *(mae::fl::laban::mv::e_dynamic_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1dynamic_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_dynamic_c *arg1 = (mae::fl::laban::mv::e_dynamic_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_dynamic_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1dynamic_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_dynamic > *)new std::vector< mae::fl::laban::mv::e_dynamic >();
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1dynamic_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_dynamic > *)new std::vector< mae::fl::laban::mv::e_dynamic >(arg1);
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1dynamic_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_dynamic const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1dynamic_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1dynamic_1sign(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  mae::fl::laban::mv::dynamic_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  result = (mae::fl::laban::mv::dynamic_sign *)new SwigDirector_dynamic_sign(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::dynamic_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1dynamic_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_dynamic_1sign_1get_1dynamic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_dynamic)((mae::fl::laban::mv::dynamic_sign const *)arg1)->get_dynamic();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_dynamic_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::dynamic_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_dynamic_1sign_1equalsSwigExplicitdynamic_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::dynamic_sign const *)arg1)->mae::fl::laban::mv::dynamic_sign::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xmlSwigExplicitdynamic_1sign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->mae::fl::laban::mv::dynamic_sign::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xmlSwigExplicitdynamic_1sign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->mae::fl::laban::mv::dynamic_sign::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_dynamic_1sign_1xmlSwigExplicitdynamic_1sign_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->mae::fl::laban::mv::dynamic_sign::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_dynamic_1sign_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *obj = *((std::shared_ptr< mae::fl::laban::mv::dynamic_sign > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_dynamic_sign *director = dynamic_cast<SwigDirector_dynamic_sign *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_dynamic_1sign_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::dynamic_sign *obj = *((mae::fl::laban::mv::dynamic_sign **)&objarg);
  SwigDirector_dynamic_sign *director = dynamic_cast<SwigDirector_dynamic_sign *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1cancel_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  result = mae::fl::laban::mv::e_cancel_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1cancel_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_cancel_c::vec();
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = new std::vector< mae::fl::laban::mv::e_cancel >((const std::vector< mae::fl::laban::mv::e_cancel > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1cancel_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_cancel)mae::fl::laban::mv::e_cancel_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1cancel_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_cancel_c *)new mae::fl::laban::mv::e_cancel_c();
  *(mae::fl::laban::mv::e_cancel_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1cancel_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_cancel_c *arg1 = (mae::fl::laban::mv::e_cancel_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_cancel_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1cancel_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_cancel > *)new std::vector< mae::fl::laban::mv::e_cancel >();
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1cancel_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_cancel > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_cancel >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_cancel > *)new std::vector< mae::fl::laban::mv::e_cancel >(arg1);
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_cancel >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_cancel >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1cancel_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_cancel const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1cancel_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1cancellation_1symbol(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  mae::fl::laban::mv::cancellation_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  result = (mae::fl::laban::mv::cancellation_symbol *)new SwigDirector_cancellation_symbol(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1cancellation_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_cancellation_1symbol_1get_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_cancel)((mae::fl::laban::mv::cancellation_symbol const *)arg1)->get_cancel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_cancellation_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::cancellation_symbol const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_cancellation_1symbol_1equalsSwigExplicitcancellation_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xmlSwigExplicitcancellation_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xmlSwigExplicitcancellation_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1xmlSwigExplicitcancellation_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1svgSwigExplicitcancellation_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1svgSwigExplicitcancellation_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_cancellation_1symbol_1strSwigExplicitcancellation_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->mae::fl::laban::mv::cancellation_symbol::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_cancellation_1symbol_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *obj = *((std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_cancellation_symbol *director = dynamic_cast<SwigDirector_cancellation_symbol *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_cancellation_1symbol_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::cancellation_symbol *obj = *((mae::fl::laban::mv::cancellation_symbol **)&objarg);
  SwigDirector_cancellation_symbol *director = dynamic_cast<SwigDirector_cancellation_symbol *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1space_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  result = mae::fl::laban::mv::e_space_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_space_c::vec();
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = new std::vector< mae::fl::laban::mv::e_space >((const std::vector< mae::fl::laban::mv::e_space > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1space_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_space)mae::fl::laban::mv::e_space_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_space_c *)new mae::fl::laban::mv::e_space_c();
  *(mae::fl::laban::mv::e_space_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1space_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_c *arg1 = (mae::fl::laban::mv::e_space_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_space > *)new std::vector< mae::fl::laban::mv::e_space >();
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_space > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_space >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_space > *)new std::vector< mae::fl::laban::mv::e_space >(arg1);
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_space >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1space_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_space >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_space >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1space_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_space >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_space_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_space >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_space_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_space const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1space_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1space_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space_direction)jarg1; 
  result = mae::fl::laban::mv::e_space_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_space_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_space_direction >((const std::vector< mae::fl::laban::mv::e_space_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1space_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_space_direction)mae::fl::laban::mv::e_space_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_space_direction_c *)new mae::fl::laban::mv::e_space_direction_c();
  *(mae::fl::laban::mv::e_space_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1space_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_direction_c *arg1 = (mae::fl::laban::mv::e_space_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1direction_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_space_direction > *)new std::vector< mae::fl::laban::mv::e_space_direction >();
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1space_1direction_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_space_direction > *)new std::vector< mae::fl::laban::mv::e_space_direction >(arg1);
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1space_1direction_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_space_direction const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1space_1direction_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1space_1measurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::e_space_direction arg3 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::mv::e_space_direction)jarg3; 
  result = (mae::fl::laban::mv::space_measurement *)new SwigDirector_space_measurement(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1space_1measurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::mv::space_measurement *)new SwigDirector_space_measurement(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1space_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_space_1measurement_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_space)((mae::fl::laban::mv::space_measurement const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_space_1measurement_1get_1degree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::mv::space_measurement const *)arg1)->get_degree();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_space_1measurement_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_space_direction)((mae::fl::laban::mv::space_measurement const *)arg1)->get_direction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_space_1measurement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::space_measurement const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_space_1measurement_1equalsSwigExplicitspace_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xmlSwigExplicitspace_1measurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xmlSwigExplicitspace_1measurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xmlSwigExplicitspace_1measurement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1xmlSwigExplicitspace_1measurement_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1svgSwigExplicitspace_1measurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1svgSwigExplicitspace_1measurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_space_1measurement_1strSwigExplicitspace_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->mae::fl::laban::mv::space_measurement::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_space_1measurement_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *obj = *((std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_space_measurement *director = dynamic_cast<SwigDirector_space_measurement *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_space_1measurement_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::space_measurement *obj = *((mae::fl::laban::mv::space_measurement **)&objarg);
  SwigDirector_space_measurement *director = dynamic_cast<SwigDirector_space_measurement *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_direction)jarg1; 
  result = mae::fl::laban::mv::e_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1direction_1c_1dir(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::dir(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_direction >((const std::vector< mae::fl::laban::mv::e_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_direction_c *)new mae::fl::laban::mv::e_direction_c();
  *(mae::fl::laban::mv::e_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_direction_c *arg1 = (mae::fl::laban::mv::e_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1direction_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_direction > *)new std::vector< mae::fl::laban::mv::e_direction >();
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1direction_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_direction >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_direction > *)new std::vector< mae::fl::laban::mv::e_direction >(arg1);
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1direction_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1direction_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1direction_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_direction >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1direction_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1direction_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1direction_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_direction >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1direction_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1direction_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_direction const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1direction_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1contact_1hook_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_contact_hook)jarg1; 
  result = mae::fl::laban::mv::e_contact_hook_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1contact_1hook_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_contact_hook_c::vec();
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = new std::vector< mae::fl::laban::mv::e_contact_hook >((const std::vector< mae::fl::laban::mv::e_contact_hook > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1contact_1hook_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_contact_hook)mae::fl::laban::mv::e_contact_hook_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1contact_1hook_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_contact_hook_c *)new mae::fl::laban::mv::e_contact_hook_c();
  *(mae::fl::laban::mv::e_contact_hook_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1contact_1hook_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_contact_hook_c *arg1 = (mae::fl::laban::mv::e_contact_hook_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_contact_hook_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1contact_1hook_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_contact_hook > *)new std::vector< mae::fl::laban::mv::e_contact_hook >();
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1contact_1hook_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_contact_hook > *)new std::vector< mae::fl::laban::mv::e_contact_hook >(arg1);
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1contact_1hook_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_contact_hook const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1contact_1hook_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  mae::fl::laban::mv::e_contact_hook arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  arg7 = (mae::fl::laban::mv::e_contact_hook)jarg7; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1direction_1symbol_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  result = (mae::fl::laban::mv::direction_symbol *)new SwigDirector_direction_symbol(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1direction_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1vertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_level)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_vertical();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_direction)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_horizontal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1modification_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_modification_pin();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1relationship_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_relationship_pin();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1space_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_space_measurement();
  *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::space_measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_direction_1symbol_1get_1contact_1hook(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_contact_hook)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_contact_hook();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_direction_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::direction_symbol const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_direction_1symbol_1equalsSwigExplicitdirection_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xmlSwigExplicitdirection_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xmlSwigExplicitdirection_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1xmlSwigExplicitdirection_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1svgSwigExplicitdirection_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1svgSwigExplicitdirection_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_direction_1symbol_1strSwigExplicitdirection_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->mae::fl::laban::mv::direction_symbol::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_direction_1symbol_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *obj = *((std::shared_ptr< mae::fl::laban::mv::direction_symbol > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_direction_symbol *director = dynamic_cast<SwigDirector_direction_symbol *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_direction_1symbol_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::direction_symbol *obj = *((mae::fl::laban::mv::direction_symbol **)&objarg);
  SwigDirector_direction_symbol *director = dynamic_cast<SwigDirector_direction_symbol *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1turn_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  result = mae::fl::laban::mv::e_turn_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1turn_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_turn_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_turn_direction >((const std::vector< mae::fl::laban::mv::e_turn_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1turn_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_turn_direction)mae::fl::laban::mv::e_turn_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1turn_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_turn_direction_c *)new mae::fl::laban::mv::e_turn_direction_c();
  *(mae::fl::laban::mv::e_turn_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1turn_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_turn_direction_c *arg1 = (mae::fl::laban::mv::e_turn_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_turn_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1turn_1direction_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::mv::e_turn_direction > *)new std::vector< mae::fl::laban::mv::e_turn_direction >();
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1turn_1direction_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::mv::e_turn_direction > *)new std::vector< mae::fl::laban::mv::e_turn_direction >(arg1);
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1turn_1direction_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_turn_direction const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1turn_1direction_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1turn_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp3 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::turn_symbol *)new SwigDirector_turn_symbol(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1turn_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::mv::turn_symbol *)new SwigDirector_turn_symbol(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1turn_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  result = (mae::fl::laban::mv::turn_symbol *)new SwigDirector_turn_symbol(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1turn_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_turn_1symbol_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_turn_direction)((mae::fl::laban::mv::turn_symbol const *)arg1)->get_direction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_turn_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_turn_1symbol_1get_1degree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->get_degree();
  *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_turn_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::turn_symbol const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_turn_1symbol_1equalsSwigExplicitturn_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xmlSwigExplicitturn_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xmlSwigExplicitturn_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1xmlSwigExplicitturn_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1svgSwigExplicitturn_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1svgSwigExplicitturn_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_turn_1symbol_1strSwigExplicitturn_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->mae::fl::laban::mv::turn_symbol::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_turn_1symbol_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *obj = *((std::shared_ptr< mae::fl::laban::mv::turn_symbol > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_turn_symbol *director = dynamic_cast<SwigDirector_turn_symbol *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_turn_1symbol_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::turn_symbol *obj = *((mae::fl::laban::mv::turn_symbol **)&objarg);
  SwigDirector_turn_symbol *director = dynamic_cast<SwigDirector_turn_symbol *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1vibration_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp3 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::vibration_symbol *)new SwigDirector_vibration_symbol(jenv,arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1vibration_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::mv::vibration_symbol *)new SwigDirector_vibration_symbol(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1vibration_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_vibration_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_vibration_1symbol_1get_1displacement1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_displacement1();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_vibration_1symbol_1get_1displacement2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_displacement2();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_vibration_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::vibration_symbol const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_vibration_1symbol_1equalsSwigExplicitvibration_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xmlSwigExplicitvibration_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xmlSwigExplicitvibration_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1xmlSwigExplicitvibration_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1svgSwigExplicitvibration_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1svgSwigExplicitvibration_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_vibration_1symbol_1strSwigExplicitvibration_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->mae::fl::laban::mv::vibration_symbol::str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vibration_1symbol_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *obj = *((std::shared_ptr< mae::fl::laban::mv::vibration_symbol > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_vibration_symbol *director = dynamic_cast<SwigDirector_vibration_symbol *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_vibration_1symbol_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::mv::vibration_symbol *obj = *((mae::fl::laban::mv::vibration_symbol **)&objarg);
  SwigDirector_vibration_symbol *director = dynamic_cast<SwigDirector_vibration_symbol *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1part(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::i_part *)new SwigDirector_i_part(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::ps::i_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::i_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::i_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::i_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_part *director = dynamic_cast<SwigDirector_i_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::i_part *obj = *((mae::fl::laban::ps::i_part **)&objarg);
  SwigDirector_i_part *director = dynamic_cast<SwigDirector_i_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1endpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1endpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1endpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1endpoint_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1endpoint_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1endpoint_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1endpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::i_endpoint *)new SwigDirector_i_endpoint(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::i_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1endpoint_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *obj = *((std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_endpoint *director = dynamic_cast<SwigDirector_i_endpoint *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1endpoint_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::i_endpoint *obj = *((mae::fl::laban::ps::i_endpoint **)&objarg);
  SwigDirector_i_endpoint *director = dynamic_cast<SwigDirector_i_endpoint *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1area_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  result = mae::fl::laban::ps::e_area_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1area_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_area_c::vec();
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = new std::vector< mae::fl::laban::ps::e_area >((const std::vector< mae::fl::laban::ps::e_area > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1area_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_area)mae::fl::laban::ps::e_area_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1area_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_area_c *)new mae::fl::laban::ps::e_area_c();
  *(mae::fl::laban::ps::e_area_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1area_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_area_c *arg1 = (mae::fl::laban::ps::e_area_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_area_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1area_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_area > *)new std::vector< mae::fl::laban::ps::e_area >();
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1area_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_area > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_area >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_area > *)new std::vector< mae::fl::laban::ps::e_area >(arg1);
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1area_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1area_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1area_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_area >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1area_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1area_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1area_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_area >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_area >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1area_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_area >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_area_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1area_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_area >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_area_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_area const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1area_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1area_1part(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  mae::fl::laban::ps::area_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  result = (mae::fl::laban::ps::area_part *)new SwigDirector_area_part(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::area_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1area_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_area_1part_1get_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_area)((mae::fl::laban::ps::area_part const *)arg1)->get_area();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xmlSwigExplicitarea_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xmlSwigExplicitarea_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1xmlSwigExplicitarea_1part_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1svgSwigExplicitarea_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_area_1part_1svgSwigExplicitarea_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_area_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_area_1part_1get_1fixed_1endSwigExplicitarea_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_area_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_area_1part_1equalsSwigExplicitarea_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_area_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_area_1part_1equalsSwigExplicitarea_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->mae::fl::laban::ps::area_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_area_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::area_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::area_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_area_part *director = dynamic_cast<SwigDirector_area_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_area_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::area_part *obj = *((mae::fl::laban::ps::area_part **)&objarg);
  SwigDirector_area_part *director = dynamic_cast<SwigDirector_area_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1side_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  result = mae::fl::laban::ps::e_side_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1side_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_side_c::vec();
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_side >((const std::vector< mae::fl::laban::ps::e_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1side_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_side)mae::fl::laban::ps::e_side_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1side_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_side_c *)new mae::fl::laban::ps::e_side_c();
  *(mae::fl::laban::ps::e_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1side_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_side_c *arg1 = (mae::fl::laban::ps::e_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_side_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1side_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_side > *)new std::vector< mae::fl::laban::ps::e_side >();
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1side_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_side >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_side > *)new std::vector< mae::fl::laban::ps::e_side >(arg1);
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1side_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1side_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1side_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_side >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1side_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1side_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1side_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_side >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_side >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1side_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_side >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_side_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1side_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_side >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_side_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_side const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1side_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1body_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  mae::fl::laban::ps::body_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::body_part *)new SwigDirector_body_part(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::body_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1body_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_body_1part_1get_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_side)((mae::fl::laban::ps::body_part const *)arg1)->get_side();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_body_1part_1get_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->get_part();
  *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xmlSwigExplicitbody_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xmlSwigExplicitbody_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1xmlSwigExplicitbody_1part_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1svgSwigExplicitbody_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_body_1part_1svgSwigExplicitbody_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_body_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::body_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_body_1part_1equalsSwigExplicitbody_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::body_part const *)arg1)->mae::fl::laban::ps::body_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_body_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::body_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::body_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_body_part *director = dynamic_cast<SwigDirector_body_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_body_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::body_part *obj = *((mae::fl::laban::ps::body_part **)&objarg);
  SwigDirector_body_part *director = dynamic_cast<SwigDirector_body_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1i_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_i_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_i_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1i_1limb(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::i_limb *)new SwigDirector_i_limb(jenv);
  
  *(std::shared_ptr<  mae::fl::laban::ps::i_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::i_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1limb_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::i_limb > *obj = *((std::shared_ptr< mae::fl::laban::ps::i_limb > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_i_limb *director = dynamic_cast<SwigDirector_i_limb *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_i_1limb_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::i_limb *obj = *((mae::fl::laban::ps::i_limb **)&objarg);
  SwigDirector_i_limb *director = dynamic_cast<SwigDirector_i_limb *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1custom_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::custom_limb *)new SwigDirector_custom_limb(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1custom_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::fl::laban::ps::custom_limb *)new SwigDirector_custom_limb(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1custom_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_custom_1limb_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_custom_1limb_1get_1extremity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_extremity();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xmlSwigExplicitcustom_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xmlSwigExplicitcustom_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1xmlSwigExplicitcustom_1limb_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1svgSwigExplicitcustom_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_custom_1limb_1svgSwigExplicitcustom_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_custom_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_custom_1limb_1equalsSwigExplicitcustom_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_custom_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_custom_1limb_1equalsSwigExplicitcustom_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->mae::fl::laban::ps::custom_limb::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_custom_1limb_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::custom_limb > *obj = *((std::shared_ptr< mae::fl::laban::ps::custom_limb > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_custom_limb *director = dynamic_cast<SwigDirector_custom_limb *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_custom_1limb_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::custom_limb *obj = *((mae::fl::laban::ps::custom_limb **)&objarg);
  SwigDirector_custom_limb *director = dynamic_cast<SwigDirector_custom_limb *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1limb_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  result = mae::fl::laban::ps::e_limb_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_limb_c::vec();
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb >((const std::vector< mae::fl::laban::ps::e_limb > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1limb_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_limb)mae::fl::laban::ps::e_limb_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_limb_c *)new mae::fl::laban::ps::e_limb_c();
  *(mae::fl::laban::ps::e_limb_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1limb_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_c *arg1 = (mae::fl::laban::ps::e_limb_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_limb > *)new std::vector< mae::fl::laban::ps::e_limb >();
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_limb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_limb >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_limb > *)new std::vector< mae::fl::laban::ps::e_limb >(arg1);
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_limb >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1limb_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_limb >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1limb_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_limb const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1limb_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1default_1limb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  mae::fl::laban::ps::default_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  result = (mae::fl::laban::ps::default_limb *)new SwigDirector_default_limb(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::default_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1default_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_default_1limb_1get_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_limb)((mae::fl::laban::ps::default_limb const *)arg1)->get_limb();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xmlSwigExplicitdefault_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xmlSwigExplicitdefault_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1xmlSwigExplicitdefault_1limb_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1svgSwigExplicitdefault_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_default_1limb_1svgSwigExplicitdefault_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_default_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_default_1limb_1equalsSwigExplicitdefault_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_default_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_default_1limb_1equalsSwigExplicitdefault_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->mae::fl::laban::ps::default_limb::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_default_1limb_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::default_limb > *obj = *((std::shared_ptr< mae::fl::laban::ps::default_limb > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_default_limb *director = dynamic_cast<SwigDirector_default_limb *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_default_1limb_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::default_limb *obj = *((mae::fl::laban::ps::default_limb **)&objarg);
  SwigDirector_default_limb *director = dynamic_cast<SwigDirector_default_limb *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1digit_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  result = mae::fl::laban::ps::e_digit_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1digit_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_digit_c::vec();
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = new std::vector< mae::fl::laban::ps::e_digit >((const std::vector< mae::fl::laban::ps::e_digit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1digit_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_digit)mae::fl::laban::ps::e_digit_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1digit_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_digit_c *)new mae::fl::laban::ps::e_digit_c();
  *(mae::fl::laban::ps::e_digit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1digit_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_digit_c *arg1 = (mae::fl::laban::ps::e_digit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_digit_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1digit_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_digit > *)new std::vector< mae::fl::laban::ps::e_digit >();
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1digit_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_digit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_digit >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_digit > *)new std::vector< mae::fl::laban::ps::e_digit >(arg1);
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1digit_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1digit_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1digit_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_digit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1digit_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1digit_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1digit_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_digit >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1digit_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1digit_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_digit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1digit_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1digit_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::ps::digit_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::ps::digit_part *)new SwigDirector_digit_part(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::digit_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1digit_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_digit_1part_1get_1digit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_digit)((mae::fl::laban::ps::digit_part const *)arg1)->get_digit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_digit_1part_1get_1knuckle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::ps::digit_part const *)arg1)->get_knuckle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xmlSwigExplicitdigit_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xmlSwigExplicitdigit_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1xmlSwigExplicitdigit_1part_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1svgSwigExplicitdigit_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_digit_1part_1svgSwigExplicitdigit_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_digit_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_digit_1part_1get_1fixed_1endSwigExplicitdigit_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_digit_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_digit_1part_1equalsSwigExplicitdigit_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_digit_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_digit_1part_1equalsSwigExplicitdigit_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->mae::fl::laban::ps::digit_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_digit_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::digit_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::digit_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_digit_part *director = dynamic_cast<SwigDirector_digit_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_digit_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::digit_part *obj = *((mae::fl::laban::ps::digit_part **)&objarg);
  SwigDirector_digit_part *director = dynamic_cast<SwigDirector_digit_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1limb_1side_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  result = mae::fl::laban::ps::e_limb_side_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1side_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_limb_side_c::vec();
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb_side >((const std::vector< mae::fl::laban::ps::e_limb_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1limb_1side_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_limb_side)mae::fl::laban::ps::e_limb_side_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1side_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_limb_side_c *)new mae::fl::laban::ps::e_limb_side_c();
  *(mae::fl::laban::ps::e_limb_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1limb_1side_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_side_c *arg1 = (mae::fl::laban::ps::e_limb_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_side_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1side_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_limb_side > *)new std::vector< mae::fl::laban::ps::e_limb_side >();
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1limb_1side_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_limb_side > *)new std::vector< mae::fl::laban::ps::e_limb_side >(arg1);
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1limb_1side_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_limb_side const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1limb_1side_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1surface_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  mae::fl::laban::ps::surface_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::surface_part *)new SwigDirector_surface_part(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::surface_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1surface_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_surface_1part_1get_1limb_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_limb_side)((mae::fl::laban::ps::surface_part const *)arg1)->get_limb_side();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_surface_1part_1get_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->get_limb();
  *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xmlSwigExplicitsurface_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xmlSwigExplicitsurface_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1xmlSwigExplicitsurface_1part_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1svgSwigExplicitsurface_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_surface_1part_1svgSwigExplicitsurface_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_surface_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::surface_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_surface_1part_1equalsSwigExplicitsurface_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::surface_part const *)arg1)->mae::fl::laban::ps::surface_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_surface_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::surface_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::surface_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_surface_part *director = dynamic_cast<SwigDirector_surface_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_surface_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::surface_part *obj = *((mae::fl::laban::ps::surface_part **)&objarg);
  SwigDirector_surface_part *director = dynamic_cast<SwigDirector_surface_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_e_1joint_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  result = mae::fl::laban::ps::e_joint_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1joint_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_joint_c::vec();
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = new std::vector< mae::fl::laban::ps::e_joint >((const std::vector< mae::fl::laban::ps::e_joint > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1joint_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_joint)mae::fl::laban::ps::e_joint_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1joint_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_joint_c *)new mae::fl::laban::ps::e_joint_c();
  *(mae::fl::laban::ps::e_joint_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1joint_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_joint_c *arg1 = (mae::fl::laban::ps::e_joint_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_joint_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1joint_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::fl::laban::ps::e_joint > *)new std::vector< mae::fl::laban::ps::e_joint >();
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1e_1joint_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_joint >::size_type)jarg1; 
  result = (std::vector< mae::fl::laban::ps::e_joint > *)new std::vector< mae::fl::laban::ps::e_joint >(arg1);
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1joint_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_e_1joint_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  result = ((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1joint_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_joint >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_e_1joint_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  result = (bool)((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1joint_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1joint_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_joint >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_e_1joint_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_e_1joint_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_joint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1e_1joint_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1joint_1part(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  mae::fl::laban::ps::joint_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  result = (mae::fl::laban::ps::joint_part *)new SwigDirector_joint_part(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::joint_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1joint_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_maeJNI_joint_1part_1get_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_joint)((mae::fl::laban::ps::joint_part const *)arg1)->get_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xmlSwigExplicitjoint_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xmlSwigExplicitjoint_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1xmlSwigExplicitjoint_1part_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1svgSwigExplicitjoint_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_joint_1part_1svgSwigExplicitjoint_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_joint_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_joint_1part_1get_1fixed_1endSwigExplicitjoint_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_joint_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_joint_1part_1equalsSwigExplicitjoint_1part_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_joint_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_joint_1part_1equalsSwigExplicitjoint_1part_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->mae::fl::laban::ps::joint_part::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_joint_1part_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::joint_part > *obj = *((std::shared_ptr< mae::fl::laban::ps::joint_part > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_joint_part *director = dynamic_cast<SwigDirector_joint_part *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_joint_1part_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::joint_part *obj = *((mae::fl::laban::ps::joint_part **)&objarg);
  SwigDirector_joint_part *director = dynamic_cast<SwigDirector_joint_part *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1prop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mae::fl::laban::ps::prop *)new SwigDirector_prop(jenv,arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_new_1prop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::prop *)new SwigDirector_prop(jenv,arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_delete_1prop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1get_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->get_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xmlSwigExplicitprop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xmlSwigExplicitprop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1xmlSwigExplicitprop_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1svgSwigExplicitprop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::svg(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_maeJNI_prop_1svgSwigExplicitprop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::svg(arg2,arg3,arg4,arg5,arg6);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_prop_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::prop const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_maeJNI_prop_1equalsSwigExplicitprop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::prop const *)arg1)->mae::fl::laban::ps::prop::equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_prop_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< mae::fl::laban::ps::prop > *obj = *((std::shared_ptr< mae::fl::laban::ps::prop > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_prop *director = dynamic_cast<SwigDirector_prop *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_maejava_maeJNI_prop_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  mae::fl::laban::ps::prop *obj = *((mae::fl::laban::ps::prop **)&objarg);
  SwigDirector_prop *director = dynamic_cast<SwigDirector_prop *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_general_1enriched_1pose_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::general_enriched_pose > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::general_enriched_pose > **)&jarg1;
    *(std::shared_ptr< mae::general_pose > **)&baseptr = argp1 ? new std::shared_ptr< mae::general_pose >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1skeleton_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::fl_skeleton > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg1;
    *(std::shared_ptr< mae::general_skeleton > **)&baseptr = argp1 ? new std::shared_ptr< mae::general_skeleton >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1pose_1detector_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::fl_pose_detector > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jarg1;
    *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1recognizer_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
    *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_laban_1sequence_1generator_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg1;
    *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_fl_1movement_1controller_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&baseptr = *(mae::fl::fl_movement_controller **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_movement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::movement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::movement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_path_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::path > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::path > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_relationship_1bow_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::relationship_bow > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::relationship_bow > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_pin_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::pin > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_room_1direction_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::room_direction > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::room_direction > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_accent_1sign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::accent_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::accent_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_dynamic_1sign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::dynamic_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_cancellation_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_space_1measurement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_direction_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::direction_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::direction_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_turn_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::turn_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::turn_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_vibration_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::vibration_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1endpoint_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_area_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::area_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::area_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_body_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::body_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::body_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_i_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_custom_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::custom_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::custom_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_default_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::default_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::default_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_digit_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::digit_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::digit_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_surface_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::surface_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::surface_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_joint_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::joint_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::joint_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_maeJNI_prop_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::prop > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::prop > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_maejava_maeJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[474] = {
    {
      "SwigDirector_bone_get_id", "(Lmaejava/bone;)I" 
    },
    {
      "SwigDirector_bone_get_name", "(Lmaejava/bone;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bone_get_from", "(Lmaejava/bone;)I" 
    },
    {
      "SwigDirector_bone_get_to", "(Lmaejava/bone;)I" 
    },
    {
      "SwigDirector_bone_has_middle_joint", "(Lmaejava/bone;)Z" 
    },
    {
      "SwigDirector_bone_get_middle_joint", "(Lmaejava/bone;)I" 
    },
    {
      "SwigDirector_general_pose_set_direction", "(Lmaejava/general_pose;II)V" 
    },
    {
      "SwigDirector_general_pose_get_direction", "(Lmaejava/general_pose;I)I" 
    },
    {
      "SwigDirector_general_pose_set_distance", "(Lmaejava/general_pose;IID)V" 
    },
    {
      "SwigDirector_general_pose_get_distance", "(Lmaejava/general_pose;II)D" 
    },
    {
      "SwigDirector_general_pose_set_rotation", "(Lmaejava/general_pose;ID)V" 
    },
    {
      "SwigDirector_general_pose_get_rotation", "(Lmaejava/general_pose;I)D" 
    },
    {
      "SwigDirector_general_pose_get_body_parts", "(Lmaejava/general_pose;)J" 
    },
    {
      "SwigDirector_general_pose_get_directions", "(Lmaejava/general_pose;)J" 
    },
    {
      "SwigDirector_i_pose_listener_on_pose", "(Lmaejava/i_pose_listener;IJ)V" 
    },
    {
      "SwigDirector_general_enriched_pose_set_direction", "(Lmaejava/general_enriched_pose;II)V" 
    },
    {
      "SwigDirector_general_enriched_pose_get_direction", "(Lmaejava/general_enriched_pose;I)I" 
    },
    {
      "SwigDirector_general_enriched_pose_set_distance", "(Lmaejava/general_enriched_pose;IID)V" 
    },
    {
      "SwigDirector_general_enriched_pose_get_distance", "(Lmaejava/general_enriched_pose;II)D" 
    },
    {
      "SwigDirector_general_enriched_pose_set_rotation", "(Lmaejava/general_enriched_pose;ID)V" 
    },
    {
      "SwigDirector_general_enriched_pose_get_rotation", "(Lmaejava/general_enriched_pose;I)D" 
    },
    {
      "SwigDirector_general_enriched_pose_get_body_parts", "(Lmaejava/general_enriched_pose;)J" 
    },
    {
      "SwigDirector_general_enriched_pose_get_directions", "(Lmaejava/general_enriched_pose;)J" 
    },
    {
      "SwigDirector_general_enriched_pose_set_key_pose", "(Lmaejava/general_enriched_pose;IZ)V" 
    },
    {
      "SwigDirector_general_enriched_pose_is_key_pose", "(Lmaejava/general_enriched_pose;I)Z" 
    },
    {
      "SwigDirector_general_enriched_pose_set_in_motion", "(Lmaejava/general_enriched_pose;IZ)V" 
    },
    {
      "SwigDirector_general_enriched_pose_is_in_motion", "(Lmaejava/general_enriched_pose;I)Z" 
    },
    {
      "SwigDirector_vec3d_set_x", "(Lmaejava/vec3d;D)V" 
    },
    {
      "SwigDirector_vec3d_get_x", "(Lmaejava/vec3d;)D" 
    },
    {
      "SwigDirector_vec3d_set_y", "(Lmaejava/vec3d;D)V" 
    },
    {
      "SwigDirector_vec3d_get_y", "(Lmaejava/vec3d;)D" 
    },
    {
      "SwigDirector_vec3d_set_z", "(Lmaejava/vec3d;D)V" 
    },
    {
      "SwigDirector_vec3d_get_z", "(Lmaejava/vec3d;)D" 
    },
    {
      "SwigDirector_vec3d_str", "(Lmaejava/vec3d;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_general_joint_set_x", "(Lmaejava/general_joint;D)V" 
    },
    {
      "SwigDirector_general_joint_get_x", "(Lmaejava/general_joint;)D" 
    },
    {
      "SwigDirector_general_joint_set_y", "(Lmaejava/general_joint;D)V" 
    },
    {
      "SwigDirector_general_joint_get_y", "(Lmaejava/general_joint;)D" 
    },
    {
      "SwigDirector_general_joint_set_z", "(Lmaejava/general_joint;D)V" 
    },
    {
      "SwigDirector_general_joint_get_z", "(Lmaejava/general_joint;)D" 
    },
    {
      "SwigDirector_general_joint_set_valid", "(Lmaejava/general_joint;Z)V" 
    },
    {
      "SwigDirector_general_joint_is_valid", "(Lmaejava/general_joint;)Z" 
    },
    {
      "SwigDirector_general_joint_set_confidence", "(Lmaejava/general_joint;D)V" 
    },
    {
      "SwigDirector_general_joint_get_confidence", "(Lmaejava/general_joint;)D" 
    },
    {
      "SwigDirector_general_joint_set_rotation", "(Lmaejava/general_joint;D)V" 
    },
    {
      "SwigDirector_general_joint_get_rotation", "(Lmaejava/general_joint;)D" 
    },
    {
      "SwigDirector_general_joint_vec", "(Lmaejava/general_joint;)J" 
    },
    {
      "SwigDirector_general_joint_equals_val", "(Lmaejava/general_joint;J)Z" 
    },
    {
      "SwigDirector_general_joint_equals", "(Lmaejava/general_joint;J)Z" 
    },
    {
      "SwigDirector_general_joint_str", "(Lmaejava/general_joint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_basis_get_u", "(Lmaejava/basis;)J" 
    },
    {
      "SwigDirector_basis_get_r", "(Lmaejava/basis;)J" 
    },
    {
      "SwigDirector_basis_get_t", "(Lmaejava/basis;)J" 
    },
    {
      "SwigDirector_basis_get_position_vector", "(Lmaejava/basis;)J" 
    },
    {
      "SwigDirector_basis_set_u", "(Lmaejava/basis;J)V" 
    },
    {
      "SwigDirector_basis_set_r", "(Lmaejava/basis;J)V" 
    },
    {
      "SwigDirector_basis_set_t", "(Lmaejava/basis;J)V" 
    },
    {
      "SwigDirector_basis_set_position_vector", "(Lmaejava/basis;J)V" 
    },
    {
      "SwigDirector_basis_str", "(Lmaejava/basis;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_general_skeleton_set_joint", "(Lmaejava/general_skeleton;IJ)V" 
    },
    {
      "SwigDirector_general_skeleton_get_joint", "(Lmaejava/general_skeleton;I)J" 
    },
    {
      "SwigDirector_general_skeleton_get_hierarchy", "(Lmaejava/general_skeleton;)J" 
    },
    {
      "SwigDirector_general_skeleton_set_hierarchy", "(Lmaejava/general_skeleton;J)V" 
    },
    {
      "SwigDirector_general_skeleton_set_top_down", "(Lmaejava/general_skeleton;J)V" 
    },
    {
      "SwigDirector_general_skeleton_get_top_down", "(Lmaejava/general_skeleton;)J" 
    },
    {
      "SwigDirector_general_skeleton_set_right_left", "(Lmaejava/general_skeleton;J)V" 
    },
    {
      "SwigDirector_general_skeleton_get_right_left", "(Lmaejava/general_skeleton;)J" 
    },
    {
      "SwigDirector_general_skeleton_set_weight", "(Lmaejava/general_skeleton;J)V" 
    },
    {
      "SwigDirector_general_skeleton_get_weight", "(Lmaejava/general_skeleton;)J" 
    },
    {
      "SwigDirector_general_skeleton_str", "(Lmaejava/general_skeleton;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_general_skeleton_ply_str", "(Lmaejava/general_skeleton;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_general_skeleton_ply_file", "(Lmaejava/general_skeleton;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_fl_skeleton_set_joint", "(Lmaejava/fl_skeleton;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_joint", "(Lmaejava/fl_skeleton;I)J" 
    },
    {
      "SwigDirector_fl_skeleton_get_hierarchy", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_set_hierarchy", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_set_top_down", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_top_down", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_set_right_left", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_right_left", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_set_weight", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_weight", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_str", "(Lmaejava/fl_skeleton;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_fl_skeleton_ply_str", "(Lmaejava/fl_skeleton;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_fl_skeleton_ply_file", "(Lmaejava/fl_skeleton;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_fl_skeleton_set_torso_basis", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_torso_basis", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_set_orig_skeleton", "(Lmaejava/fl_skeleton;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_get_orig_skeleton", "(Lmaejava/fl_skeleton;)J" 
    },
    {
      "SwigDirector_fl_skeleton_pose_detector_pose", "(Lmaejava/fl_skeleton_pose_detector;JJJ)J" 
    },
    {
      "SwigDirector_fl_pose_detector_pose", "(Lmaejava/fl_pose_detector;JJJ)J" 
    },
    {
      "SwigDirector_fl_pose_detector_set_hysteresis_val", "(Lmaejava/fl_pose_detector;D)V" 
    },
    {
      "SwigDirector_fl_pose_detector_get_hysteresis_val", "(Lmaejava/fl_pose_detector;)D" 
    },
    {
      "SwigDirector_fl_pose_detector_vector_pose", "(Lmaejava/fl_pose_detector;JJJ)J" 
    },
    {
      "SwigDirector_i_pre_sign_xml__SWIG_0", "(Lmaejava/i_pre_sign;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_pre_sign_xml__SWIG_1", "(Lmaejava/i_pre_sign;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_pre_sign_xml__SWIG_2", "(Lmaejava/i_pre_sign;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_pre_sign_svg__SWIG_0", "(Lmaejava/i_pre_sign;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_pre_sign_svg__SWIG_1", "(Lmaejava/i_pre_sign;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_pre_sign_equals", "(Lmaejava/i_pre_sign;J)Z" 
    },
    {
      "SwigDirector_column_definition_xml__SWIG_0", "(Lmaejava/column_definition;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_column_definition_xml__SWIG_1", "(Lmaejava/column_definition;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_column_definition_xml__SWIG_2", "(Lmaejava/column_definition;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_column_definition_svg", "(Lmaejava/column_definition;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_column_definition_equals", "(Lmaejava/column_definition;J)Z" 
    },
    {
      "SwigDirector_i_movement_get_column", "(Lmaejava/i_movement;)I" 
    },
    {
      "SwigDirector_i_movement_get_measure", "(Lmaejava/i_movement;)J" 
    },
    {
      "SwigDirector_i_movement_get_beat", "(Lmaejava/i_movement;)D" 
    },
    {
      "SwigDirector_i_movement_get_duration", "(Lmaejava/i_movement;)D" 
    },
    {
      "SwigDirector_i_movement_equals", "(Lmaejava/i_movement;J)Z" 
    },
    {
      "SwigDirector_i_movement_symbol_equals", "(Lmaejava/i_movement;J)Z" 
    },
    {
      "SwigDirector_i_movement_xml__SWIG_0", "(Lmaejava/i_movement;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_movement_xml__SWIG_1", "(Lmaejava/i_movement;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_movement_xml__SWIG_2", "(Lmaejava/i_movement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_movement_svg", "(Lmaejava/i_movement;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_movement_recreate", "(Lmaejava/i_movement;JJDD)J" 
    },
    {
      "SwigDirector_i_movement_str", "(Lmaejava/i_movement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_get_version", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_set_authors", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_add_author", "(Lmaejava/laban_sequence;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_laban_sequence_get_authors", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_set_title", "(Lmaejava/laban_sequence;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_laban_sequence_get_title", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_set_description", "(Lmaejava/laban_sequence;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_laban_sequence_get_description", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_set_measures", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_measures", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_set_time_unit", "(Lmaejava/laban_sequence;I)V" 
    },
    {
      "SwigDirector_laban_sequence_get_time_unit", "(Lmaejava/laban_sequence;)I" 
    },
    {
      "SwigDirector_laban_sequence_set_beat_duration", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_beat_duration", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_set_beats", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_beats", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_set_column_definitions", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_add_column_definition", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_column_definitions", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_get_column_definition", "(Lmaejava/laban_sequence;I)J" 
    },
    {
      "SwigDirector_laban_sequence_clear_column_definitions", "(Lmaejava/laban_sequence;)V" 
    },
    {
      "SwigDirector_laban_sequence_get_columns", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_set_movements", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_movements", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_add_movement", "(Lmaejava/laban_sequence;J)V" 
    },
    {
      "SwigDirector_laban_sequence_get_column_movements", "(Lmaejava/laban_sequence;I)J" 
    },
    {
      "SwigDirector_laban_sequence_get_last_movement", "(Lmaejava/laban_sequence;)J" 
    },
    {
      "SwigDirector_laban_sequence_clear_movements", "(Lmaejava/laban_sequence;)V" 
    },
    {
      "SwigDirector_laban_sequence_xml__SWIG_0", "(Lmaejava/laban_sequence;ZJLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml__SWIG_1", "(Lmaejava/laban_sequence;ZJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml__SWIG_2", "(Lmaejava/laban_sequence;Z)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml__SWIG_3", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml_namespace_header__SWIG_0", "(Lmaejava/laban_sequence;Ljava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml_namespace_header__SWIG_1", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml_schema_location", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml_namespace_uri", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_xml_file", "(Lmaejava/laban_sequence;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_laban_sequence_svg", "(Lmaejava/laban_sequence;JJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_svg_file__SWIG_0", "(Lmaejava/laban_sequence;Ljava/lang/String;JJ)V" 
    },
    {
      "SwigDirector_laban_sequence_svg_file__SWIG_1", "(Lmaejava/laban_sequence;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_laban_sequence_svg_file__SWIG_2", "(Lmaejava/laban_sequence;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_laban_sequence_str", "(Lmaejava/laban_sequence;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_svg_fill_pattern", "(Lmaejava/laban_sequence;Ljava/lang/String;JJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_movement_decision_maker_set_recognition_tolerance", "(Lmaejava/i_movement_decision_maker;D)V" 
    },
    {
      "SwigDirector_i_movement_decision_maker_get_recognition_tolerance", "(Lmaejava/i_movement_decision_maker;)D" 
    },
    {
      "SwigDirector_i_movement_decision_maker_decide_match", "(Lmaejava/i_movement_decision_maker;JJJJ)Z" 
    },
    {
      "SwigDirector_i_movement_decision_maker_decide_insertion", "(Lmaejava/i_movement_decision_maker;JJJJ)Z" 
    },
    {
      "SwigDirector_i_movement_decision_maker_position_okay", "(Lmaejava/i_movement_decision_maker;DDZ)Z" 
    },
    {
      "SwigDirector_rewriting_forest_get_tolerance", "(Lmaejava/rewriting_forest;)D" 
    },
    {
      "SwigDirector_rewriting_forest_set_tolerance", "(Lmaejava/rewriting_forest;D)V" 
    },
    {
      "SwigDirector_rewriting_forest_replacements", "(Lmaejava/rewriting_forest;J)J" 
    },
    {
      "SwigDirector_rewriting_forest_add_rule__SWIG_0", "(Lmaejava/rewriting_forest;JJ)V" 
    },
    {
      "SwigDirector_rewriting_forest_add_rule__SWIG_1", "(Lmaejava/rewriting_forest;J)V" 
    },
    {
      "SwigDirector_rewriting_forest_str", "(Lmaejava/rewriting_forest;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_mov_vector_vector_dec_val_get_sequence", "(Lmaejava/i_mov_vector_vector_dec_val;)J" 
    },
    {
      "SwigDirector_i_mov_vector_vector_dec_val_get_value", "(Lmaejava/i_mov_vector_vector_dec_val;)J" 
    },
    {
      "SwigDirector_decision_forest_set_recognition_tolerance", "(Lmaejava/decision_forest;D)V" 
    },
    {
      "SwigDirector_decision_forest_set_cooldown", "(Lmaejava/decision_forest;Z)V" 
    },
    {
      "SwigDirector_decision_forest_get_cooldown", "(Lmaejava/decision_forest;)Z" 
    },
    {
      "SwigDirector_decision_forest_get_sequence_length", "(Lmaejava/decision_forest;J)I" 
    },
    {
      "SwigDirector_decision_forest_add_sequence", "(Lmaejava/decision_forest;J)V" 
    },
    {
      "SwigDirector_decision_forest_remove_sequence__SWIG_0", "(Lmaejava/decision_forest;J)Z" 
    },
    {
      "SwigDirector_decision_forest_remove_sequence__SWIG_1", "(Lmaejava/decision_forest;J)Z" 
    },
    {
      "SwigDirector_decision_forest_clear", "(Lmaejava/decision_forest;)V" 
    },
    {
      "SwigDirector_decision_forest_add_rewriting_rule__SWIG_0", "(Lmaejava/decision_forest;JJ)V" 
    },
    {
      "SwigDirector_decision_forest_add_rewriting_rule__SWIG_1", "(Lmaejava/decision_forest;J)V" 
    },
    {
      "SwigDirector_decision_forest_get_sequences", "(Lmaejava/decision_forest;)J" 
    },
    {
      "SwigDirector_decision_forest_find_submatches", "(Lmaejava/decision_forest;JJ)J" 
    },
    {
      "SwigDirector_decision_forest_str", "(Lmaejava/decision_forest;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_dec_maker_set_recognition_tolerance", "(Lmaejava/i_movement_decision_maker;D)V" 
    },
    {
      "SwigDirector_i_dec_maker_get_recognition_tolerance", "(Lmaejava/i_movement_decision_maker;)D" 
    },
    {
      "SwigDirector_i_dec_maker_decide_match", "(Lmaejava/i_movement_decision_maker;JJJJ)Z" 
    },
    {
      "SwigDirector_i_dec_maker_decide_insertion", "(Lmaejava/i_movement_decision_maker;JJJJ)Z" 
    },
    {
      "SwigDirector_i_dec_maker_position_okay", "(Lmaejava/i_movement_decision_maker;DDZ)Z" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_register_sequence", "(Lmaejava/laban_sequence_sequence_recognizer;J)V" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_deregister_sequence__SWIG_0", "(Lmaejava/laban_sequence_sequence_recognizer;J)Z" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_deregister_sequence__SWIG_1", "(Lmaejava/laban_sequence_sequence_recognizer;J)Z" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_clear_registered_sequences", "(Lmaejava/laban_sequence_sequence_recognizer;)V" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_get_sequence_length", "(Lmaejava/laban_sequence_sequence_recognizer;J)I" 
    },
    {
      "SwigDirector_laban_sequence_sequence_recognizer_recognize_sequence", "(Lmaejava/laban_sequence_sequence_recognizer;JJ)J" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_register_sequence", "(Lmaejava/laban_sequence_recognizer;J)V" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_deregister_sequence__SWIG_0", "(Lmaejava/laban_sequence_recognizer;J)Z" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_deregister_sequence__SWIG_1", "(Lmaejava/laban_sequence_recognizer;J)Z" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_clear_registered_sequences", "(Lmaejava/laban_sequence_recognizer;)V" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_get_sequence_length", "(Lmaejava/laban_sequence_recognizer;J)I" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_recognize_sequence", "(Lmaejava/laban_sequence_recognizer;JJ)J" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_set_recognition_tolerance", "(Lmaejava/laban_sequence_recognizer;D)V" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_get_decision_forest", "(Lmaejava/laban_sequence_recognizer;)J" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_get_registered_sequences", "(Lmaejava/laban_sequence_recognizer;)J" 
    },
    {
      "SwigDirector_laban_sequence_recognizer_str", "(Lmaejava/laban_sequence_recognizer;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_laban_sequence_sequence_generator_generate_sequence", "(Lmaejava/laban_sequence_sequence_generator;DJJ)J" 
    },
    {
      "SwigDirector_laban_sequence_generator_generate_sequence", "(Lmaejava/laban_sequence_generator;DJJ)J" 
    },
    {
      "SwigDirector_laban_sequence_sequence_listener_on_sequence", "(Lmaejava/laban_sequence_sequence_listener;IJ)V" 
    },
    {
      "SwigDirector_laban_sequence_recognition_listener_on_recognition__SWIG_0", "(Lmaejava/laban_sequence_recognition_listener;IJ)V" 
    },
    {
      "SwigDirector_laban_sequence_recognition_listener_on_recognition__SWIG_1", "(Lmaejava/laban_sequence_recognition_listener;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_detect_movement", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;IDJJ)J" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_set_buffer", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;I)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_clear_buffer", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_add_listener", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_remove_listener", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_clear_listeners", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_detector_notify_listeners", "(Lmaejava/fl_skeleton_laban_sequence_movement_detector;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_next_frame", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_register_sequence", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_deregister_sequence", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_registered_sequences", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_set_no_buffer_size_update", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;Z)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_buffer", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_current_sequence", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_0", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_0", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_1", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_1", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_add_listener__SWIG_2", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_remove_listener__SWIG_2", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_clear_listeners", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_notify_sequence_listeners", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_notify_recognition_listeners", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_movement_detector", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_skeleton_laban_sequence_movement_controller_get_sequence_recognizer", "(Lmaejava/fl_skeleton_laban_sequence_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_next_frame", "(Lmaejava/fl_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_movement_controller_register_sequence", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_deregister_sequence", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_clear_registered_sequences", "(Lmaejava/fl_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_movement_controller_set_no_buffer_size_update", "(Lmaejava/fl_movement_controller;Z)V" 
    },
    {
      "SwigDirector_fl_movement_controller_clear_buffer", "(Lmaejava/fl_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_movement_controller_get_current_sequence", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_add_listener__SWIG_0", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_remove_listener__SWIG_0", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_add_listener__SWIG_1", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_remove_listener__SWIG_1", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_add_listener__SWIG_2", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_remove_listener__SWIG_2", "(Lmaejava/fl_movement_controller;J)V" 
    },
    {
      "SwigDirector_fl_movement_controller_clear_listeners", "(Lmaejava/fl_movement_controller;)V" 
    },
    {
      "SwigDirector_fl_movement_controller_notify_sequence_listeners", "(Lmaejava/fl_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_movement_controller_notify_recognition_listeners", "(Lmaejava/fl_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_movement_controller_get_movement_detector", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_get_sequence_recognizer", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_next_frame", "(Lmaejava/fl_movement_controller;IJ)V" 
    },
    {
      "SwigDirector_fl_movement_controller_set_recognition_tolerance", "(Lmaejava/fl_movement_controller;D)V" 
    },
    {
      "SwigDirector_fl_movement_controller_get_laban_sequence_recognizer", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_get_laban_sequence_generator", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_fl_movement_controller_get_fl_pose_detector", "(Lmaejava/fl_movement_controller;)J" 
    },
    {
      "SwigDirector_bvh_spec_get_id_map", "(Lmaejava/bvh_spec;)J" 
    },
    {
      "SwigDirector_bvh_spec_get_torso_map", "(Lmaejava/bvh_spec;)J" 
    },
    {
      "SwigDirector_bvh_spec_get_left_anchor", "(Lmaejava/bvh_spec;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_spec_get_right_anchor", "(Lmaejava/bvh_spec;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_spec_get_top_anchor", "(Lmaejava/bvh_spec;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_spec_get_bottom_anchor", "(Lmaejava/bvh_spec;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_controller_bvh_str__SWIG_0", "(Lmaejava/bvh_controller;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_controller_bvh_str__SWIG_1", "(Lmaejava/bvh_controller;JD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_controller_bvh_str__SWIG_2", "(Lmaejava/bvh_controller;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_bvh_controller_print_bvh_file__SWIG_0", "(Lmaejava/bvh_controller;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_bvh_controller_print_bvh_file__SWIG_1", "(Lmaejava/bvh_controller;JLjava/lang/String;)V" 
    },
    {
      "SwigDirector_bvh_controller_read_bvh_str", "(Lmaejava/bvh_controller;Ljava/lang/String;J)J" 
    },
    {
      "SwigDirector_bvh_controller_read_bvh_file", "(Lmaejava/bvh_controller;Ljava/lang/String;J)J" 
    },
    {
      "SwigDirector_laban_sequence_reader_read_sequence_file", "(Lmaejava/laban_sequence_reader;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_laban_sequence_reader_read_sequence_str", "(Lmaejava/laban_sequence_reader;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_i_symbol_equals", "(Lmaejava/i_symbol;J)Z" 
    },
    {
      "SwigDirector_i_symbol_xml__SWIG_0", "(Lmaejava/i_symbol;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_symbol_xml__SWIG_1", "(Lmaejava/i_symbol;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_symbol_xml__SWIG_2", "(Lmaejava/i_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_symbol_svg__SWIG_0", "(Lmaejava/i_symbol;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_symbol_svg__SWIG_1", "(Lmaejava/i_symbol;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_symbol_str", "(Lmaejava/i_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_movement_get_column", "(Lmaejava/movement;)I" 
    },
    {
      "SwigDirector_movement_get_measure", "(Lmaejava/movement;)J" 
    },
    {
      "SwigDirector_movement_get_beat", "(Lmaejava/movement;)D" 
    },
    {
      "SwigDirector_movement_get_duration", "(Lmaejava/movement;)D" 
    },
    {
      "SwigDirector_movement_equals", "(Lmaejava/movement;J)Z" 
    },
    {
      "SwigDirector_movement_symbol_equals", "(Lmaejava/movement;J)Z" 
    },
    {
      "SwigDirector_movement_xml__SWIG_0", "(Lmaejava/movement;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_movement_xml__SWIG_1", "(Lmaejava/movement;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_movement_xml__SWIG_2", "(Lmaejava/movement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_movement_svg", "(Lmaejava/movement;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_movement_recreate", "(Lmaejava/movement;JJDD)J" 
    },
    {
      "SwigDirector_movement_str", "(Lmaejava/movement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_path_get_column", "(Lmaejava/path;)I" 
    },
    {
      "SwigDirector_path_get_measure", "(Lmaejava/path;)J" 
    },
    {
      "SwigDirector_path_get_beat", "(Lmaejava/path;)D" 
    },
    {
      "SwigDirector_path_get_duration", "(Lmaejava/path;)D" 
    },
    {
      "SwigDirector_path_equals", "(Lmaejava/path;J)Z" 
    },
    {
      "SwigDirector_path_symbol_equals", "(Lmaejava/path;J)Z" 
    },
    {
      "SwigDirector_path_xml__SWIG_0", "(Lmaejava/path;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_path_xml__SWIG_1", "(Lmaejava/path;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_path_xml__SWIG_2", "(Lmaejava/path;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_path_svg", "(Lmaejava/path;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_path_recreate", "(Lmaejava/path;JJDD)J" 
    },
    {
      "SwigDirector_path_str", "(Lmaejava/path;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_dynamics_sign_equals", "(Lmaejava/i_dynamics_sign;J)Z" 
    },
    {
      "SwigDirector_i_dynamics_sign_xml__SWIG_0", "(Lmaejava/i_dynamics_sign;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_dynamics_sign_xml__SWIG_1", "(Lmaejava/i_dynamics_sign;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_dynamics_sign_xml__SWIG_2", "(Lmaejava/i_dynamics_sign;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_endpoint_xml__SWIG_0", "(Lmaejava/relationship_endpoint;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_endpoint_xml__SWIG_1", "(Lmaejava/relationship_endpoint;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_endpoint_xml__SWIG_2", "(Lmaejava/relationship_endpoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_endpoint_recreate", "(Lmaejava/relationship_endpoint;J)J" 
    },
    {
      "SwigDirector_relationship_endpoint_equals", "(Lmaejava/relationship_endpoint;J)Z" 
    },
    {
      "SwigDirector_relationship_bow_get_column", "(Lmaejava/relationship_bow;)I" 
    },
    {
      "SwigDirector_relationship_bow_get_measure", "(Lmaejava/relationship_bow;)J" 
    },
    {
      "SwigDirector_relationship_bow_get_beat", "(Lmaejava/relationship_bow;)D" 
    },
    {
      "SwigDirector_relationship_bow_get_duration", "(Lmaejava/relationship_bow;)D" 
    },
    {
      "SwigDirector_relationship_bow_equals", "(Lmaejava/relationship_bow;J)Z" 
    },
    {
      "SwigDirector_relationship_bow_symbol_equals", "(Lmaejava/relationship_bow;J)Z" 
    },
    {
      "SwigDirector_relationship_bow_xml__SWIG_0", "(Lmaejava/relationship_bow;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_bow_xml__SWIG_1", "(Lmaejava/relationship_bow;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_bow_xml__SWIG_2", "(Lmaejava/relationship_bow;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_bow_svg", "(Lmaejava/relationship_bow;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_relationship_bow_recreate", "(Lmaejava/relationship_bow;JJDD)J" 
    },
    {
      "SwigDirector_relationship_bow_str", "(Lmaejava/relationship_bow;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_equals", "(Lmaejava/i_degree_sign;J)Z" 
    },
    {
      "SwigDirector_i_degree_sign_xml__SWIG_0", "(Lmaejava/i_degree_sign;JLjava/lang/String;Z)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_xml__SWIG_1", "(Lmaejava/i_degree_sign;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_xml__SWIG_2", "(Lmaejava/i_degree_sign;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_xml__SWIG_3", "(Lmaejava/i_degree_sign;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_svg__SWIG_0", "(Lmaejava/i_degree_sign;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_degree_sign_svg__SWIG_1", "(Lmaejava/i_degree_sign;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_equals", "(Lmaejava/pin;J)Z" 
    },
    {
      "SwigDirector_pin_xml__SWIG_0", "(Lmaejava/pin;JLjava/lang/String;Z)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_xml__SWIG_1", "(Lmaejava/pin;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_xml__SWIG_2", "(Lmaejava/pin;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_xml__SWIG_3", "(Lmaejava/pin;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_svg__SWIG_0", "(Lmaejava/pin;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_pin_svg__SWIG_1", "(Lmaejava/pin;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_room_direction_get_column", "(Lmaejava/room_direction;)I" 
    },
    {
      "SwigDirector_room_direction_get_measure", "(Lmaejava/room_direction;)J" 
    },
    {
      "SwigDirector_room_direction_get_beat", "(Lmaejava/room_direction;)D" 
    },
    {
      "SwigDirector_room_direction_get_duration", "(Lmaejava/room_direction;)D" 
    },
    {
      "SwigDirector_room_direction_equals", "(Lmaejava/room_direction;J)Z" 
    },
    {
      "SwigDirector_room_direction_symbol_equals", "(Lmaejava/room_direction;J)Z" 
    },
    {
      "SwigDirector_room_direction_xml__SWIG_0", "(Lmaejava/room_direction;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_room_direction_xml__SWIG_1", "(Lmaejava/room_direction;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_room_direction_xml__SWIG_2", "(Lmaejava/room_direction;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_room_direction_svg", "(Lmaejava/room_direction;JJJJJ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_room_direction_recreate", "(Lmaejava/room_direction;JJDD)J" 
    },
    {
      "SwigDirector_room_direction_str", "(Lmaejava/room_direction;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_accent_sign_equals", "(Lmaejava/accent_sign;J)Z" 
    },
    {
      "SwigDirector_accent_sign_xml__SWIG_0", "(Lmaejava/accent_sign;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_accent_sign_xml__SWIG_1", "(Lmaejava/accent_sign;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_accent_sign_xml__SWIG_2", "(Lmaejava/accent_sign;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_dynamic_sign_equals", "(Lmaejava/dynamic_sign;J)Z" 
    },
    {
      "SwigDirector_dynamic_sign_xml__SWIG_0", "(Lmaejava/dynamic_sign;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_dynamic_sign_xml__SWIG_1", "(Lmaejava/dynamic_sign;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_dynamic_sign_xml__SWIG_2", "(Lmaejava/dynamic_sign;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_equals", "(Lmaejava/cancellation_symbol;J)Z" 
    },
    {
      "SwigDirector_cancellation_symbol_xml__SWIG_0", "(Lmaejava/cancellation_symbol;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_xml__SWIG_1", "(Lmaejava/cancellation_symbol;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_xml__SWIG_2", "(Lmaejava/cancellation_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_svg__SWIG_0", "(Lmaejava/cancellation_symbol;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_svg__SWIG_1", "(Lmaejava/cancellation_symbol;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_cancellation_symbol_str", "(Lmaejava/cancellation_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_equals", "(Lmaejava/space_measurement;J)Z" 
    },
    {
      "SwigDirector_space_measurement_xml__SWIG_0", "(Lmaejava/space_measurement;JLjava/lang/String;Z)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_xml__SWIG_1", "(Lmaejava/space_measurement;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_xml__SWIG_2", "(Lmaejava/space_measurement;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_xml__SWIG_3", "(Lmaejava/space_measurement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_svg__SWIG_0", "(Lmaejava/space_measurement;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_svg__SWIG_1", "(Lmaejava/space_measurement;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_space_measurement_str", "(Lmaejava/space_measurement;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_equals", "(Lmaejava/direction_symbol;J)Z" 
    },
    {
      "SwigDirector_direction_symbol_xml__SWIG_0", "(Lmaejava/direction_symbol;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_xml__SWIG_1", "(Lmaejava/direction_symbol;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_xml__SWIG_2", "(Lmaejava/direction_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_svg__SWIG_0", "(Lmaejava/direction_symbol;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_svg__SWIG_1", "(Lmaejava/direction_symbol;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_direction_symbol_str", "(Lmaejava/direction_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_equals", "(Lmaejava/turn_symbol;J)Z" 
    },
    {
      "SwigDirector_turn_symbol_xml__SWIG_0", "(Lmaejava/turn_symbol;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_xml__SWIG_1", "(Lmaejava/turn_symbol;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_xml__SWIG_2", "(Lmaejava/turn_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_svg__SWIG_0", "(Lmaejava/turn_symbol;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_svg__SWIG_1", "(Lmaejava/turn_symbol;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_turn_symbol_str", "(Lmaejava/turn_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_equals", "(Lmaejava/vibration_symbol;J)Z" 
    },
    {
      "SwigDirector_vibration_symbol_xml__SWIG_0", "(Lmaejava/vibration_symbol;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_xml__SWIG_1", "(Lmaejava/vibration_symbol;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_xml__SWIG_2", "(Lmaejava/vibration_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_svg__SWIG_0", "(Lmaejava/vibration_symbol;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_svg__SWIG_1", "(Lmaejava/vibration_symbol;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_vibration_symbol_str", "(Lmaejava/vibration_symbol;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_xml__SWIG_0", "(Lmaejava/i_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_xml__SWIG_1", "(Lmaejava/i_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_xml__SWIG_2", "(Lmaejava/i_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_svg__SWIG_0", "(Lmaejava/i_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_svg__SWIG_1", "(Lmaejava/i_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_part_equals", "(Lmaejava/i_part;J)Z" 
    },
    {
      "SwigDirector_i_endpoint_xml__SWIG_0", "(Lmaejava/i_endpoint;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_endpoint_xml__SWIG_1", "(Lmaejava/i_endpoint;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_endpoint_xml__SWIG_2", "(Lmaejava/i_endpoint;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_endpoint_svg__SWIG_0", "(Lmaejava/i_endpoint;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_endpoint_svg__SWIG_1", "(Lmaejava/i_endpoint;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_endpoint_equals__SWIG_0", "(Lmaejava/i_endpoint;J)Z" 
    },
    {
      "SwigDirector_i_endpoint_get_fixed_end", "(Lmaejava/i_endpoint;)J" 
    },
    {
      "SwigDirector_i_endpoint_equals__SWIG_1", "(Lmaejava/i_endpoint;J)Z" 
    },
    {
      "SwigDirector_area_part_xml__SWIG_0", "(Lmaejava/area_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_area_part_xml__SWIG_1", "(Lmaejava/area_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_area_part_xml__SWIG_2", "(Lmaejava/area_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_area_part_svg__SWIG_0", "(Lmaejava/area_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_area_part_svg__SWIG_1", "(Lmaejava/area_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_area_part_equals__SWIG_0", "(Lmaejava/area_part;J)Z" 
    },
    {
      "SwigDirector_area_part_get_fixed_end", "(Lmaejava/area_part;)J" 
    },
    {
      "SwigDirector_area_part_equals__SWIG_1", "(Lmaejava/area_part;J)Z" 
    },
    {
      "SwigDirector_body_part_xml__SWIG_0", "(Lmaejava/body_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_body_part_xml__SWIG_1", "(Lmaejava/body_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_body_part_xml__SWIG_2", "(Lmaejava/body_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_body_part_svg__SWIG_0", "(Lmaejava/body_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_body_part_svg__SWIG_1", "(Lmaejava/body_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_body_part_equals", "(Lmaejava/body_part;J)Z" 
    },
    {
      "SwigDirector_i_limb_xml__SWIG_0", "(Lmaejava/i_limb;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_limb_xml__SWIG_1", "(Lmaejava/i_limb;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_limb_xml__SWIG_2", "(Lmaejava/i_limb;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_limb_svg__SWIG_0", "(Lmaejava/i_limb;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_limb_svg__SWIG_1", "(Lmaejava/i_limb;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_i_limb_equals__SWIG_0", "(Lmaejava/i_limb;J)Z" 
    },
    {
      "SwigDirector_i_limb_equals__SWIG_1", "(Lmaejava/i_limb;J)Z" 
    },
    {
      "SwigDirector_custom_limb_xml__SWIG_0", "(Lmaejava/custom_limb;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_custom_limb_xml__SWIG_1", "(Lmaejava/custom_limb;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_custom_limb_xml__SWIG_2", "(Lmaejava/custom_limb;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_custom_limb_svg__SWIG_0", "(Lmaejava/custom_limb;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_custom_limb_svg__SWIG_1", "(Lmaejava/custom_limb;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_custom_limb_equals__SWIG_0", "(Lmaejava/custom_limb;J)Z" 
    },
    {
      "SwigDirector_custom_limb_equals__SWIG_1", "(Lmaejava/custom_limb;J)Z" 
    },
    {
      "SwigDirector_default_limb_xml__SWIG_0", "(Lmaejava/default_limb;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_default_limb_xml__SWIG_1", "(Lmaejava/default_limb;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_default_limb_xml__SWIG_2", "(Lmaejava/default_limb;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_default_limb_svg__SWIG_0", "(Lmaejava/default_limb;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_default_limb_svg__SWIG_1", "(Lmaejava/default_limb;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_default_limb_equals__SWIG_0", "(Lmaejava/default_limb;J)Z" 
    },
    {
      "SwigDirector_default_limb_equals__SWIG_1", "(Lmaejava/default_limb;J)Z" 
    },
    {
      "SwigDirector_digit_part_xml__SWIG_0", "(Lmaejava/digit_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_digit_part_xml__SWIG_1", "(Lmaejava/digit_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_digit_part_xml__SWIG_2", "(Lmaejava/digit_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_digit_part_svg__SWIG_0", "(Lmaejava/digit_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_digit_part_svg__SWIG_1", "(Lmaejava/digit_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_digit_part_equals__SWIG_0", "(Lmaejava/digit_part;J)Z" 
    },
    {
      "SwigDirector_digit_part_get_fixed_end", "(Lmaejava/digit_part;)J" 
    },
    {
      "SwigDirector_digit_part_equals__SWIG_1", "(Lmaejava/digit_part;J)Z" 
    },
    {
      "SwigDirector_surface_part_xml__SWIG_0", "(Lmaejava/surface_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_surface_part_xml__SWIG_1", "(Lmaejava/surface_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_surface_part_xml__SWIG_2", "(Lmaejava/surface_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_surface_part_svg__SWIG_0", "(Lmaejava/surface_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_surface_part_svg__SWIG_1", "(Lmaejava/surface_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_surface_part_equals", "(Lmaejava/surface_part;J)Z" 
    },
    {
      "SwigDirector_joint_part_xml__SWIG_0", "(Lmaejava/joint_part;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_joint_part_xml__SWIG_1", "(Lmaejava/joint_part;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_joint_part_xml__SWIG_2", "(Lmaejava/joint_part;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_joint_part_svg__SWIG_0", "(Lmaejava/joint_part;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_joint_part_svg__SWIG_1", "(Lmaejava/joint_part;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_joint_part_equals__SWIG_0", "(Lmaejava/joint_part;J)Z" 
    },
    {
      "SwigDirector_joint_part_get_fixed_end", "(Lmaejava/joint_part;)J" 
    },
    {
      "SwigDirector_joint_part_equals__SWIG_1", "(Lmaejava/joint_part;J)Z" 
    },
    {
      "SwigDirector_prop_xml__SWIG_0", "(Lmaejava/prop;JLjava/lang/String;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_prop_xml__SWIG_1", "(Lmaejava/prop;J)Ljava/lang/String;" 
    },
    {
      "SwigDirector_prop_xml__SWIG_2", "(Lmaejava/prop;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_prop_svg__SWIG_0", "(Lmaejava/prop;Ljava/lang/String;DDDDZ)Ljava/lang/String;" 
    },
    {
      "SwigDirector_prop_svg__SWIG_1", "(Lmaejava/prop;Ljava/lang/String;DDDD)Ljava/lang/String;" 
    },
    {
      "SwigDirector_prop_equals", "(Lmaejava/prop;J)Z" 
    }
  };
  Swig::jclass_maeJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_maeJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

