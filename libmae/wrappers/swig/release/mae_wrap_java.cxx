/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


 	#include "../../../src/mae/e_bone.hpp"

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"

SWIGINTERN std::vector< mae::bone >::const_reference std_vector_Sl_mae_bone_Sg__get(std::vector< mae::bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_bone_Sg__set(std::vector< mae::bone > *self,int i,std::vector< mae::bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/i_sequence_listener.hpp"


	#include "../../../src/mae/i_recognition_listener.hpp"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"

SWIGINTERN std::list< int >::const_reference std_list_Sl_int_Sg__get(std::list< int > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<int>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


	#include "../../../src/mae/i_pose_listener.hpp"


	#include "../../../src/mae/i_movement_detector.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/i_pose_detector.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"

SWIGINTERN std::list< std::shared_ptr< mae::general_enriched_pose > >::const_reference std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(std::list< std::shared_ptr< mae::general_enriched_pose > > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<std::shared_ptr< mae::general_enriched_pose >>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/movement_controller.hpp"


	#include "../../../src/mae/hierarchy.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::hierarchy_element > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i,std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/hierarchy_element.hpp"


	#include "../../../src/mae/math/vec3d.hpp"


	#include "../../../src/mae/general_joint.hpp"


	#include "../../../src/mae/math/basis.hpp"


	#include "../../../src/mae/general_skeleton.hpp"


	#include "../../../src/mae/fl/fl_skeleton.hpp"


	#include "../../../src/mae/fl/fl_pose_detector.hpp"


 	#include "../../../src/mae/e_bone.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/column_definition.hpp"


	#include "../../../src/mae/fl/laban/i_movement.hpp"

SWIGINTERN int const &std_map_Sl_int_Sc_int_Sg__get(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__set(std::map< int,int > *self,int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__del(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__has_key(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/laban/e_time_unit.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/fl/laban/i_decision_maker.hpp"


	#include "../../../src/mae/fl/laban/decision_value.hpp"


	#include "../../../src/mae/fl/laban/rewriting_forest.hpp"

SWIGINTERN std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::const_reference std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/decision_forest.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence_recognizer.hpp"


#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence_generator.hpp"


	#include "../../../src/mae/fl/fl_movement_controller.hpp"


	#include "../../../src/mae/fl/bvh_spec.hpp"

SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN bool const &std_map_Sl_std_string_Sc_bool_Sg__get(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__set(std::map< std::string,bool > *self,std::string const &key,bool const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__del(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg__has_key(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/bvh_controller.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::general_skeleton > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i,std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence_reader.hpp"


	#include "../../../src/mae/fl/laban/mv/i_symbol.hpp"


	#include "../../../src/mae/fl/laban/movement.hpp"


	#include "../../../src/mae/fl/laban/e_path_type.hpp"


	#include "../../../src/mae/fl/laban/path.hpp"


	#include "../../../src/mae/fl/laban/e_relationship_type.hpp"


	#include "../../../src/mae/fl/laban/mv/i_dynamics_sign.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/relationship_endpoint.hpp"


	#include "../../../src/mae/fl/laban/relationship_bow.hpp"


	#include "../../../src/mae/fl/laban/mv/i_degree_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_level.hpp"


	#include "../../../src/mae/fl/laban/mv/pin.hpp"


	#include "../../../src/mae/fl/laban/room_direction.hpp"


	#include "../../../src/mae/fl/laban/mv/accent_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_dynamic.hpp"


	#include "../../../src/mae/fl/laban/mv/dynamic_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_cancel.hpp"


	#include "../../../src/mae/fl/laban/mv/cancellation_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/e_space.hpp"


	#include "../../../src/mae/fl/laban/mv/e_space_direction.hpp"


	#include "../../../src/mae/fl/laban/mv/space_measurement.hpp"


	#include "../../../src/mae/fl/laban/mv/e_direction.hpp"


	#include "../../../src/mae/fl/laban/mv/e_contact_hook.hpp"


	#include "../../../src/mae/fl/laban/mv/direction_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/e_turn_direction.hpp"


	#include "../../../src/mae/fl/laban/mv/turn_symbol.hpp"


	#include "../../../src/mae/fl/laban/mv/vibration_symbol.hpp"


	#include "../../../src/mae/fl/laban/ps/i_part.hpp"


	#include "../../../src/mae/fl/laban/ps/i_endpoint.hpp"


	#include "../../../src/mae/fl/laban/ps/e_area.hpp"


	#include "../../../src/mae/fl/laban/ps/area_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_side.hpp"


	#include "../../../src/mae/fl/laban/ps/body_part.hpp"


	#include "../../../src/mae/fl/laban/ps/i_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/custom_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/e_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/default_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/e_digit.hpp"


	#include "../../../src/mae/fl/laban/ps/digit_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_limb_side.hpp"


	#include "../../../src/mae/fl/laban/ps/surface_part.hpp"


	#include "../../../src/mae/fl/laban/ps/e_joint.hpp"


	#include "../../../src/mae/fl/laban/ps/joint_part.hpp"


	#include "../../../src/mae/fl/laban/ps/prop.hpp"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1int_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1int_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1int_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_INVALID_1BONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::INVALID_BONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::HEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_LEFT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_RIGHT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1bone_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::e_bone arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = mae::e_bone_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1bone_1c_1to_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::e_bone arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (int)mae::e_bone_c::to_int(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1bone_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::e_bone > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::e_bone_c::vec();
  *(std::vector< mae::e_bone > **)&jresult = new std::vector< mae::e_bone >((const std::vector< mae::e_bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1bone_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::e_bone)mae::e_bone_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1bone_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::e_bone_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone_c *)new mae::e_bone_c();
  *(mae::e_bone_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1bone_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::e_bone_c *arg1 = (mae::e_bone_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::e_bone_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< mae::bone > *)new std::vector< mae::bone >();
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< mae::bone >::size_type arg1 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< mae::bone >::size_type)jarg1; 
  result = (std::vector< mae::bone > *)new std::vector< mae::bone >(arg1);
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = ((std::vector< mae::bone > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = ((std::vector< mae::bone > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (std::vector< mae::bone >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  result = (bool)((std::vector< mae::bone > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = *(std::vector< mae::bone >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< mae::bone >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< mae::bone >::value_type *) &std_vector_Sl_mae_bone_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< mae::bone >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bone_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< mae::bone >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_mae_bone_Sg__set(arg1,arg2,(mae::bone const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1bone_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::bone *)new mae::bone();
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4);
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4,arg5);
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bone_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (mae::bone *)new mae::bone(arg1);
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1bone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::bone *arg1 = (mae::bone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::bone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bone_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = ((mae::bone const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1get_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_from();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1get_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_to();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_bone_1has_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (bool)((mae::bone const *)arg1)->has_middle_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1get_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_middle_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bone_1default_1bones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::bone::default_bones();
  *(std::vector< mae::bone > **)&jresult = new std::vector< mae::bone >((const std::vector< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1RESERVED_1TOP_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_TOP_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_bone_1RESERVED_1RIGHT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_RIGHT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1string_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1int_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< int > *)new std::list< int >();
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_int_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = ((std::list< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_int_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  result = (bool)((std::list< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1list_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  std::list< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  temp2 = (std::list< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::list< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_int_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  std::list< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< int >::value_type *) &std_list_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1int_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1pose(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_pose *)new mae::general_pose();
  
  *(std::shared_ptr<  mae::general_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1set_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set_direction(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (int)((mae::general_pose const *)arg1)->get_direction(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1set_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->set_distance(arg2,arg3,arg4);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1get_1distance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)((mae::general_pose const *)arg1)->get_distance(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  double arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set_rotation(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (double)((mae::general_pose const *)arg1)->get_rotation(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1get_1body_1parts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->get_body_parts();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1pose_1get_1directions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_pose const *)arg1)->get_directions();
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1pose_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1pose_1listener_1on_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_pose > arg3 ;
  std::shared_ptr< mae::general_pose > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_pose > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->on_pose(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1enriched_1pose_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_enriched_pose *)new mae::general_enriched_pose();
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1enriched_1pose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::general_pose > arg1 ;
  std::shared_ptr< mae::general_pose > *argp1 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::general_pose > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::general_enriched_pose *)new mae::general_enriched_pose(arg1);
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1enriched_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1enriched_1pose_1set_1key_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_key_pose(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1enriched_1pose_1is_1key_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->is_key_pose(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1enriched_1pose_1set_1in_1motion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set_in_motion(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1enriched_1pose_1is_1in_1motion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->is_in_motion(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1enriched_1pose_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::list< std::shared_ptr< mae::general_enriched_pose > > *)new std::list< std::shared_ptr< mae::general_enriched_pose > >();
  *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_enriched_1pose_1list_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  result = ((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_enriched_1pose_1list_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  result = (bool)((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_enriched_1pose_1list_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_enriched_1pose_1list_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *arg2 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = jarg2 ? *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_enriched_1pose_1list_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  int arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *) &std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_enriched_pose >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1enriched_1pose_1list(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1element_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1element_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >(arg1);
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::hierarchy_element >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::hierarchy_element > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1hierarchy_1element_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::hierarchy *)new mae::hierarchy();
  *(mae::hierarchy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy_element > arg1 ;
  std::shared_ptr< mae::hierarchy_element > *argp1 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::hierarchy *)new mae::hierarchy(arg1);
  *(mae::hierarchy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::hierarchy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1get_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy_element > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = ((mae::hierarchy const *)arg1)->get_root();
  *(std::shared_ptr< mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr< mae::hierarchy_element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1set_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_root(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  int arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mae::hierarchy_element *)((mae::hierarchy const *)arg1)->at(arg2);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = ((mae::hierarchy const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1default_1hierarchy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::hierarchy::default_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = new std::shared_ptr< mae::hierarchy >((const std::shared_ptr< mae::hierarchy > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2);
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1hierarchy_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::hierarchy_element const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1is_1torso_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_torso_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1is_1dummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_dummy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1get_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::hierarchy_element *)((mae::hierarchy_element const *)arg1)->get_parent();
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1is_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1is_1parent_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent_of(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1get_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->get_children();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1push_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_front(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1push_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->push_front(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->insert(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->insert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_back(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1erase_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase_at(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1erase_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  (arg1)->erase_at(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = ((mae::hierarchy_element const *)arg1)->str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_hierarchy_1element_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::hierarchy_element const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1vec3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::math::vec3d *)new mae::math::vec3d();
  *(mae::math::vec3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1vec3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::math::vec3d *)new mae::math::vec3d(arg1,arg2,arg3);
  *(mae::math::vec3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1vec3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  result = (double)((mae::math::vec3d const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  result = (double)((mae::math::vec3d const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  result = (double)((mae::math::vec3d const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_vec3d_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::vec3d **)&jarg1; 
  result = ((mae::math::vec3d const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_joint *)new mae::general_joint();
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::math::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::math::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::math::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::general_joint *)new mae::general_joint(arg1);
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::general_joint const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_valid(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::general_joint const *)arg1)->is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_confidence(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1get_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->vec();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = new std::shared_ptr< mae::math::vec3d >((const std::shared_ptr< mae::math::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1equals_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  mae::general_joint arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  mae::general_joint *argp2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = (*(std::shared_ptr<  mae::general_joint > **)&jarg2) ? (*(std::shared_ptr<  mae::general_joint > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mae::general_joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals_val(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_joint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_general_1joint_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::general_joint const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1basis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::math::basis *)new mae::math::basis();
  *(mae::math::basis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1basis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > arg3 ;
  std::shared_ptr< mae::math::vec3d > arg4 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > *argp3 ;
  std::shared_ptr< mae::math::vec3d > *argp4 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::math::vec3d > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::math::vec3d > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::math::basis *)new mae::math::basis(arg1,arg2,arg3,arg4);
  *(mae::math::basis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::math::basis **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_basis_1get_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::basis **)&jarg1; 
  result = ((mae::math::basis const *)arg1)->get_u();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_basis_1get_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::basis **)&jarg1; 
  result = ((mae::math::basis const *)arg1)->get_r();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_basis_1get_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::basis **)&jarg1; 
  result = ((mae::math::basis const *)arg1)->get_t();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_basis_1get_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::basis **)&jarg1; 
  result = ((mae::math::basis const *)arg1)->get_position_vector();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_basis_1set_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::math::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_u(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_basis_1set_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::math::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_r(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_basis_1set_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::math::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_t(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_basis_1set_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::math::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_position_vector(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_basis_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::math::basis **)&jarg1; 
  result = ((mae::math::basis const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_skeleton *)new mae::general_skeleton();
  *(mae::general_skeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > arg1 ;
  std::shared_ptr< mae::hierarchy > *argp1 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::general_skeleton *)new mae::general_skeleton(arg1);
  *(mae::general_skeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1set_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_joint > arg3 ;
  std::shared_ptr< mae::general_joint > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_joint > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->set_joint(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1get_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_joint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((mae::general_skeleton const *)arg1)->get_joint(arg2);
  *(std::shared_ptr< mae::general_joint > **)&jresult = result ? new std::shared_ptr< mae::general_joint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1get_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1set_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::hierarchy > arg2 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_hierarchy(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1set_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_top_down(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1get_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_top_down();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1set_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_right_left(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1get_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_right_left();
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1set_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_weight(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1get_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_weight();
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1ply_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->ply_str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1ply_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::general_skeleton const *)arg1)->ply_file(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_skeleton *)new mae::fl::fl_skeleton();
  *(mae::fl::fl_skeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1fl_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1set_1torso_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::math::basis > arg2 ;
  std::shared_ptr< mae::math::basis > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::math::basis > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_torso_basis(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1get_1torso_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::math::basis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  result = ((mae::fl::fl_skeleton const *)arg1)->get_torso_basis();
  *(std::shared_ptr< mae::math::basis > **)&jresult = result ? new std::shared_ptr< mae::math::basis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1set_1orig_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->set_orig_skeleton(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1get_1orig_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  result = ((mae::fl::fl_skeleton const *)arg1)->get_orig_skeleton();
  *(std::shared_ptr< mae::general_skeleton > **)&jresult = result ? new std::shared_ptr< mae::general_skeleton >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_skeleton **)&jarg1; 
  result = ((mae::fl::fl_skeleton const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1fl_1skeleton_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_pose_detector< mae::fl::fl_skeleton > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1pose_1detector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mae::i_pose_detector< mae::fl::fl_skeleton > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1pose_1detector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector(arg1,arg2);
  *(mae::fl::fl_pose_detector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1pose_1detector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector(arg1);
  *(mae::fl::fl_pose_detector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1pose_1detector_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector();
  *(mae::fl::fl_pose_detector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1fl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::fl_pose_detector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1set_1hysteresis_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_pose_detector **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_hysteresis_val(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1get_1hysteresis_1val(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_pose_detector **)&jarg1; 
  result = (double)((mae::fl::fl_pose_detector const *)arg1)->get_hysteresis_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mae::fl::fl_pose_detector **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1vector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mae::fl::fl_pose_detector **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (arg1)->vector_pose(arg2,arg3,arg4);
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1default_1hysteresis_1val(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)mae::fl::fl_pose_detector::default_hysteresis_val();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1pre_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1pre_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1pre_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1pre_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_pre_sign const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1column_1definition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::column_definition *)new mae::fl::laban::column_definition(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1column_1definition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (mae::fl::laban::column_definition *)new mae::fl::laban::column_definition(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1get_1column_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::column_definition const *)arg1)->get_column_index();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::column_definition const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::column_definition const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_column_1definition_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::column_definition const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1int_1int_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int,int > *)new std::map< int,int >();
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1int_1int_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int > const & reference is null");
    return 0;
  } 
  result = (std::map< int,int > *)new std::map< int,int >((std::map< int,int > const &)*arg1);
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (unsigned int)((std::map< int,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  result = (bool)((std::map< int,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (int *) &std_map_Sl_int_Sc_int_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_int_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int_Sc_int_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_int_1int_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int_Sc_int_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1int_1int_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::i_movement const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::i_movement const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::i_movement const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::i_movement const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::i_movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1movement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::i_movement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1time_1unit_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_time_unit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_time_unit)jarg1; 
  result = mae::fl::laban::e_time_unit_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1time_1unit_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::e_time_unit > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_time_unit_c::vec();
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = new std::vector< mae::fl::laban::e_time_unit >((const std::vector< mae::fl::laban::e_time_unit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1time_1unit_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_time_unit)mae::fl::laban::e_time_unit_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1time_1unit_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_time_unit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_time_unit_c *)new mae::fl::laban::e_time_unit_c();
  *(mae::fl::laban::e_time_unit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1time_1unit_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_time_unit_c *arg1 = (mae::fl::laban::e_time_unit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_time_unit_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1coldef_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1coldef_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::column_definition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_coldef_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::column_definition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1coldef_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::i_movement >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::i_movement > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1mov_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence *)new mae::fl::laban::laban_sequence();
  *(mae::fl::laban::laban_sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (mae::fl::laban::laban_sequence *)new mae::fl::laban::laban_sequence(arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::fl::laban::laban_sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_version();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1authors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::string > arg2 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_authors(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1add_1author(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->add_author(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1authors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_authors();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_title(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1title(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_title();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set_description(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1measures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_measures(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1measures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_measures();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1time_1unit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  mae::fl::laban::e_time_unit arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (mae::fl::laban::e_time_unit)jarg2; 
  (arg1)->set_time_unit(arg2);
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1time_1unit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = (mae::fl::laban::e_time_unit)((mae::fl::laban::laban_sequence const *)arg1)->get_time_unit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1beat_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_beat_duration(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1beat_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beat_duration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1beats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->set_beats(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1beats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beats();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_column_definitions(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1add_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_column_definition(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_definitions();
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1column_1definition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->get_column_definition(arg2);
  *(std::shared_ptr< mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::column_definition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1clear_1column_1definitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  (arg1)->clear_column_definitions();
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1columns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = (arg1)->get_columns();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1set_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_movements(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_movements();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1add_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_movement(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1column_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_movements(arg2);
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1get_1last_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->get_last_movement();
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1clear_1movements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  (arg1)->clear_movements();
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1namespace_1header_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1namespace_1header_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1schema_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_schema_location();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1namespace_1uri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_uri();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1xml_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::fl::laban::laban_sequence const *)arg1)->xml_file(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1default_1beat_1duration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)mae::fl::laban::laban_sequence::default_beat_duration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1default_1beats_1per_1measure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)mae::fl::laban::laban_sequence::default_beats_per_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1default_1time_1unit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_time_unit)mae::fl::laban::laban_sequence::default_time_unit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1default_1columns(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::laban_sequence::default_columns();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >();
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg1 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >(arg1);
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  arg2 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1mov_1vector_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1dec_1val_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg1 ;
  SwigValueWrapper< std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp2 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1dec_1val_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp1 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1mov_1vector_1vector_1dec_1val(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1get_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_sequence();
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1get_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_value();
  *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jresult = new std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >((const std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1dec_1val_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >();
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1i_1mov_1vector_1vector_1dec_1val_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >(arg1);
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1mov_1vector_1vector_1dec_1val_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1mov_1vector_1vector_1dec_1val_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  double arg4 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3,arg4);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest();
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3,arg4);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1rewriting_1forest_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1);
  *(mae::fl::laban::rewriting_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1rewriting_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1get_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  result = (double)(arg1)->get_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1set_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1replacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->replacements(arg2);
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > **)&jresult = new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >((const std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1add_1rule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  SwigValueWrapper< std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->add_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1add_1rule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_rule(arg2);
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_rewriting_1forest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::rewriting_forest **)&jarg1; 
  result = (arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1dec_1maker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_i_1dec_1maker_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_i_1dec_1maker_1get_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_recognition_tolerance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1dec_1maker_1decide_1match(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_match(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1dec_1maker_1decide_1insertion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (bool)(arg1)->decide_insertion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1dec_1maker_1position_1okay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->position_okay(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > arg7 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *argp7 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::rewriting_forest > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg6 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp6 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1);
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1decision_1forest_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest();
  *(mae::fl::laban::decision_forest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1decision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1add_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1remove_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1remove_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->remove_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1add_1rewriting_1rule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  SwigValueWrapper< std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->add_rewriting_rule(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1add_1rewriting_1rule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_rewriting_rule(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1recreate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (arg1)->recreate_sequence(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1get_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  result = (arg1)->get_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1find_1submatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->find_submatches(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_decision_1forest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::decision_forest **)&jarg1; 
  result = (arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1get_1sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)(arg1)->get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1recognizer_1recognize_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->recognize_sequence(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer();
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  bool arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3,arg4);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1recognizer_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1);
  *(mae::fl::laban::laban_sequence_recognizer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1get_1decision_1forest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::fl::laban::decision_forest > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  result = (arg1)->get_decision_forest();
  *(std::shared_ptr< mae::fl::laban::decision_forest > **)&jresult = new std::shared_ptr< mae::fl::laban::decision_forest >((const std::shared_ptr< mae::fl::laban::decision_forest > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1deregister_1sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->deregister_sequence(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1get_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  SwigValueWrapper< std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  result = (arg1)->get_registered_sequences();
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1get_1sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (int)(arg1)->get_sequence_length(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1recognize_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->recognize_sequence(arg2,arg3);
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1; 
  result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_sequence_generator< mae::fl::laban::laban_sequence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1sequence_1generator_1generate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mae::i_sequence_generator< mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->generate_sequence(arg2,arg3,arg4);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator();
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  bool arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3,arg4);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1generator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1);
  *(mae::fl::laban::laban_sequence_generator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence_generator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1generator_1generate_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(mae::fl::laban::laban_sequence_generator **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->generate_sequence(arg2,arg3,arg4);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > > arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > > arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > > arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1skel_1laban_1movement_1controller_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > > arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4);
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1fl_1skel_1laban_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1next_1frame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1register_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->register_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1deregister_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->deregister_sequence(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1clear_1registered_1sequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_registered_sequences();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1set_1no_1buffer_1size_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_no_buffer_size_update(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1clear_1buffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_buffer();
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1get_1current_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_current_sequence();
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1add_1listener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1remove_1listener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1add_1listener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1remove_1listener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1add_1listener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->add_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1remove_1listener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->remove_listener(arg2);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1clear_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  (arg1)->clear_listeners();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1notify_1sequence_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->notify_sequence_listeners(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1notify_1recognition_1listeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  long arg2 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->notify_recognition_listeners(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1get_1movement_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_movement_detector();
  *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult = new std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >((const std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skel_1laban_1movement_1controller_1get_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  result = (arg1)->get_sequence_recognizer();
  *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult = new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >((const std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  bool arg3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller();
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  bool arg8 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1fl_1movement_1controller_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2);
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1fl_1movement_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1next_1frame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  long arg2 ;
  std::shared_ptr< mae::general_skeleton > arg3 ;
  std::shared_ptr< mae::general_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (long)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  (arg1)->next_frame(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1set_1recognition_1tolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_recognition_tolerance(arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1get_1laban_1sequence_1recognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_recognizer();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_recognizer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1get_1laban_1sequence_1generator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_generator();
  *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_generator >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1get_1fl_1pose_1detector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  result = ((mae::fl::fl_movement_controller const *)arg1)->get_fl_pose_detector();
  *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr< mae::fl::fl_pose_detector >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1int_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1int_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1int_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1string_1int_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1bool_1map_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >();
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1string_1bool_1map_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,bool > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >((std::map< std::string,bool > const &)*arg1);
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  result = (bool)((std::map< std::string,bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool *) &std_map_Sl_std_string_Sc_bool_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_bool_Sg__set(arg1,(std::string const &)*arg2,(bool const &)*arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_bool_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_string_1bool_1map_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1string_1bool_1map(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bvh_1spec(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::map< std::string,int > arg5 ;
  std::map< std::string,bool > arg6 ;
  std::map< std::string,int > *argp5 ;
  std::map< std::string,bool > *argp6 ;
  mae::fl::bvh_spec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(std::map< std::string,int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::map< std::string,bool > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,bool >");
    return 0;
  }
  arg6 = *argp6; 
  result = (mae::fl::bvh_spec *)new mae::fl::bvh_spec(arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_spec >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1bvh_1spec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1id_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->get_id_map();
  *(std::map< std::string,int > **)&jresult = new std::map< std::string,int >((const std::map< std::string,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1torso_1map(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::bvh_spec const *)arg1)->get_torso_map();
  *(std::map< std::string,bool > **)&jresult = new std::map< std::string,bool >((const std::map< std::string,bool > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1left_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_left_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1right_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_right_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1top_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_top_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1get_1bottom_1anchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_bottom_anchor();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bvh_1spec_1default_1spec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::bvh_spec::default_spec();
  *(std::shared_ptr< mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr< mae::fl::bvh_spec >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >();
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >(arg1);
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_skeleton >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::general_skeleton > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1skeleton_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >();
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg1 ;
  double arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp1 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >(arg1,arg2);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1general_1skeleton_1vector_1double_1pair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > const & reference is null");
    return 0;
  } 
  result = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *)new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > const &)*arg1);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1double_1pair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg2 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  arg2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1double_1pair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)& ((arg1)->first);
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1double_1pair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_general_1skeleton_1vector_1double_1pair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  result = (double) ((arg1)->second);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1general_1skeleton_1vector_1double_1pair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *arg1 = (std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1bvh_1controller(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::bvh_controller *)new mae::fl::bvh_controller();
  *(mae::fl::bvh_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1bvh_1controller(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1bvh_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1bvh_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  double arg3 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  result = (arg1)->bvh_str(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1bvh_1str_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (arg1)->bvh_str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1print_1bvh_1file_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::string arg3 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->print_bvh_file(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1print_1bvh_1file_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->print_bvh_file(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1read_1bvh_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->read_bvh_str(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_bvh_1controller_1read_1bvh_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::bvh_controller **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (arg1)->read_bvh_file(arg2,arg3);
  *(std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > **)&jresult = new std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double >((const std::pair< std::vector< std::shared_ptr< mae::general_skeleton > >,double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1laban_1sequence_1reader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::laban_sequence_reader *)new mae::fl::laban::laban_sequence_reader();
  *(mae::fl::laban::laban_sequence_reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1laban_1sequence_1reader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1reader_1read_1sequence_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->read_sequence_file(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1reader_1read_1sequence_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->read_sequence_str(arg2);
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::i_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1movement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp7 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  argp7 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1movement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1movement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::movement const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::movement const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::movement const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1hold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::movement const *)arg1)->get_hold();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_movement_1get_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->get_symbol();
  *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_movement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_movement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_movement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_movement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_movement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::movement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1path_1type_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  result = mae::fl::laban::e_path_type_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1path_1type_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::e_path_type > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_path_type_c::vec();
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = new std::vector< mae::fl::laban::e_path_type >((const std::vector< mae::fl::laban::e_path_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1path_1type_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_path_type)mae::fl::laban::e_path_type_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1path_1type_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_path_type_c *)new mae::fl::laban::e_path_type_c();
  *(mae::fl::laban::e_path_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1path_1type_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_path_type_c *arg1 = (mae::fl::laban::e_path_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_path_type_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1path(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  mae::fl::laban::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::fl::laban::path *)new mae::fl::laban::path(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::path > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::path >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_path_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_path_type)((mae::fl::laban::path const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_path_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::path const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_path_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::path const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_path_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_path_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::path const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_path_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_path_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_path_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_path_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::path const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_path_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::path const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1relationship_1type_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  result = mae::fl::laban::e_relationship_type_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1relationship_1type_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::e_relationship_type > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::e_relationship_type_c::vec();
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = new std::vector< mae::fl::laban::e_relationship_type >((const std::vector< mae::fl::laban::e_relationship_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1relationship_1type_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::e_relationship_type)mae::fl::laban::e_relationship_type_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1relationship_1type_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::e_relationship_type_c *)new mae::fl::laban::e_relationship_type_c();
  *(mae::fl::laban::e_relationship_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1relationship_1type_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_relationship_type_c *arg1 = (mae::fl::laban::e_relationship_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_relationship_type_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1dynamics_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1dynamics_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1dynamics_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1dynamics_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1dynamics_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1relationship_1endpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg4 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp4 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1relationship_1endpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1relationship_1endpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1relationship_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1get_1pre_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_pre_sign();
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1get_1active(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_active();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::map< int,int > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->recreate(arg2);
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_relationship_1endpoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1relationship_1bow(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jdouble jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg8 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp8 ;
  mae::fl::laban::relationship_bow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  argp8 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg8; 
  if (argp8) arg8 = *argp8; 
  result = (mae::fl::laban::relationship_bow *)new mae::fl::laban::relationship_bow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::relationship_bow >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1relationship_1bow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::e_relationship_type)((mae::fl::laban::relationship_bow const *)arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1grasping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_grasping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1passing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_passing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1hold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_hold();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1left_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->get_left_endpoint();
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1right_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->get_right_endpoint();
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::relationship_bow const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::relationship_bow const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::relationship_bow const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1degree_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1degree_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1degree_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1degree_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1degree_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1level_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  result = mae::fl::laban::mv::e_level_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1level_1c_1lvl(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::lvl(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1level_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_level > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_level_c::vec();
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = new std::vector< mae::fl::laban::mv::e_level >((const std::vector< mae::fl::laban::mv::e_level > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1level_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1level_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_level_c *)new mae::fl::laban::mv::e_level_c();
  *(mae::fl::laban::mv::e_level_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1level_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_level_c *arg1 = (mae::fl::laban::mv::e_level_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_level_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1pin(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  int arg2 ;
  mae::fl::laban::mv::pin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (int)jarg2; 
  result = (mae::fl::laban::mv::pin *)new mae::fl::laban::mv::pin(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::pin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_pin_1get_1level(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_level)(arg1)->get_level();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_pin_1get_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_horizontal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_pin_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_pin_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_pin_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_pin_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1room_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::room_direction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::room_direction *)new mae::fl::laban::room_direction(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::room_direction >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1room_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1get_1column(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((mae::fl::laban::room_direction const *)arg1)->get_column();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1get_1measure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::room_direction const *)arg1)->get_measure();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1get_1beat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->get_beat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1get_1duration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((mae::fl::laban::room_direction const *)arg1)->get_duration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->get_direction();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = ((mae::fl::laban::room_direction const *)arg1)->recreate(arg2,arg3,arg4,arg5);
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::room_direction const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1accent_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::mv::accent_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (mae::fl::laban::mv::accent_sign *)new mae::fl::laban::mv::accent_sign(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::accent_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1accent_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1get_1accent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)(arg1)->get_accent();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1dynamic_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  result = mae::fl::laban::mv::e_dynamic_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1dynamic_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_dynamic > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_dynamic_c::vec();
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = new std::vector< mae::fl::laban::mv::e_dynamic >((const std::vector< mae::fl::laban::mv::e_dynamic > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1dynamic_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_dynamic)mae::fl::laban::mv::e_dynamic_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1dynamic_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_dynamic_c *)new mae::fl::laban::mv::e_dynamic_c();
  *(mae::fl::laban::mv::e_dynamic_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1dynamic_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_dynamic_c *arg1 = (mae::fl::laban::mv::e_dynamic_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_dynamic_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1dynamic_1sign(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  mae::fl::laban::mv::dynamic_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  result = (mae::fl::laban::mv::dynamic_sign *)new mae::fl::laban::mv::dynamic_sign(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::dynamic_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1dynamic_1sign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1get_1dynamic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_dynamic)(arg1)->get_dynamic();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1cancel_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  result = mae::fl::laban::mv::e_cancel_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1cancel_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_cancel > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_cancel_c::vec();
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = new std::vector< mae::fl::laban::mv::e_cancel >((const std::vector< mae::fl::laban::mv::e_cancel > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1cancel_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_cancel)mae::fl::laban::mv::e_cancel_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1cancel_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_cancel_c *)new mae::fl::laban::mv::e_cancel_c();
  *(mae::fl::laban::mv::e_cancel_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1cancel_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_cancel_c *arg1 = (mae::fl::laban::mv::e_cancel_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_cancel_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1cancellation_1symbol(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  mae::fl::laban::mv::cancellation_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  result = (mae::fl::laban::mv::cancellation_symbol *)new mae::fl::laban::mv::cancellation_symbol(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1cancellation_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1get_1cancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_cancel)(arg1)->get_cancel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  result = mae::fl::laban::mv::e_space_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_space > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_space_c::vec();
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = new std::vector< mae::fl::laban::mv::e_space >((const std::vector< mae::fl::laban::mv::e_space > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_space)mae::fl::laban::mv::e_space_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1space_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_space_c *)new mae::fl::laban::mv::e_space_c();
  *(mae::fl::laban::mv::e_space_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1space_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_c *arg1 = (mae::fl::laban::mv::e_space_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space_direction)jarg1; 
  result = mae::fl::laban::mv::e_space_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_space_direction > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_space_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_space_direction >((const std::vector< mae::fl::laban::mv::e_space_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1space_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_space_direction)mae::fl::laban::mv::e_space_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1space_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_space_direction_c *)new mae::fl::laban::mv::e_space_direction_c();
  *(mae::fl::laban::mv::e_space_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1space_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_direction_c *arg1 = (mae::fl::laban::mv::e_space_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1space_1measurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::e_space_direction arg3 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::mv::e_space_direction)jarg3; 
  result = (mae::fl::laban::mv::space_measurement *)new mae::fl::laban::mv::space_measurement(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1space_1measurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::mv::space_measurement *)new mae::fl::laban::mv::space_measurement(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1space_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1get_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_space)(arg1)->get_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1get_1degree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)(arg1)->get_degree();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_space_direction)(arg1)->get_direction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::space_measurement const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_direction)jarg1; 
  result = mae::fl::laban::mv::e_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1direction_1c_1dir(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::dir(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_direction > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_direction >((const std::vector< mae::fl::laban::mv::e_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_direction_c *)new mae::fl::laban::mv::e_direction_c();
  *(mae::fl::laban::mv::e_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_direction_c *arg1 = (mae::fl::laban::mv::e_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1contact_1hook_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_contact_hook)jarg1; 
  result = mae::fl::laban::mv::e_contact_hook_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1contact_1hook_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_contact_hook > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_contact_hook_c::vec();
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = new std::vector< mae::fl::laban::mv::e_contact_hook >((const std::vector< mae::fl::laban::mv::e_contact_hook > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1contact_1hook_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_contact_hook)mae::fl::laban::mv::e_contact_hook_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1contact_1hook_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_contact_hook_c *)new mae::fl::laban::mv::e_contact_hook_c();
  *(mae::fl::laban::mv::e_contact_hook_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1contact_1hook_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_contact_hook_c *arg1 = (mae::fl::laban::mv::e_contact_hook_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_contact_hook_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  mae::fl::laban::mv::e_contact_hook arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  arg7 = (mae::fl::laban::mv::e_contact_hook)jarg7; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5,arg6);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1direction_1symbol_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1direction_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1vertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_level)(arg1)->get_vertical();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1horizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_direction)(arg1)->get_horizontal();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1modification_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_modification_pin();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1relationship_1pin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_relationship_pin();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1space_1measurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_space_measurement();
  *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::space_measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1get_1contact_1hook(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_contact_hook)(arg1)->get_contact_hook();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1turn_1direction_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  result = mae::fl::laban::mv::e_turn_direction_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1turn_1direction_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::mv::e_turn_direction > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::mv::e_turn_direction_c::vec();
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_turn_direction >((const std::vector< mae::fl::laban::mv::e_turn_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1turn_1direction_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::mv::e_turn_direction)mae::fl::laban::mv::e_turn_direction_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1turn_1direction_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::mv::e_turn_direction_c *)new mae::fl::laban::mv::e_turn_direction_c();
  *(mae::fl::laban::mv::e_turn_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1turn_1direction_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_turn_direction_c *arg1 = (mae::fl::laban::mv::e_turn_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_turn_direction_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1turn_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp3 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1turn_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1turn_1symbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1turn_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1get_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::mv::e_turn_direction)(arg1)->get_direction();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1get_1degree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_degree();
  *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1vibration_1symbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp3 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  result = (mae::fl::laban::mv::vibration_symbol *)new mae::fl::laban::mv::vibration_symbol(arg1,arg2,arg3);
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1vibration_1symbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::mv::vibration_symbol *)new mae::fl::laban::mv::vibration_symbol(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1vibration_1symbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1get_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_dynamics();
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1get_1displacement1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_displacement1();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1get_1displacement2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_displacement2();
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)(arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1endpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1area_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  result = mae::fl::laban::ps::e_area_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1area_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_area > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_area_c::vec();
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = new std::vector< mae::fl::laban::ps::e_area >((const std::vector< mae::fl::laban::ps::e_area > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1area_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_area)mae::fl::laban::ps::e_area_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1area_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_area_c *)new mae::fl::laban::ps::e_area_c();
  *(mae::fl::laban::ps::e_area_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1area_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_area_c *arg1 = (mae::fl::laban::ps::e_area_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_area_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1area_1part(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  mae::fl::laban::ps::area_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  result = (mae::fl::laban::ps::area_part *)new mae::fl::laban::ps::area_part(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::area_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1area_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1get_1area(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_area)((mae::fl::laban::ps::area_part const *)arg1)->get_area();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::area_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1side_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  result = mae::fl::laban::ps::e_side_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1side_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_side > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_side_c::vec();
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_side >((const std::vector< mae::fl::laban::ps::e_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1side_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_side)mae::fl::laban::ps::e_side_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1side_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_side_c *)new mae::fl::laban::ps::e_side_c();
  *(mae::fl::laban::ps::e_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1side_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_side_c *arg1 = (mae::fl::laban::ps::e_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_side_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1body_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  mae::fl::laban::ps::body_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::body_part *)new mae::fl::laban::ps::body_part(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::body_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1body_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1get_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_side)((mae::fl::laban::ps::body_part const *)arg1)->get_side();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1get_1part(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->get_part();
  *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::body_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::body_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1i_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1custom_1limb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::custom_limb *)new mae::fl::laban::ps::custom_limb(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1custom_1limb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (mae::fl::laban::ps::custom_limb *)new mae::fl::laban::ps::custom_limb(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1custom_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1get_1extremity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_extremity();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  result = mae::fl::laban::ps::e_limb_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_limb > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_limb_c::vec();
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb >((const std::vector< mae::fl::laban::ps::e_limb > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_limb)mae::fl::laban::ps::e_limb_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1limb_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_limb_c *)new mae::fl::laban::ps::e_limb_c();
  *(mae::fl::laban::ps::e_limb_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1limb_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_c *arg1 = (mae::fl::laban::ps::e_limb_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1default_1limb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  mae::fl::laban::ps::default_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  result = (mae::fl::laban::ps::default_limb *)new mae::fl::laban::ps::default_limb(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::default_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1default_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1get_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_limb)((mae::fl::laban::ps::default_limb const *)arg1)->get_limb();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1digit_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  result = mae::fl::laban::ps::e_digit_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1digit_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_digit > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_digit_c::vec();
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = new std::vector< mae::fl::laban::ps::e_digit >((const std::vector< mae::fl::laban::ps::e_digit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1digit_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_digit)mae::fl::laban::ps::e_digit_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1digit_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_digit_c *)new mae::fl::laban::ps::e_digit_c();
  *(mae::fl::laban::ps::e_digit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1digit_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_digit_c *arg1 = (mae::fl::laban::ps::e_digit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_digit_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1digit_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::ps::digit_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (mae::fl::laban::ps::digit_part *)new mae::fl::laban::ps::digit_part(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::digit_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1digit_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1get_1digit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_digit)((mae::fl::laban::ps::digit_part const *)arg1)->get_digit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1get_1knuckle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (unsigned int)((mae::fl::laban::ps::digit_part const *)arg1)->get_knuckle();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::digit_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1side_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  result = mae::fl::laban::ps::e_limb_side_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1side_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_limb_side > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_limb_side_c::vec();
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb_side >((const std::vector< mae::fl::laban::ps::e_limb_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1limb_1side_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_limb_side)mae::fl::laban::ps::e_limb_side_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1limb_1side_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_limb_side_c *)new mae::fl::laban::ps::e_limb_side_c();
  *(mae::fl::laban::ps::e_limb_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1limb_1side_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_side_c *arg1 = (mae::fl::laban::ps::e_limb_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_side_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1surface_1part(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  mae::fl::laban::ps::surface_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (mae::fl::laban::ps::surface_part *)new mae::fl::laban::ps::surface_part(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::surface_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1surface_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1get_1limb_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_limb_side)((mae::fl::laban::ps::surface_part const *)arg1)->get_limb_side();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1get_1limb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->get_limb();
  *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::surface_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_e_1joint_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  result = mae::fl::laban::ps::e_joint_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_e_1joint_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::fl::laban::ps::e_joint > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::fl::laban::ps::e_joint_c::vec();
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = new std::vector< mae::fl::laban::ps::e_joint >((const std::vector< mae::fl::laban::ps::e_joint > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_e_1joint_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::e_joint)mae::fl::laban::ps::e_joint_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1e_1joint_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::fl::laban::ps::e_joint_c *)new mae::fl::laban::ps::e_joint_c();
  *(mae::fl::laban::ps::e_joint_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1e_1joint_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_joint_c *arg1 = (mae::fl::laban::ps::e_joint_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_joint_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1joint_1part(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  mae::fl::laban::ps::joint_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  result = (mae::fl::laban::ps::joint_part *)new mae::fl::laban::ps::joint_part(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::joint_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1joint_1part(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1get_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = (mae::fl::laban::ps::e_joint)((mae::fl::laban::ps::joint_part const *)arg1)->get_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1get_1fixed_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::joint_part const *)arg1)->get_fixed_end();
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1prop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mae::fl::laban::ps::prop *)new mae::fl::laban::ps::prop(arg1,arg2);
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_new_1prop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::fl::laban::ps::prop *)new mae::fl::laban::ps::prop(arg1);
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_w_1e_1boneJNI_delete_1prop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_prop_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_prop_1get_1description(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->get_description();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_prop_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_prop_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_w_1e_1boneJNI_prop_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((mae::fl::laban::ps::prop const *)arg1)->xml();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_w_1e_1boneJNI_prop_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  result = (bool)((mae::fl::laban::ps::prop const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_general_1enriched_1pose_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::general_enriched_pose > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::general_enriched_pose > **)&jarg1;
    *(std::shared_ptr< mae::general_pose > **)&baseptr = argp1 ? new std::shared_ptr< mae::general_pose >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1skeleton_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::general_skeleton **)&baseptr = *(mae::fl::fl_skeleton **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1pose_1detector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::i_pose_detector< mae::fl::fl_skeleton > **)&baseptr = *(mae::fl::fl_pose_detector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1recognizer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > **)&baseptr = *(mae::fl::laban::laban_sequence_recognizer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_laban_1sequence_1generator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::i_sequence_generator< mae::fl::laban::laban_sequence > **)&baseptr = *(mae::fl::laban::laban_sequence_generator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_fl_1movement_1controller_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&baseptr = *(mae::fl::fl_movement_controller **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_movement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::movement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::movement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_path_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::path > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::path > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_relationship_1bow_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::relationship_bow > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::relationship_bow > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_pin_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::pin > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_room_1direction_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::room_direction > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::room_direction > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_accent_1sign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::accent_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::accent_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_dynamic_1sign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::dynamic_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_cancellation_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_space_1measurement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_direction_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::direction_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::direction_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_turn_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::turn_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::turn_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_vibration_1symbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::vibration_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1endpoint_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_area_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::area_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::area_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_body_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::body_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::body_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_i_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_custom_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::custom_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::custom_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_default_1limb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::default_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::default_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_digit_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::digit_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::digit_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_surface_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::surface_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::surface_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_joint_1part_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::joint_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::joint_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_w_1e_1boneJNI_prop_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::prop > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::prop > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

