/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}





SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <string>


	#include "../../../src/mae/ini_reader.hpp"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


 	#include "../../../src/mae/e_kinect_joint.hpp"

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< enum mae::e_kinect_joint >::const_reference std_vector_Sl_mae_e_kinect_joint_Sg__get(std::vector< mae::e_kinect_joint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_e_kinect_joint_Sg__set(std::vector< mae::e_kinect_joint > *self,int i,std::vector< enum mae::e_kinect_joint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

 	#include "../../../src/mae/e_bone.hpp"

SWIGINTERN std::vector< enum mae::e_bone >::const_reference std_vector_Sl_mae_e_bone_Sg__get(std::vector< mae::e_bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_e_bone_Sg__set(std::vector< mae::e_bone > *self,int i,std::vector< enum mae::e_bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< mae::bone >::const_reference std_vector_Sl_mae_bone_Sg__get(std::vector< mae::bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_bone_Sg__set(std::vector< mae::bone > *self,int i,std::vector< mae::bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <stdint.h>		// Use the C99 official header


	#include "../../../src/mae/i_sequence_listener.hpp"


	#include "../../../src/mae/i_recognition_listener.hpp"

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"

SWIGINTERN std::list< int >::const_reference std_list_Sl_int_Sg__get(std::list< int > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<int>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/i_pose_listener.hpp"


	#include "../../../src/mae/i_movement_detector.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/i_pose_detector.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"

SWIGINTERN std::list< std::shared_ptr< mae::general_enriched_pose > >::const_reference std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(std::list< std::shared_ptr< mae::general_enriched_pose > > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<std::shared_ptr< mae::general_enriched_pose >>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/movement_controller.hpp"


	#include "../../../src/mae/hierarchy.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::hierarchy_element > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(std::vector< std::shared_ptr< mae::hierarchy_element > > *self,int i,std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/hierarchy_element.hpp"


	#include "../../../src/mae/math/vec3d.hpp"


	#include "../../../src/mae/general_joint.hpp"


	#include "../../../src/mae/math/basis.hpp"


	#include "../../../src/mae/general_skeleton.hpp"


	#include "../../../src/mae/fl/fl_skeleton.hpp"


	#include "../../../src/mae/fl/fl_pose_detector.hpp"


 	#include "../../../src/mae/e_bone.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/column_definition.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <map>
#include <algorithm>
#include <stdexcept>


	#include "../../../src/mae/fl/laban/i_movement.hpp"

SWIGINTERN int const &std_map_Sl_int_Sc_int_Sg__get(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__set(std::map< int,int > *self,int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int_Sc_int_Sg__del(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_int_Sg__has_key(std::map< int,int > *self,int const &key){
                std::map<int,int >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/laban/e_time_unit.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_time_unit >::const_reference std_vector_Sl_mae_fl_laban_e_time_unit_Sg__get(std::vector< mae::fl::laban::e_time_unit > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_time_unit_Sg__set(std::vector< mae::fl::laban::e_time_unit > *self,int i,std::vector< enum mae::fl::laban::e_time_unit >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/bone.hpp"


	#include "../../../src/mae/i_sequence_recognizer.hpp"


	#include "../../../src/mae/fl/laban/i_decision_maker.hpp"


	#include "../../../src/mae/fl/laban/decision_value.hpp"


	#include "../../../src/mae/fl/laban/rewriting_forest.hpp"

SWIGINTERN std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::const_reference std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *self,int i,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <list>
#include <stdexcept>


	#include "../../../src/mae/fl/laban/decision_forest.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__set(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i,std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::const_reference std_list_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *self,int i){
                int size = int(self->size());
                int j;
                if (i>=0 && i<size) {
                    std::list<std::shared_ptr< mae::fl::laban::laban_sequence >>::const_iterator p;  
                    p=self->begin(); 
                    for (j=0; j<i; j++) {p++;}
                    return (*p);   
                }
                else
                    throw std::out_of_range("list index out of range");
            }

	#include "../../../src/mae/fl/laban/laban_sequence_recognizer.hpp"


#include <list>
#include <stdexcept>


	#include "../../../src/mae/general_pose.hpp"


	#include "../../../src/mae/general_enriched_pose.hpp"


	#include "../../../src/mae/i_sequence_generator.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence_generator.hpp"


	#include "../../../src/mae/fl/fl_movement_controller.hpp"


	#include "../../../src/mae/fl/bvh_spec.hpp"

SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN bool const &std_map_Sl_std_string_Sc_bool_Sg__get(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__set(std::map< std::string,bool > *self,std::string const &key,bool const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__del(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg__has_key(std::map< std::string,bool > *self,std::string const &key){
                std::map<std::string,bool >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/bvh_data.hpp"

SWIGINTERN std::vector< std::shared_ptr< mae::general_skeleton > >::const_reference std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(std::vector< std::shared_ptr< mae::general_skeleton > > *self,int i,std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <utility>


	#include "../../../src/mae/fl/bvh_controller.hpp"


	#include "../../../src/mae/fl/msr_spec.hpp"

SWIGINTERN int const &std_map_Sl_unsigned_SS_int_Sc_int_Sg__get(std::map< unsigned int,int > *self,unsigned int const &key){
                std::map<unsigned int,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_unsigned_SS_int_Sc_int_Sg__set(std::map< unsigned int,int > *self,unsigned int const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_unsigned_SS_int_Sc_int_Sg__del(std::map< unsigned int,int > *self,unsigned int const &key){
                std::map<unsigned int,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_unsigned_SS_int_Sc_int_Sg__has_key(std::map< unsigned int,int > *self,unsigned int const &key){
                std::map<unsigned int,int >::iterator i = self->find(key);
                return i != self->end();
            }

	#include "../../../src/mae/fl/msr_data.hpp"


	#include "../../../src/mae/fl/msr_data_controller.hpp"


	#include "../../../src/mae/fl/laban/laban_sequence_reader.hpp"


	#include "../../../src/mae/fl/laban/mv/i_symbol.hpp"


	#include "../../../src/mae/fl/laban/movement.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::movement > mae_fl_laban_movement_cast_to_movement(std::shared_ptr< mae::fl::laban::i_movement > base){
    return std::dynamic_pointer_cast<mae::fl::laban::movement>(base);
  }

	#include "../../../src/mae/fl/laban/e_path_type.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_path_type >::const_reference std_vector_Sl_mae_fl_laban_e_path_type_Sg__get(std::vector< mae::fl::laban::e_path_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_path_type_Sg__set(std::vector< mae::fl::laban::e_path_type > *self,int i,std::vector< enum mae::fl::laban::e_path_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/path.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::path > mae_fl_laban_path_cast_to_path(std::shared_ptr< mae::fl::laban::i_movement > base){
    return std::dynamic_pointer_cast<mae::fl::laban::path>(base);
  }

	#include "../../../src/mae/fl/laban/e_relationship_type.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::e_relationship_type >::const_reference std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__get(std::vector< mae::fl::laban::e_relationship_type > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__set(std::vector< mae::fl::laban::e_relationship_type > *self,int i,std::vector< enum mae::fl::laban::e_relationship_type >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/i_dynamics_sign.hpp"


	#include "../../../src/mae/fl/laban/ps/i_pre_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/relationship_endpoint.hpp"


	#include "../../../src/mae/fl/laban/relationship_bow.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::relationship_bow > mae_fl_laban_relationship_bow_cast_to_relationship_bow(std::shared_ptr< mae::fl::laban::i_movement > base){
    return std::dynamic_pointer_cast<mae::fl::laban::relationship_bow>(base);
  }

	#include "../../../src/mae/fl/laban/mv/i_degree_sign.hpp"


	#include "../../../src/mae/fl/laban/mv/e_level.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_level >::const_reference std_vector_Sl_mae_fl_laban_mv_e_level_Sg__get(std::vector< mae::fl::laban::mv::e_level > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_level_Sg__set(std::vector< mae::fl::laban::mv::e_level > *self,int i,std::vector< enum mae::fl::laban::mv::e_level >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/pin.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::pin > mae_fl_laban_mv_pin_cast_to_pin(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::pin>(base);
  }

	#include "../../../src/mae/fl/laban/room_direction.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::room_direction > mae_fl_laban_room_direction_cast_to_room_direction(std::shared_ptr< mae::fl::laban::i_movement > base){
    return std::dynamic_pointer_cast<mae::fl::laban::room_direction>(base);
  }

	#include "../../../src/mae/fl/laban/mv/accent_sign.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::accent_sign > mae_fl_laban_mv_accent_sign_cast_to_accent_sign(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::accent_sign>(base);
  }

	#include "../../../src/mae/fl/laban/mv/e_dynamic.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_dynamic >::const_reference std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__get(std::vector< mae::fl::laban::mv::e_dynamic > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__set(std::vector< mae::fl::laban::mv::e_dynamic > *self,int i,std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/dynamic_sign.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::dynamic_sign > mae_fl_laban_mv_dynamic_sign_cast_to_dynamic_sign(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::dynamic_sign>(base);
  }

	#include "../../../src/mae/fl/laban/mv/e_cancel.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_cancel >::const_reference std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__get(std::vector< mae::fl::laban::mv::e_cancel > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__set(std::vector< mae::fl::laban::mv::e_cancel > *self,int i,std::vector< enum mae::fl::laban::mv::e_cancel >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/cancellation_symbol.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > mae_fl_laban_mv_cancellation_symbol_cast_to_cancellation_symbol(std::shared_ptr< mae::fl::laban::mv::i_symbol > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::cancellation_symbol>(base);
  }

	#include "../../../src/mae/fl/laban/mv/e_space.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_space >::const_reference std_vector_Sl_mae_fl_laban_mv_e_space_Sg__get(std::vector< mae::fl::laban::mv::e_space > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_space_Sg__set(std::vector< mae::fl::laban::mv::e_space > *self,int i,std::vector< enum mae::fl::laban::mv::e_space >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/e_space_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_space_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__get(std::vector< mae::fl::laban::mv::e_space_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__set(std::vector< mae::fl::laban::mv::e_space_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/space_measurement.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::space_measurement > mae_fl_laban_mv_space_measurement_cast_to_space_measurement(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::space_measurement>(base);
  }

	#include "../../../src/mae/fl/laban/mv/e_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__get(std::vector< mae::fl::laban::mv::e_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__set(std::vector< mae::fl::laban::mv::e_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/e_contact_hook.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_contact_hook >::const_reference std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__get(std::vector< mae::fl::laban::mv::e_contact_hook > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__set(std::vector< mae::fl::laban::mv::e_contact_hook > *self,int i,std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/direction_symbol.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::direction_symbol > mae_fl_laban_mv_direction_symbol_cast_to_direction_symbol(std::shared_ptr< mae::fl::laban::mv::i_symbol > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::direction_symbol>(base);
  }

	#include "../../../src/mae/fl/laban/mv/e_turn_direction.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::mv::e_turn_direction >::const_reference std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__get(std::vector< mae::fl::laban::mv::e_turn_direction > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__set(std::vector< mae::fl::laban::mv::e_turn_direction > *self,int i,std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/mv/turn_symbol.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::turn_symbol > mae_fl_laban_mv_turn_symbol_cast_to_turn_symbol(std::shared_ptr< mae::fl::laban::mv::i_symbol > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::turn_symbol>(base);
  }

	#include "../../../src/mae/fl/laban/mv/vibration_symbol.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::mv::vibration_symbol > mae_fl_laban_mv_vibration_symbol_cast_to_vibration_symbol(std::shared_ptr< mae::fl::laban::mv::i_symbol > base){
    return std::dynamic_pointer_cast<mae::fl::laban::mv::vibration_symbol>(base);
  }

	#include "../../../src/mae/fl/laban/ps/i_part.hpp"


	#include "../../../src/mae/fl/laban/ps/i_endpoint.hpp"


	#include "../../../src/mae/fl/laban/ps/e_area.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_area >::const_reference std_vector_Sl_mae_fl_laban_ps_e_area_Sg__get(std::vector< mae::fl::laban::ps::e_area > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_area_Sg__set(std::vector< mae::fl::laban::ps::e_area > *self,int i,std::vector< enum mae::fl::laban::ps::e_area >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/area_part.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::area_part > mae_fl_laban_ps_area_part_cast_to_area_part(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::area_part>(base);
  }

	#include "../../../src/mae/fl/laban/ps/e_side.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_side >::const_reference std_vector_Sl_mae_fl_laban_ps_e_side_Sg__get(std::vector< mae::fl::laban::ps::e_side > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_side_Sg__set(std::vector< mae::fl::laban::ps::e_side > *self,int i,std::vector< enum mae::fl::laban::ps::e_side >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/body_part.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::body_part > mae_fl_laban_ps_body_part_cast_to_body_part(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::body_part>(base);
  }

	#include "../../../src/mae/fl/laban/ps/i_limb.hpp"


	#include "../../../src/mae/fl/laban/ps/custom_limb.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::custom_limb > mae_fl_laban_ps_custom_limb_cast_to_custom_limb(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::custom_limb>(base);
  }

	#include "../../../src/mae/fl/laban/ps/e_limb.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_limb >::const_reference std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__get(std::vector< mae::fl::laban::ps::e_limb > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__set(std::vector< mae::fl::laban::ps::e_limb > *self,int i,std::vector< enum mae::fl::laban::ps::e_limb >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/default_limb.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::default_limb > mae_fl_laban_ps_default_limb_cast_to_default_limb(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::default_limb>(base);
  }

	#include "../../../src/mae/fl/laban/ps/e_digit.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_digit >::const_reference std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__get(std::vector< mae::fl::laban::ps::e_digit > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__set(std::vector< mae::fl::laban::ps::e_digit > *self,int i,std::vector< enum mae::fl::laban::ps::e_digit >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/digit_part.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::digit_part > mae_fl_laban_ps_digit_part_cast_to_digit_part(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::digit_part>(base);
  }

	#include "../../../src/mae/fl/laban/ps/e_limb_side.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_limb_side >::const_reference std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__get(std::vector< mae::fl::laban::ps::e_limb_side > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__set(std::vector< mae::fl::laban::ps::e_limb_side > *self,int i,std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/surface_part.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::surface_part > mae_fl_laban_ps_surface_part_cast_to_surface_part(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::surface_part>(base);
  }

	#include "../../../src/mae/fl/laban/ps/e_joint.hpp"

SWIGINTERN std::vector< enum mae::fl::laban::ps::e_joint >::const_reference std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__get(std::vector< mae::fl::laban::ps::e_joint > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__set(std::vector< mae::fl::laban::ps::e_joint > *self,int i,std::vector< enum mae::fl::laban::ps::e_joint >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/fl/laban/ps/joint_part.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::joint_part > mae_fl_laban_ps_joint_part_cast_to_joint_part(std::shared_ptr< mae::fl::laban::ps::i_part > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::joint_part>(base);
  }

	#include "../../../src/mae/fl/laban/ps/prop.hpp"

SWIGINTERN std::shared_ptr< mae::fl::laban::ps::prop > mae_fl_laban_ps_prop_cast_to_prop(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > base){
    return std::dynamic_pointer_cast<mae::fl::laban::ps::prop>(base);
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "_wrapper_JAVA_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IniReader(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  mae::ini_reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::ini_reader *)new mae::ini_reader(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::ini_reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IniReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::ini_reader *arg1 = (mae::ini_reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::ini_reader **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IniReader_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::ini_reader *arg1 = (mae::ini_reader *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::ini_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->get_value(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EKinectJoint_1INVALID_1KINECTJOINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_kinect_joint result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_kinect_joint)mae::e_kinect_joint::INVALID_KINECTJOINT;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::e_kinect_joint arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_kinect_joint)jarg1; 
  {
    try {
      result = mae::e_kinect_joint_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1toInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::e_kinect_joint arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_kinect_joint)jarg1; 
  {
    try {
      result = (int)mae::e_kinect_joint_c::to_int(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_kinect_joint > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::e_kinect_joint_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_kinect_joint > **)&jresult = new std::vector< mae::e_kinect_joint >((const std::vector< mae::e_kinect_joint > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1isDummy(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  mae::e_kinect_joint arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_kinect_joint)jarg1; 
  {
    try {
      result = (bool)mae::e_kinect_joint_c::is_dummy(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1isTorso(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  mae::e_kinect_joint arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_kinect_joint)jarg1; 
  {
    try {
      result = (bool)mae::e_kinect_joint_c::is_torso(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EKinectJointC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::e_kinect_joint result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::e_kinect_joint)mae::e_kinect_joint_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EKinectJointC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::e_kinect_joint_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_kinect_joint_c *)new mae::e_kinect_joint_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::e_kinect_joint_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EKinectJointC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::e_kinect_joint_c *arg1 = (mae::e_kinect_joint_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::e_kinect_joint_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  {
    try {
      result = (std::vector< int > *)new std::vector< int >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EKinectJointVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_kinect_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::e_kinect_joint > *)new std::vector< mae::e_kinect_joint >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_kinect_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EKinectJointVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::e_kinect_joint >::size_type arg1 ;
  std::vector< mae::e_kinect_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::e_kinect_joint >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::e_kinect_joint > *)new std::vector< mae::e_kinect_joint >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_kinect_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  std::vector< enum mae::e_kinect_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::e_kinect_joint > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  std::vector< enum mae::e_kinect_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::e_kinect_joint > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  std::vector< enum mae::e_kinect_joint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  arg2 = (std::vector< enum mae::e_kinect_joint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::e_kinect_joint > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  std::vector< enum mae::e_kinect_joint >::value_type *arg2 = 0 ;
  std::vector< enum mae::e_kinect_joint >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  temp2 = (std::vector< enum mae::e_kinect_joint >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::e_kinect_joint >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_kinect_joint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::e_kinect_joint >::value_type *) &std_vector_Sl_mae_e_kinect_joint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EKinectJointVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_kinect_joint >::value_type *arg3 = 0 ;
  std::vector< enum mae::e_kinect_joint >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::e_kinect_joint >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_e_kinect_joint_Sg__set(arg1,arg2,(enum mae::e_kinect_joint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EKinectJointVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::e_kinect_joint > *arg1 = (std::vector< mae::e_kinect_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::e_kinect_joint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1INVALID_1BONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::INVALID_BONE;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::HEAD;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_UPPER_ARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_FOREARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_ARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_UPPER_ARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_FOREARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_ARM;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_THIGH;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_SHANK;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_LEG;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_THIGH;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_SHANK;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_LEG;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1HAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_HAND;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1RIGHT_1FOOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::RIGHT_FOOT;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1HAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_HAND;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBone_1LEFT_1FOOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone)mae::e_bone::LEFT_FOOT;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EBoneC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::e_bone arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  {
    try {
      result = mae::e_bone_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBoneC_1toInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::e_bone arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  {
    try {
      result = (int)mae::e_bone_c::to_int(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EBoneC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::e_bone_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_bone > **)&jresult = new std::vector< mae::e_bone >((const std::vector< mae::e_bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBoneC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::e_bone)mae::e_bone_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EBoneC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::e_bone_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::e_bone_c *)new mae::e_bone_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::e_bone_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EBoneC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::e_bone_c *arg1 = (mae::e_bone_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::e_bone_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EBoneVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::e_bone > *)new std::vector< mae::e_bone >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EBoneVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::e_bone >::size_type arg1 ;
  std::vector< mae::e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::e_bone >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::e_bone > *)new std::vector< mae::e_bone >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::e_bone > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::e_bone > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (std::vector< enum mae::e_bone >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::e_bone > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  std::vector< enum mae::e_bone >::value_type *arg2 = 0 ;
  std::vector< enum mae::e_bone >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  temp2 = (std::vector< enum mae::e_bone >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::e_bone >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::e_bone >::value_type *) &std_vector_Sl_mae_e_bone_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EBoneVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  int arg2 ;
  std::vector< enum mae::e_bone >::value_type *arg3 = 0 ;
  std::vector< enum mae::e_bone >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::e_bone >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_e_bone_Sg__set(arg1,arg2,(enum mae::e_bone const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EBoneVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::e_bone > *arg1 = (std::vector< mae::e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::e_bone > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Bone_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::bone *)new mae::bone();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Bone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Bone_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Bone_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  {
    try {
      result = (mae::bone *)new mae::bone(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Bone_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  std::vector< mae::bone > arg2 ;
  std::vector< mae::bone > *argp2 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::e_bone)jarg1; 
  argp2 = *(std::vector< mae::bone > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (mae::bone *)new mae::bone(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::bone > **)&jresult = result ? new std::shared_ptr<  mae::bone >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Bone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::bone const *)arg1)->get_id();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Bone_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::bone const *)arg1)->get_name();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1getFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::bone const *)arg1)->get_from();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1getTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::bone const *)arg1)->get_to();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Bone_1hasMiddleJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::bone const *)arg1)->has_middle_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1getMiddleJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::shared_ptr< mae::bone const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::bone > **)&jarg1;
  arg1 = (mae::bone *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::bone const *)arg1)->get_middle_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Bone_1defaultBones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::bone::default_bones();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::bone > **)&jresult = new std::vector< mae::bone >((const std::vector< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Bone_1defaultKinectBones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::bone::default_kinect_bones();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::bone > **)&jresult = new std::vector< mae::bone >((const std::vector< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1rESERVEDTOPDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_TOP_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Bone_1rESERVEDRIGHTLEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_RIGHT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BoneVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::bone > *)new std::vector< mae::bone >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BoneVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< mae::bone >::size_type arg1 ;
  std::vector< mae::bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< mae::bone >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::bone > *)new std::vector< mae::bone >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BoneVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::bone > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BoneVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::bone > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BoneVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (std::vector< mae::bone >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_BoneVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::bone > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BoneVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BoneVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  std::vector< mae::bone >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  
  arg2 = (std::vector< mae::bone >::value_type *)((*(std::shared_ptr< const mae::bone > **)&jarg2) ? (*(std::shared_ptr< const mae::bone > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< mae::bone >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BoneVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< mae::bone >::value_type *) &std_vector_Sl_mae_bone_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< const mae::bone > **)&jresult = new std::shared_ptr< const mae::bone >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BoneVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  int arg2 ;
  std::vector< mae::bone >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  
  arg3 = (std::vector< mae::bone >::value_type *)((*(std::shared_ptr< const mae::bone > **)&jarg3) ? (*(std::shared_ptr< const mae::bone > **)&jarg3)->get() : 0);
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< mae::bone >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_mae_bone_Sg__set(arg1,arg2,(mae::bone const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1BoneVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::bone > *arg1 = (std::vector< mae::bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::bone > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralPose(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::general_pose *)new mae::general_pose();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1GeneralPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1setDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->set_direction(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)((mae::general_pose const *)arg1)->get_direction(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1setDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->set_distance(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1getDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  int arg3 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (double)((mae::general_pose const *)arg1)->get_distance(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  double arg3 ;
  std::shared_ptr< mae::general_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->set_rotation(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1getRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (double)((mae::general_pose const *)arg1)->get_rotation(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1getBodyParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_pose const *)arg1)->get_body_parts();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralPose_1getDirections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_pose *arg1 = (mae::general_pose *) 0 ;
  std::shared_ptr< mae::general_pose const > *smartarg1 = 0 ;
  std::list< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_pose > **)&jarg1;
  arg1 = (mae::general_pose *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_pose const *)arg1)->get_directions();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< int > **)&jresult = new std::list< int >((const std::list< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IntList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::list< int > *)new std::list< int >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IntList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  {
    try {
      result = ((std::list< int > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IntList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  {
    try {
      result = (bool)((std::list< int > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntList_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::value_type *arg2 = 0 ;
  std::list< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  temp2 = (std::list< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::list< int >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_IntList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  std::list< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::list< int >::value_type *) &std_list_Sl_int_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IntList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IPoseListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IPoseListener_1onPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_pose_listener *arg1 = (mae::i_pose_listener *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::general_pose > arg3 ;
  std::shared_ptr< mae::general_pose > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::i_pose_listener **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::general_pose > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->on_pose(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralEnrichedPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::general_enriched_pose *)new mae::general_enriched_pose();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralEnrichedPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::general_pose > arg1 ;
  std::shared_ptr< mae::general_pose > *argp1 ;
  mae::general_enriched_pose *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::general_pose > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::general_enriched_pose *)new mae::general_enriched_pose(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_enriched_pose > **)&jresult = result ? new std::shared_ptr<  mae::general_enriched_pose >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1GeneralEnrichedPose(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralEnrichedPose_1setKeyPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_key_pose(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralEnrichedPose_1isKeyPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->is_key_pose(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralEnrichedPose_1setInMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->set_in_motion(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralEnrichedPose_1isInMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::general_enriched_pose *arg1 = (mae::general_enriched_pose *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_enriched_pose > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_enriched_pose > **)&jarg1;
  arg1 = (mae::general_enriched_pose *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)(arg1)->is_in_motion(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EnrichedPoseList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::list< std::shared_ptr< mae::general_enriched_pose > > *)new std::list< std::shared_ptr< mae::general_enriched_pose > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EnrichedPoseList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  {
    try {
      result = ((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EnrichedPoseList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  {
    try {
      result = (bool)((std::list< std::shared_ptr< mae::general_enriched_pose > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EnrichedPoseList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EnrichedPoseList_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *arg2 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = jarg2 ? *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EnrichedPoseList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  int arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type *) &std_list_Sl_std_shared_ptr_Sl_mae_general_enriched_pose_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::general_enriched_pose > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_enriched_pose >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EnrichedPoseList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::shared_ptr< mae::general_enriched_pose > > *arg1 = (std::list< std::shared_ptr< mae::general_enriched_pose > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Hierarchy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::hierarchy *)new mae::hierarchy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Hierarchy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy_element > arg1 ;
  std::shared_ptr< mae::hierarchy_element > *argp1 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::hierarchy *)new mae::hierarchy(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1getRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy const *)arg1)->get_root();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr< mae::hierarchy_element >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1setRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_root(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1getElementSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy const *)arg1)->get_element_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1getSortedElementSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy const *)arg1)->get_sorted_element_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (mae::hierarchy_element *)((mae::hierarchy const *)arg1)->at(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1compareElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::shared_ptr< mae::hierarchy_element > *arg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *arg2 = 0 ;
  std::shared_ptr< mae::hierarchy_element > tempnull1 ;
  std::shared_ptr< mae::hierarchy_element > tempnull2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(std::shared_ptr< mae::hierarchy_element > **)&jarg1 : &tempnull1; 
  arg2 = jarg2 ? *(std::shared_ptr< mae::hierarchy_element > **)&jarg2 : &tempnull2; 
  {
    try {
      result = (bool)mae::hierarchy::compare_elements((std::shared_ptr< mae::hierarchy_element > const &)*arg1,(std::shared_ptr< mae::hierarchy_element > const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::shared_ptr< mae::hierarchy const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy > **)&jarg1;
  arg1 = (mae::hierarchy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1defaultHierarchy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::hierarchy::default_hierarchy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Hierarchy_1defaultKinectHierarchy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::hierarchy::default_kinect_hierarchy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1HierarchyElementVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1HierarchyElementVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::hierarchy_element > > *)new std::vector< std::shared_ptr< mae::hierarchy_element > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::hierarchy_element > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::hierarchy_element > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::hierarchy_element >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElementVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::hierarchy_element > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_hierarchy_element_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::hierarchy_element > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1HierarchyElementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< mae::hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1HierarchyElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1HierarchyElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1HierarchyElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1HierarchyElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::hierarchy_element const *)arg1)->get_id();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy_element const *)arg1)->get_name();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1isTorsoJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::hierarchy_element const *)arg1)->is_torso_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1isDummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::hierarchy_element const *)arg1)->is_dummy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::hierarchy_element *)((mae::hierarchy_element const *)arg1)->get_parent();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::hierarchy_element > **)&jresult = result ? new std::shared_ptr<  mae::hierarchy_element >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1isParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::hierarchy_element const *)arg1)->is_parent();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1isParentOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)((mae::hierarchy_element const *)arg1)->is_parent_of(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1getChildren(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy_element const *)arg1)->get_children();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1pushFront_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->push_front(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1pushFront_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->push_front(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->insert(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->insert(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1pushBack_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->push_back(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1pushBack_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->push_back(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->erase(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->erase(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1eraseAt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->erase_at(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1eraseAt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->erase_at(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->clear(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1getElementSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_element_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((mae::hierarchy_element const *)arg1)->str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_HierarchyElement_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::shared_ptr< mae::hierarchy_element const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::hierarchy_element > **)&jarg1;
  arg1 = (mae::hierarchy_element *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::hierarchy_element const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Vec3d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::math::vec3d *)new mae::math::vec3d();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::math::vec3d > **)&jresult = result ? new std::shared_ptr<  mae::math::vec3d >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Vec3d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::math::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (mae::math::vec3d *)new mae::math::vec3d(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::math::vec3d > **)&jresult = result ? new std::shared_ptr<  mae::math::vec3d >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Vec3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Vec3d_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_x(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Vec3d_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::math::vec3d const *)arg1)->get_x();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Vec3d_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_y(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Vec3d_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::math::vec3d const *)arg1)->get_y();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Vec3d_1setZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_z(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Vec3d_1getZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::math::vec3d const *)arg1)->get_z();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Vec3d_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = ((mae::math::vec3d const *)arg1)->add(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Vec3d_1subtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = ((mae::math::vec3d const *)arg1)->subtract(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Vec3d_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::vec3d const *)arg1)->normalize();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Vec3d_1l2Norm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::math::vec3d const *)arg1)->l2_norm();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Vec3d_1dot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (double)((mae::math::vec3d const *)arg1)->dot(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Vec3d_1cross(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = ((mae::math::vec3d const *)arg1)->cross(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Vec3d_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::vec3d *arg1 = (mae::math::vec3d *) 0 ;
  std::shared_ptr< mae::math::vec3d const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::vec3d > **)&jarg1;
  arg1 = (mae::math::vec3d *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::vec3d const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1GeneralJoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::general_joint *)new mae::general_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  double arg2 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralJoint_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::general_joint *)new mae::general_joint(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_joint > **)&jresult = result ? new std::shared_ptr<  mae::general_joint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_x(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::general_joint const *)arg1)->get_x();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_y(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::general_joint const *)arg1)->get_y();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_z(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1getZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::general_joint const *)arg1)->get_z();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_valid(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::general_joint const *)arg1)->is_valid();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_confidence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1getConfidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->get_confidence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1setRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_rotation(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1getRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->get_rotation();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1equalsVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  mae::general_joint arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  mae::general_joint *argp2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = (*(std::shared_ptr<  mae::general_joint > **)&jarg2) ? (*(std::shared_ptr<  mae::general_joint > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mae::general_joint");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::general_joint const *)arg1)->equals_val(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint > arg2 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_joint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::general_joint const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_GeneralJoint_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::shared_ptr< mae::general_joint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_joint > **)&jarg1;
  arg1 = (mae::general_joint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_joint const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Basis_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::math::basis *)new mae::math::basis();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::math::basis > **)&jresult = result ? new std::shared_ptr<  mae::math::basis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Basis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::math::vec3d > arg1 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::vec3d > arg3 ;
  std::shared_ptr< mae::math::vec3d > arg4 ;
  std::shared_ptr< mae::math::vec3d > *argp1 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  std::shared_ptr< mae::math::vec3d > *argp3 ;
  std::shared_ptr< mae::math::vec3d > *argp4 ;
  mae::math::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::math::vec3d > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::math::vec3d > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::math::vec3d > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  {
    try {
      result = (mae::math::basis *)new mae::math::basis(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::math::basis > **)&jresult = result ? new std::shared_ptr<  mae::math::basis >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Basis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Basis_1getU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::basis const *)arg1)->get_u();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Basis_1getR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::basis const *)arg1)->get_r();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Basis_1getT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::basis const *)arg1)->get_t();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Basis_1getPositionVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::basis const *)arg1)->get_position_vector();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Basis_1setU(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_u(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Basis_1setR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_r(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Basis_1setT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_t(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_Basis_1setPositionVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::math::basis > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_position_vector(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Basis_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::math::basis *arg1 = (mae::math::basis *) 0 ;
  std::shared_ptr< mae::math::basis const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::math::basis > **)&jarg1;
  arg1 = (mae::math::basis *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::math::basis const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralSkeleton_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::general_skeleton *)new mae::general_skeleton();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::general_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralSkeleton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::hierarchy > arg1 ;
  std::shared_ptr< mae::hierarchy > *argp1 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::hierarchy > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::general_skeleton *)new mae::general_skeleton(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::general_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::general_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1GeneralSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1setJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_joint > arg3 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_joint > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->set_joint(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1getJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_joint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->get_joint(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_joint > **)&jresult = result ? new std::shared_ptr< mae::general_joint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1getHierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->get_hierarchy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1setHierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::hierarchy > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_hierarchy(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1setTopDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_top_down(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1getTopDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->get_top_down();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1setRightLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::bone > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_right_left(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1getRightLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->get_right_left();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::bone > **)&jresult = result ? new std::shared_ptr< mae::bone >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1setWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::math::vec3d > arg2 ;
  std::shared_ptr< mae::general_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::vec3d > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_weight(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1getWeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::vec3d > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->get_weight();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::vec3d > **)&jresult = result ? new std::shared_ptr< mae::math::vec3d >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1plyStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::general_skeleton const *)arg1)->ply_str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeleton_1plyFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::general_skeleton const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::general_skeleton > **)&jarg1;
  arg1 = (mae::general_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((mae::general_skeleton const *)arg1)->ply_file(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::fl_skeleton *)new mae::fl::fl_skeleton();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_skeleton >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1setTorsoBasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::math::basis > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::math::basis > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_torso_basis(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1getTorsoBasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::math::basis > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::fl_skeleton const *)arg1)->get_torso_basis();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::math::basis > **)&jresult = result ? new std::shared_ptr< mae::math::basis >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1setOrigSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->set_orig_skeleton(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1getOrigSkeleton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::fl_skeleton const *)arg1)->get_orig_skeleton();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_skeleton > **)&jresult = result ? new std::shared_ptr< mae::general_skeleton >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::fl_skeleton *arg1 = (mae::fl::fl_skeleton *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_skeleton > **)&jarg1;
  arg1 = (mae::fl::fl_skeleton *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::fl_skeleton const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlSkeletonPoseDetector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jarg1;
  arg1 = (mae::i_pose_detector<mae::fl::fl_skeleton> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonPoseDetector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::general_pose > arg5 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::general_pose > *argp5 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jarg1;
  arg1 = (mae::i_pose_detector<mae::fl::fl_skeleton> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::general_pose > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (arg1)->pose(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonPoseDetector_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_pose_detector< mae::fl::fl_skeleton > *arg1 = (mae::i_pose_detector< mae::fl::fl_skeleton > *) 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_pose_detector<mae::fl::fl_skeleton> > **)&jarg1;
  arg1 = (mae::i_pose_detector<mae::fl::fl_skeleton> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlPoseDetector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  bool arg2 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlPoseDetector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlPoseDetector_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::fl_pose_detector *)new mae::fl::fl_pose_detector();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr<  mae::fl::fl_pose_detector >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlPoseDetector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1setHysteresisVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_hysteresis_val(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1getHysteresisVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::fl_pose_detector const *)arg1)->get_hysteresis_val();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1pose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::general_pose > arg5 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::general_pose > *argp5 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::general_pose > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (arg1)->pose(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1vectorPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::general_pose > arg4 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  std::shared_ptr< mae::general_pose > *argp4 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::general_pose > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  {
    try {
      result = (arg1)->vector_pose(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1defaultHysteresisVal(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (double)mae::fl::fl_pose_detector::default_hysteresis_val();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::fl_pose_detector *arg1 = (mae::fl::fl_pose_detector *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::fl_pose_detector > **)&jarg1;
  arg1 = (mae::fl::fl_pose_detector *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IPreSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPreSign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPreSign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPreSign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPreSign_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPreSign_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::i_pre_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IPreSign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_pre_sign *arg1 = (mae::fl::laban::ps::i_pre_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_pre_sign > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_pre_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_pre_sign const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ColumnDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::column_definition *)new mae::fl::laban::column_definition(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ColumnDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  mae::fl::laban::column_definition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  {
    try {
      result = (mae::fl::laban::column_definition *)new mae::fl::laban::column_definition(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::column_definition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ColumnDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1getColumnIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::column_definition const *)arg1)->get_column_index();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1getPreSign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::column_definition const *)arg1)->get_pre_sign();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::column_definition const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::column_definition const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::column_definition const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::column_definition *arg1 = (mae::fl::laban::column_definition *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::column_definition const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::column_definition > **)&jarg1;
  arg1 = (mae::fl::laban::column_definition *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::column_definition const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ColumnDefinition_1defaultDefinitions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::column_definition::default_definitions();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ColumnDefinitionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ColumnDefinitionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *)new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::column_definition > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::column_definition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ColumnDefinitionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_column_definition_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::column_definition > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ColumnDefinitionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_IMovement_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::i_movement const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovement_1getMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::i_movement const *)arg1)->get_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_IMovement_1getBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::i_movement const *)arg1)->get_beat();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_IMovement_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::i_movement const *)arg1)->get_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::i_movement const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovement_1symbolEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::i_movement const *)arg1)->symbol_equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IMovement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IMovement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IMovement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IMovement_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IMovement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::i_movement *arg1 = (mae::fl::laban::i_movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::i_movement > **)&jarg1;
  arg1 = (mae::fl::laban::i_movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::i_movement const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IntIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< int,int > *)new std::map< int,int >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IntIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = 0 ;
  std::map< int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< int,int > *)new std::map< int,int >((std::map< int,int > const &)*arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< int,int > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< int,int > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (int *) &std_map_Sl_int_Sc_int_Sg__get(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      std_map_Sl_int_Sc_int_Sg__set(arg1,(int const &)*arg2,(int const &)*arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        std_map_Sl_int_Sc_int_Sg__del(arg1,(int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IntIntMap_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,int > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_map_Sl_int_Sc_int_Sg__has_key(arg1,(int const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IntIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int,int > *arg1 = (std::map< int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ETimeUnitC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_time_unit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_time_unit)jarg1; 
  {
    try {
      result = mae::fl::laban::e_time_unit_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETimeUnitC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::e_time_unit_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = new std::vector< mae::fl::laban::e_time_unit >((const std::vector< mae::fl::laban::e_time_unit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ETimeUnitC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::e_time_unit)mae::fl::laban::e_time_unit_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETimeUnitC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_time_unit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::e_time_unit_c *)new mae::fl::laban::e_time_unit_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::e_time_unit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ETimeUnitC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_time_unit_c *arg1 = (mae::fl::laban::e_time_unit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_time_unit_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETimeUnitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::e_time_unit > *)new std::vector< mae::fl::laban::e_time_unit >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETimeUnitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type arg1 ;
  std::vector< mae::fl::laban::e_time_unit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_time_unit >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::e_time_unit > *)new std::vector< mae::fl::laban::e_time_unit >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_time_unit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_time_unit >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::e_time_unit > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_time_unit >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::e_time_unit >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::e_time_unit >::value_type *) &std_vector_Sl_mae_fl_laban_e_time_unit_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETimeUnitVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_time_unit >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_time_unit >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_e_time_unit_Sg__set(arg1,arg2,(enum mae::fl::laban::e_time_unit const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ETimeUnitVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_time_unit > *arg1 = (std::vector< mae::fl::laban::e_time_unit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_time_unit > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::laban_sequence *)new mae::fl::laban::laban_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::laban_sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = (mae::fl::laban::laban_sequence *)new mae::fl::laban::laban_sequence(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_version();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setAuthors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::string > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_authors(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1addAuthor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->add_author(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getAuthors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_authors();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_title(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getTitle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_title();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_description(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_description();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setMeasures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->set_measures(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getMeasures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_measures();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setTimeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  mae::fl::laban::e_time_unit arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (mae::fl::laban::e_time_unit)jarg2; 
  {
    try {
      (arg1)->set_time_unit(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getTimeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::e_time_unit)((mae::fl::laban::laban_sequence const *)arg1)->get_time_unit();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setBeatDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->set_beat_duration(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getBeatDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beat_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setBeats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->set_beats(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getBeats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::laban_sequence const *)arg1)->get_beats();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setColumnDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_column_definitions(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1addColumnDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::column_definition > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_column_definition(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getColumnDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_definitions();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getColumnDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::column_definition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = (arg1)->get_column_definition(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::column_definition > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::column_definition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1clearColumnDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_column_definitions();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getColumns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_columns();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1setMovements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_movements(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getMovements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_movements();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1addMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_movement(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getColumnMovements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_column_movements(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1getLastMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->get_last_movement();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1clearMovements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_movements();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::string arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xmlNamespaceHeader_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xmlNamespaceHeader_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_header();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xmlSchemaLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_schema_location();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xmlNamespaceUri(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->xml_namespace_uri();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1xmlFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((mae::fl::laban::laban_sequence const *)arg1)->xml_file(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->svg(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1svgFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1svgFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1svgFile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((mae::fl::laban::laban_sequence const *)arg1)->svg_file(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence *arg1 = (mae::fl::laban::laban_sequence *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1defaultBeatDuration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (unsigned int)mae::fl::laban::laban_sequence::default_beat_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1defaultBeatsPerMeasure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (unsigned int)mae::fl::laban::laban_sequence::default_beats_per_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1defaultTimeUnit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::fl::laban::e_time_unit result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::e_time_unit)mae::fl::laban::laban_sequence::default_time_unit();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequence_1defaultColumns(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::laban_sequence::default_columns();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *)new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::i_movement >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::i_movement > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovementVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovementDecisionMaker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementDecisionMaker_1setRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_recognition_tolerance(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_IMovementDecisionMaker_1getRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->get_recognition_tolerance();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementDecisionMaker_1decideMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (bool)(arg1)->decide_match(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementDecisionMaker_1decideInsertion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg4 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp4 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (bool)(arg1)->decide_insertion(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementDecisionMaker_1positionOkay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *arg1 = (mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> > **)&jarg1;
  arg1 = (mae::fl::laban::i_decision_maker<mae::fl::laban::i_movement> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)(arg1)->position_okay(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  double arg4 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::e_time_unit arg3 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::e_time_unit)jarg3; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  double arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RewritingForest_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *argp1 ;
  mae::fl::laban::rewriting_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::rewriting_forest *)new mae::fl::laban::rewriting_forest(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::rewriting_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1RewritingForest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1getTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)(arg1)->get_tolerance();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1setTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_tolerance(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1replacements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->replacements(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > &)result)); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1addRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->add_rule(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1addRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_rule(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RewritingForest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::rewriting_forest *arg1 = (mae::fl::laban::rewriting_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::rewriting_forest > **)&jarg1;
  arg1 = (mae::fl::laban::rewriting_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = result ? new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg1 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *)new std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jresult = result ? new std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg2 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type *arg3 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__set(arg1,arg2,(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovementVectorVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *arg1 = (std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > *) 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > **)&jarg1;
  arg1 = (std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVectorDecisionValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp2 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVectorDecisionValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg1 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp1 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *)new mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovementVectorVectorDecisionValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValue_1getSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::i_movement > >((const std::vector< std::shared_ptr< mae::fl::laban::i_movement > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValue_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *arg1 = (mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *smartarg1 = 0 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > > **)&jarg1;
  arg1 = (mae::fl::laban::decision_value<mae::fl::laban::i_movement,std::vector<std::vector<std::shared_ptr<mae::fl::laban::i_movement> > > > *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_value();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jresult = result ? new std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVectorDecisionValueVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1IMovementVectorVectorDecisionValueVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *)new std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_IMovementVectorVectorDecisionValueVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_decision_value_Sl_mae_fl_laban_i_movement_Sc_std_vector_Sl_std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_i_movement_Sg__Sg__Sg__Sg__Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IMovementVectorVectorDecisionValueVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jboolean jarg8) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > arg7 ;
  bool arg8 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *argp7 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::rewriting_forest > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > arg7 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp6 ;
  std::shared_ptr< mae::fl::laban::rewriting_forest > *argp7 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg7_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::rewriting_forest > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > arg6 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > *argp6 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::i_decision_maker< mae::fl::laban::i_movement > > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jint jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  mae::fl::laban::e_time_unit arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (mae::fl::laban::e_time_unit)jarg5; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< int > arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  std::vector< int > *argp2 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< int >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DecisionForest_1_1SWIG_18(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::decision_forest *)new mae::fl::laban::decision_forest();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::decision_forest >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1DecisionForest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getColumnDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::decision_forest const *)arg1)->get_column_definitions();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::column_definition > >((const std::vector< std::shared_ptr< mae::fl::laban::column_definition > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getColumnIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::decision_forest const *)arg1)->get_column_ids();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1setRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_recognition_tolerance(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::decision_forest const *)arg1)->get_recognition_tolerance();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1setCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_cooldown(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getCooldown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::decision_forest const *)arg1)->get_cooldown();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getSequenceLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (int)((mae::fl::laban::decision_forest const *)arg1)->get_sequence_length(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1addSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1removeSequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->remove_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1removeSequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)(arg1)->remove_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1addRewritingRule_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > arg2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::i_movement > > *argp2 ;
  std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::i_movement > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::i_movement > >");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->add_rewriting_rule(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1addRewritingRule_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::decision_value< mae::fl::laban::i_movement,std::vector< std::vector< std::shared_ptr< mae::fl::laban::i_movement > > > > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_rewriting_rule(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1recreateSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (arg1)->recreate_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1getSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::decision_forest const *)arg1)->get_sequences();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1findSubmatches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::fl::laban::decision_forest > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->find_submatches(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1distanceToLast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg3 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (double)((mae::fl::laban::decision_forest const *)arg1)->distance_to_last(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DecisionForest_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::decision_forest *arg1 = (mae::fl::laban::decision_forest *) 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::decision_forest > **)&jarg1;
  arg1 = (mae::fl::laban::decision_forest *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::decision_forest const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::fl::laban::laban_sequence > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *)new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceList_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      result = ((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceList_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      result = (bool)((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceList_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceList_1pushBack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *arg2 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = jarg2 ? *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  int arg2 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type *) &std_list_Sl_std_shared_ptr_Sl_mae_fl_laban_laban_sequence_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *arg1 = (std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceSequenceRecognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1registerSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->register_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1deregisterSequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->deregister_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1deregisterSequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)(arg1)->deregister_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1clearRegisteredSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_registered_sequences();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1getSequenceLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (int)((mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > const *)arg1)->get_sequence_length(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceRecognizer_1recognizeSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_recognizer<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->recognize_sequence(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  bool arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceRecognizer_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_recognizer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_recognizer *)new mae::fl::laban::laban_sequence_recognizer(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceRecognizer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1setRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_recognition_tolerance(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1getDecisionForest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::decision_forest > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_decision_forest();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::decision_forest > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::decision_forest >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1registerSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->register_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1deregisterSequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)(arg1)->deregister_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1deregisterSequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)(arg1)->deregister_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1clearRegisteredSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_registered_sequences();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1getRegisteredSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_registered_sequences();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::list< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::list< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1getSequenceLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (int)((mae::fl::laban::laban_sequence_recognizer const *)arg1)->get_sequence_length(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1recognizeSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->recognize_sequence(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::laban_sequence_recognizer *arg1 = (mae::fl::laban::laban_sequence_recognizer *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_recognizer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::laban_sequence_recognizer const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceSequenceGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_generator<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceGenerator_1generateSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_generator<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->generate_sequence(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceGenerator_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_sequence_generator< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_generator< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_generator<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_generator<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  bool arg5 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  mae::fl::laban::e_time_unit arg4 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (mae::fl::laban::e_time_unit)jarg4; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  unsigned int arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceGenerator_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp1 ;
  mae::fl::laban::laban_sequence_generator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::laban_sequence_generator *)new mae::fl::laban::laban_sequence_generator(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::laban_sequence_generator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceGenerator_1generateSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  double arg2 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  std::list< std::shared_ptr< mae::general_enriched_pose > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  argp3 = *(std::list< std::shared_ptr< mae::general_enriched_pose > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::list< std::shared_ptr< mae::general_enriched_pose > >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (arg1)->generate_sequence(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceGenerator_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::fl::laban::laban_sequence_generator *arg1 = (mae::fl::laban::laban_sequence_generator *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::laban_sequence_generator > **)&jarg1;
  arg1 = (mae::fl::laban::laban_sequence_generator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceSequenceListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_listener< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceSequenceListener_1onSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_sequence_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_sequence_listener< mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_sequence_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_sequence_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->on_sequence(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceRecognition_1listener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognition_1listener_1onRecognition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > arg3 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->on_recognition(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognition_1listener_1onRecognition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_recognition_listener< mae::fl::laban::laban_sequence > *arg1 = (mae::i_recognition_listener< mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::vector< std::string > arg3 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::vector< std::string > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_recognition_listener<mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_recognition_listener<mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::vector< std::string > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->on_recognition(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlSkeletonLabanSequenceMovementDetector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1detectMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  double arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg4 ;
  std::vector< mae::bone > arg5 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp4 ;
  std::vector< mae::bone > *argp5 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (double)jarg3; 
  argp4 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::vector< mae::bone > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (arg1)->detect_movement(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1setBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  int arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_buffer(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1addListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1removeListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->remove_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1clearListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear_listeners();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1notifyListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::general_pose > arg3 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_pose > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::general_pose > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->notify_listeners(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementDetector_1getCurrentPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> > **)&jarg1;
  arg1 = (mae::i_movement_detector<mae::fl::fl_skeleton,mae::fl::laban::laban_sequence> *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const *)arg1)->get_current_pose();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  double arg5 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  int arg4 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > arg1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg2 ;
  std::vector< mae::bone > arg3 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > *argp1 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp2 ;
  std::vector< mae::bone > *argp3 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::vector< mae::bone > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jdouble jarg6) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  int arg5 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlSkeletonLabanSequenceMovementController_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > arg1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< mae::bone > arg4 ;
  std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > *argp1 ;
  std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > *argp2 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > *argp3 ;
  std::vector< mae::bone > *argp4 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  argp1 = *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::vector< mae::bone > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *)new mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence >(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlSkeletonLabanSequenceMovementController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1nextFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::fl::fl_skeleton > arg3 ;
  std::shared_ptr< mae::fl::fl_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->next_frame(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1registerSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->register_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1deregisterSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->deregister_sequence(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1clearRegisteredSequences(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      (arg1)->clear_registered_sequences();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1setNoBufferSizeUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_no_buffer_size_update(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1setFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_framerate(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = (double)((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const *)arg1)->get_framerate();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1clearBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      (arg1)->clear_buffer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getCurrentSequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = ((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const *)arg1)->get_current_sequence();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getCurrentPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::general_pose > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = ((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const *)arg1)->get_current_pose();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::general_pose > **)&jresult = result ? new std::shared_ptr< mae::general_pose >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getCurrentRecognition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = ((mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > const *)arg1)->get_current_recognition();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jresult = new std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >((const std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1addListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1removeListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_pose_listener > arg2 ;
  std::shared_ptr< mae::i_pose_listener > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_pose_listener > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->remove_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1addListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1removeListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_sequence_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->remove_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1addListener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->add_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1removeListener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > arg2 ;
  std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::i_recognition_listener< mae::fl::laban::laban_sequence > > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      (arg1)->remove_listener(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1clearListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      (arg1)->clear_listeners();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1notifySequenceListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > arg3 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->notify_sequence_listeners(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1notifyRecognitionListeners(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  uint64_t arg2 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > arg3 ;
  std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::laban_sequence > >");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->notify_recognition_listeners(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getMovementDetector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = (arg1)->get_movement_detector();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_movement_detector< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeletonLabanSequenceMovementController_1getSequenceRecognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *arg1 = (mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > *) 0 ;
  std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&jarg1; 
  {
    try {
      result = (arg1)->get_sequence_recognizer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&jresult = result ? new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  bool arg3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  bool arg8 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = jarg8 ? true : false; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  double arg7 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  arg7 = (double)jarg7; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  mae::fl::laban::e_time_unit arg6 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (mae::fl::laban::e_time_unit)jarg6; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  unsigned int arg3 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jdouble jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  double arg8 ;
  bool arg9 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = jarg9 ? true : false; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jdouble jarg8) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  double arg8 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  arg8 = (double)jarg8; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  mae::fl::laban::e_time_unit arg7 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (mae::fl::laban::e_time_unit)jarg7; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  unsigned int arg4 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1FlMovementController_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< mae::bone > arg1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > arg3 ;
  std::vector< mae::bone > *argp1 ;
  std::vector< std::shared_ptr< mae::fl::laban::column_definition > > *argp2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp3 ;
  mae::fl::fl_movement_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::vector< mae::bone > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< mae::bone >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::vector< std::shared_ptr< mae::fl::laban::column_definition > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::fl::laban::column_definition > >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::fl_movement_controller *)new mae::fl::fl_movement_controller(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::fl_movement_controller **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1FlMovementController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1nextFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  uint64_t arg2 ;
  std::shared_ptr< mae::general_skeleton > arg3 ;
  std::shared_ptr< mae::general_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(std::shared_ptr< mae::general_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      (arg1)->next_frame(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1setRecognitionTolerance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_recognition_tolerance(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1getLabanSequenceRecognizer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  {
    try {
      result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_recognizer();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_recognizer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1getLabanSequenceGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::laban::laban_sequence_generator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  {
    try {
      result = ((mae::fl::fl_movement_controller const *)arg1)->get_laban_sequence_generator();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence_generator >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1getFlPoseDetector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::fl_movement_controller *arg1 = (mae::fl::fl_movement_controller *) 0 ;
  std::shared_ptr< mae::fl::fl_pose_detector > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::fl_movement_controller **)&jarg1; 
  {
    try {
      result = ((mae::fl::fl_movement_controller const *)arg1)->get_fl_pose_detector();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jresult = result ? new std::shared_ptr< mae::fl::fl_pose_detector >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BvhSpec(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::map< std::string,int > arg5 ;
  std::map< std::string,bool > arg6 ;
  std::map< std::string,int > *argp5 ;
  std::map< std::string,bool > *argp6 ;
  mae::fl::bvh_spec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg6_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(std::map< std::string,int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,int >");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(std::map< std::string,bool > **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,bool >");
    return 0;
  }
  arg6 = *argp6; 
  {
    try {
      result = (mae::fl::bvh_spec *)new mae::fl::bvh_spec(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_spec >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1BvhSpec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getIdMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::bvh_spec const *)arg1)->get_id_map();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,int > **)&jresult = new std::map< std::string,int >((const std::map< std::string,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getTorsoMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec const > *smartarg1 = 0 ;
  std::map< std::string,bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::bvh_spec const *)arg1)->get_torso_map();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,bool > **)&jresult = new std::map< std::string,bool >((const std::map< std::string,bool > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getLeftAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_left_anchor();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getRightAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_right_anchor();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getTopAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_top_anchor();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1getBottomAnchor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::bvh_spec *arg1 = (mae::fl::bvh_spec *) 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_spec > **)&jarg1;
  arg1 = (mae::fl::bvh_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->get_bottom_anchor();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhSpec_1defaultSpec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::bvh_spec::default_spec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::bvh_spec > **)&jresult = result ? new std::shared_ptr< mae::fl::bvh_spec >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,int > *)new std::map< std::string,int >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,int > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringIntMap_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1StringIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringBoolMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< std::string,bool > *)new std::map< std::string,bool >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1StringBoolMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,bool > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< std::string,bool > *)new std::map< std::string,bool >((std::map< std::string,bool > const &)*arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< std::string,bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< std::string,bool > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< std::string,bool > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        result = (bool *) &std_map_Sl_std_string_Sc_bool_Sg__get(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  {
    try {
      std_map_Sl_std_string_Sc_bool_Sg__set(arg1,(std::string const &)*arg2,(bool const &)*arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      try {
        std_map_Sl_std_string_Sc_bool_Sg__del(arg1,(std::string const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_StringBoolMap_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_bool_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1StringBoolMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,bool > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BvhData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::bvh_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::bvh_data *)new mae::fl::bvh_data();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::bvh_data > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_data >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BvhData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg1 ;
  double arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp1 ;
  mae::fl::bvh_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (mae::fl::bvh_data *)new mae::fl::bvh_data(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::bvh_data > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_data >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1BvhData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_data *arg1 = (mae::fl::bvh_data *) 0 ;
  std::shared_ptr< mae::fl::bvh_data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_data > **)&jarg1;
  arg1 = (mae::fl::bvh_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BvhData_1setSkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::bvh_data *arg1 = (mae::fl::bvh_data *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::bvh_data > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_data > **)&jarg1;
  arg1 = (mae::fl::bvh_data *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_skeleton_data(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhData_1getSkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::bvh_data *arg1 = (mae::fl::bvh_data *) 0 ;
  std::shared_ptr< mae::fl::bvh_data const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_data > **)&jarg1;
  arg1 = (mae::fl::bvh_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::bvh_data const *)arg1)->get_skeleton_data();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = new std::vector< std::shared_ptr< mae::general_skeleton > >((const std::vector< std::shared_ptr< mae::general_skeleton > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BvhData_1setFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::bvh_data *arg1 = (mae::fl::bvh_data *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::bvh_data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_data > **)&jarg1;
  arg1 = (mae::fl::bvh_data *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_framerate(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_BvhData_1getFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::bvh_data *arg1 = (mae::fl::bvh_data *) 0 ;
  std::shared_ptr< mae::fl::bvh_data const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::bvh_data > **)&jarg1;
  arg1 = (mae::fl::bvh_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::bvh_data const *)arg1)->get_framerate();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralSkeletonVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1GeneralSkeletonVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg1 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::shared_ptr< mae::general_skeleton > > *)new std::vector< std::shared_ptr< mae::general_skeleton > >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< mae::general_skeleton > >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::shared_ptr< mae::general_skeleton > > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg2 : &tempnull2; 
  {
    try {
      (arg1)->push_back((std::vector< std::shared_ptr< mae::general_skeleton > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jresult = *result ? new std::shared_ptr< mae::general_skeleton >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_GeneralSkeletonVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< mae::general_skeleton > >::value_type **)&jarg3 : &tempnull3; 
  {
    try {
      try {
        std_vector_Sl_std_shared_ptr_Sl_mae_general_skeleton_Sg__Sg__set(arg1,arg2,(std::shared_ptr< mae::general_skeleton > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1GeneralSkeletonVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< mae::general_skeleton > > *arg1 = (std::vector< std::shared_ptr< mae::general_skeleton > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BvhController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::bvh_controller *)new mae::fl::bvh_controller();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::bvh_controller > **)&jresult = result ? new std::shared_ptr<  mae::fl::bvh_controller >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1BvhController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhController_1bvhStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (arg1)->bvh_str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhController_1bvhStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  double arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (arg1)->bvh_str(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BvhController_1bvhStr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (arg1)->bvh_str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BvhController_1printBvhFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->print_bvh_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_BvhController_1printBvhFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->print_bvh_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhController_1readBvhStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::shared_ptr< mae::fl::bvh_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (arg1)->read_bvh_str(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::bvh_data > **)&jresult = result ? new std::shared_ptr< mae::fl::bvh_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BvhController_1readBvhFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::bvh_controller *arg1 = (mae::fl::bvh_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::bvh_spec > arg3 ;
  std::shared_ptr< mae::fl::bvh_controller > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::bvh_spec > *argp3 ;
  std::shared_ptr< mae::fl::bvh_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::bvh_controller > **)&jarg1;
  arg1 = (mae::fl::bvh_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::bvh_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (arg1)->read_bvh_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::bvh_data > **)&jresult = result ? new std::shared_ptr< mae::fl::bvh_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1MsrSpec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  std::map< unsigned int,int > arg1 ;
  std::shared_ptr< mae::hierarchy > arg2 ;
  std::size_t arg3 ;
  std::size_t arg4 ;
  std::map< unsigned int,int > *argp1 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  mae::fl::msr_spec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::map< unsigned int,int > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< unsigned int,int >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  arg3 = (std::size_t)jarg3; 
  arg4 = (std::size_t)jarg4; 
  {
    try {
      result = (mae::fl::msr_spec *)new mae::fl::msr_spec(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::msr_spec > **)&jresult = result ? new std::shared_ptr<  mae::fl::msr_spec >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1MsrSpec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::msr_spec *arg1 = (mae::fl::msr_spec *) 0 ;
  std::shared_ptr< mae::fl::msr_spec > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::msr_spec > **)&jarg1;
  arg1 = (mae::fl::msr_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1getIdMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::msr_spec *arg1 = (mae::fl::msr_spec *) 0 ;
  std::shared_ptr< mae::fl::msr_spec const > *smartarg1 = 0 ;
  std::map< unsigned int,int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_spec > **)&jarg1;
  arg1 = (mae::fl::msr_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::msr_spec const *)arg1)->get_id_map();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< unsigned int,int > **)&jresult = new std::map< unsigned int,int >((const std::map< unsigned int,int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1getHierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::msr_spec *arg1 = (mae::fl::msr_spec *) 0 ;
  std::shared_ptr< mae::fl::msr_spec const > *smartarg1 = 0 ;
  std::shared_ptr< mae::hierarchy > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_spec > **)&jarg1;
  arg1 = (mae::fl::msr_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::msr_spec const *)arg1)->get_hierarchy();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::hierarchy > **)&jresult = result ? new std::shared_ptr< mae::hierarchy >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1getLinesPerJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::msr_spec *arg1 = (mae::fl::msr_spec *) 0 ;
  std::shared_ptr< mae::fl::msr_spec const > *smartarg1 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_spec > **)&jarg1;
  arg1 = (mae::fl::msr_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::msr_spec const *)arg1)->get_lines_per_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1getPosLineIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::msr_spec *arg1 = (mae::fl::msr_spec *) 0 ;
  std::shared_ptr< mae::fl::msr_spec const > *smartarg1 = 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_spec > **)&jarg1;
  arg1 = (mae::fl::msr_spec *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::msr_spec const *)arg1)->get_pos_line_index();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1defaultSpec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::msr_spec > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::msr_spec::default_spec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_spec > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_spec >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrSpec_1defaultMsrSpec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::msr_spec > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::msr_spec::default_msr_spec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_spec > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_spec >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1UIntIntMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< unsigned int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::map< unsigned int,int > *)new std::map< unsigned int,int >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< unsigned int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1UIntIntMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned int,int > *arg1 = 0 ;
  std::map< unsigned int,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< unsigned int,int > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (std::map< unsigned int,int > *)new std::map< unsigned int,int >((std::map< unsigned int,int > const &)*arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< unsigned int,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  {
    try {
      result = (unsigned int)((std::map< unsigned int,int > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  {
    try {
      result = (bool)((std::map< unsigned int,int > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        result = (int *) &std_map_Sl_unsigned_SS_int_Sc_int_Sg__get(arg1,(unsigned int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  unsigned int *arg2 = 0 ;
  int *arg3 = 0 ;
  unsigned int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      std_map_Sl_unsigned_SS_int_Sc_int_Sg__set(arg1,(unsigned int const &)*arg2,(int const &)*arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      try {
        std_map_Sl_unsigned_SS_int_Sc_int_Sg__del(arg1,(unsigned int const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_UIntIntMap_1hasKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_map_Sl_unsigned_SS_int_Sc_int_Sg__has_key(arg1,(unsigned int const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1UIntIntMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< unsigned int,int > *arg1 = (std::map< unsigned int,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< unsigned int,int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1MsrData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::msr_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::msr_data *)new mae::fl::msr_data();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr<  mae::fl::msr_data >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1MsrData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg1 ;
  double arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp1 ;
  mae::fl::msr_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (mae::fl::msr_data *)new mae::fl::msr_data(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr<  mae::fl::msr_data >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1MsrData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg1 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp1 ;
  mae::fl::msr_data *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (mae::fl::msr_data *)new mae::fl::msr_data(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr<  mae::fl::msr_data >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1MsrData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::msr_data *arg1 = (mae::fl::msr_data *) 0 ;
  std::shared_ptr< mae::fl::msr_data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::msr_data > **)&jarg1;
  arg1 = (mae::fl::msr_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_MsrData_1setSkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  mae::fl::msr_data *arg1 = (mae::fl::msr_data *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::msr_data > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::msr_data > **)&jarg1;
  arg1 = (mae::fl::msr_data *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->set_skeleton_data(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrData_1getSkeletonData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::msr_data *arg1 = (mae::fl::msr_data *) 0 ;
  std::shared_ptr< mae::fl::msr_data const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data > **)&jarg1;
  arg1 = (mae::fl::msr_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::msr_data const *)arg1)->get_skeleton_data();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jresult = new std::vector< std::shared_ptr< mae::general_skeleton > >((const std::vector< std::shared_ptr< mae::general_skeleton > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_MsrData_1setFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::fl::msr_data *arg1 = (mae::fl::msr_data *) 0 ;
  double arg2 ;
  std::shared_ptr< mae::fl::msr_data > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::msr_data > **)&jarg1;
  arg1 = (mae::fl::msr_data *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_framerate(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_MsrData_1getFramerate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::msr_data *arg1 = (mae::fl::msr_data *) 0 ;
  std::shared_ptr< mae::fl::msr_data const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data > **)&jarg1;
  arg1 = (mae::fl::msr_data *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::msr_data const *)arg1)->get_framerate();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1MsrDataController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::msr_data_controller *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::msr_data_controller *)new mae::fl::msr_data_controller();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::msr_data_controller > **)&jresult = result ? new std::shared_ptr<  mae::fl::msr_data_controller >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1MsrDataController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::shared_ptr< mae::fl::msr_data_controller > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1readMsrFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::msr_spec > arg3 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::msr_spec > *argp3 ;
  std::shared_ptr< mae::fl::msr_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::msr_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->read_msr_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1readMsrFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::msr_spec > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::msr_spec > *argp3 ;
  std::shared_ptr< mae::fl::msr_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::msr_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->read_msr_file(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1readMsrStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::msr_spec > arg3 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::msr_spec > *argp3 ;
  std::shared_ptr< mae::fl::msr_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::msr_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->read_msr_str(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1readMsrStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::msr_spec > arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::msr_spec > *argp3 ;
  std::shared_ptr< mae::fl::msr_data > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::fl::msr_spec > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->read_msr_str(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::msr_data > **)&jresult = result ? new std::shared_ptr< mae::fl::msr_data >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1msrStr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg2 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->msr_str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1msrStr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::shared_ptr< mae::general_skeleton > arg2 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::general_skeleton > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = ((mae::fl::msr_data_controller const *)arg1)->msr_str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1printMsrFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > arg3 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< mae::general_skeleton > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::vector< std::shared_ptr< mae::general_skeleton > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< mae::general_skeleton > >");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      ((mae::fl::msr_data_controller const *)arg1)->print_msr_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_MsrDataController_1printMsrFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  mae::fl::msr_data_controller *arg1 = (mae::fl::msr_data_controller *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::general_skeleton > arg3 ;
  std::shared_ptr< mae::fl::msr_data_controller const > *smartarg1 = 0 ;
  std::shared_ptr< mae::general_skeleton > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::msr_data_controller > **)&jarg1;
  arg1 = (mae::fl::msr_data_controller *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::shared_ptr< mae::general_skeleton > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      ((mae::fl::msr_data_controller const *)arg1)->print_msr_file(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1LabanSequenceReader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::laban_sequence_reader *)new mae::fl::laban::laban_sequence_reader();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::laban_sequence_reader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1LabanSequenceReader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceReader_1readSequenceFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->read_sequence_file(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceReader_1readSequenceStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::laban_sequence_reader *arg1 = (mae::fl::laban::laban_sequence_reader *) 0 ;
  std::string arg2 ;
  std::shared_ptr< mae::fl::laban::laban_sequence > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::fl::laban::laban_sequence_reader **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->read_sequence_str(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::laban_sequence > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::laban_sequence >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ISymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ISymbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::i_symbol const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ISymbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_symbol *arg1 = (mae::fl::laban::mv::i_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::i_symbol const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Movement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp7 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  (void)jarg7_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  argp7 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  {
    try {
      result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Movement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  bool arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Movement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp5 ;
  mae::fl::laban::movement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (mae::fl::laban::movement *)new mae::fl::laban::movement(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::movement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Movement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Movement_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::movement const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1getMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::movement const *)arg1)->get_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Movement_1getBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::movement const *)arg1)->get_beat();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Movement_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::movement const *)arg1)->get_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1getPreSign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->get_pre_sign();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Movement_1getHold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::movement const *)arg1)->get_hold();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1getSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->get_symbol();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Movement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::movement const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Movement_1symbolEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::movement const *)arg1)->symbol_equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Movement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Movement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Movement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Movement_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->recreate(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Movement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::movement *arg1 = (mae::fl::laban::movement *) 0 ;
  std::shared_ptr< mae::fl::laban::movement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::movement > **)&jarg1;
  arg1 = (mae::fl::laban::movement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::movement const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1castToMovement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg1 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp1 ;
  std::shared_ptr< mae::fl::laban::movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_movement_cast_to_movement(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EPathTypeC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  {
    try {
      result = mae::fl::laban::e_path_type_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EPathTypeC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::e_path_type_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = new std::vector< mae::fl::laban::e_path_type >((const std::vector< mae::fl::laban::e_path_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EPathTypeC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::e_path_type)mae::fl::laban::e_path_type_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EPathTypeC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::e_path_type_c *)new mae::fl::laban::e_path_type_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::e_path_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EPathTypeC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_path_type_c *arg1 = (mae::fl::laban::e_path_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_path_type_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EPathTypeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::e_path_type > *)new std::vector< mae::fl::laban::e_path_type >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EPathTypeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type arg1 ;
  std::vector< mae::fl::laban::e_path_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_path_type >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::e_path_type > *)new std::vector< mae::fl::laban::e_path_type >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_path_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_path_type > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_path_type > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_path_type >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::e_path_type > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_path_type >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::e_path_type >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::e_path_type >::value_type *) &std_vector_Sl_mae_fl_laban_e_path_type_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EPathTypeVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_path_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_path_type >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_e_path_type_Sg__set(arg1,arg2,(enum mae::fl::laban::e_path_type const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EPathTypeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_path_type > *arg1 = (std::vector< mae::fl::laban::e_path_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_path_type > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Path(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  mae::fl::laban::e_path_type arg1 ;
  unsigned int arg2 ;
  double arg3 ;
  double arg4 ;
  mae::fl::laban::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_path_type)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (mae::fl::laban::path *)new mae::fl::laban::path(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::path > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::path >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Path_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  mae::fl::laban::e_path_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::e_path_type)((mae::fl::laban::path const *)arg1)->get_type();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Path_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::path const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Path_1getMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::path const *)arg1)->get_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Path_1getBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::path const *)arg1)->get_beat();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_Path_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::path const *)arg1)->get_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Path_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::path const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Path_1symbolEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::path const *)arg1)->symbol_equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Path_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Path_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Path_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Path_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Path_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->recreate(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Path_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::path *arg1 = (mae::fl::laban::path *) 0 ;
  std::shared_ptr< mae::fl::laban::path const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::path > **)&jarg1;
  arg1 = (mae::fl::laban::path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::path const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Path_1castToPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg1 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp1 ;
  std::shared_ptr< mae::fl::laban::path > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_path_cast_to_path(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::path > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::path >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  {
    try {
      result = mae::fl::laban::e_relationship_type_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::e_relationship_type_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = new std::vector< mae::fl::laban::e_relationship_type >((const std::vector< mae::fl::laban::e_relationship_type > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::e_relationship_type)mae::fl::laban::e_relationship_type_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ERelationshipTypeC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::e_relationship_type_c *)new mae::fl::laban::e_relationship_type_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::e_relationship_type_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ERelationshipTypeC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::e_relationship_type_c *arg1 = (mae::fl::laban::e_relationship_type_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::e_relationship_type_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ERelationshipTypeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::e_relationship_type > *)new std::vector< mae::fl::laban::e_relationship_type >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ERelationshipTypeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type arg1 ;
  std::vector< mae::fl::laban::e_relationship_type > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::e_relationship_type >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::e_relationship_type > *)new std::vector< mae::fl::laban::e_relationship_type >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::e_relationship_type > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::e_relationship_type >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::e_relationship_type > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::e_relationship_type >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type *) &std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ERelationshipTypeVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::e_relationship_type >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::e_relationship_type >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_e_relationship_type_Sg__set(arg1,arg2,(enum mae::fl::laban::e_relationship_type const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ERelationshipTypeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::e_relationship_type > *arg1 = (std::vector< mae::fl::laban::e_relationship_type > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::e_relationship_type > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IDynamicsSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IDynamicsSign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDynamicsSign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDynamicsSign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDynamicsSign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_dynamics_sign *arg1 = (mae::fl::laban::mv::i_dynamics_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_dynamics_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_dynamics_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::i_dynamics_sign const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RelationshipEndpoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg4 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp4 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  {
    try {
      result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RelationshipEndpoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp3 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  argp3 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RelationshipEndpoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  mae::fl::laban::mv::relationship_endpoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (mae::fl::laban::mv::relationship_endpoint *)new mae::fl::laban::mv::relationship_endpoint(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1RelationshipEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1getPreSign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_pre_sign();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1getDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_dynamics();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1getActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->get_active();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::map< int,int > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = ((mae::fl::laban::mv::relationship_endpoint const *)arg1)->recreate(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipEndpoint_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::relationship_endpoint *arg1 = (mae::fl::laban::mv::relationship_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::relationship_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::mv::relationship_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::relationship_endpoint const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RelationshipBow(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4, jlong jarg5, jdouble jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  mae::fl::laban::e_relationship_type arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > arg8 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp7 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > *argp8 ;
  mae::fl::laban::relationship_bow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = (mae::fl::laban::e_relationship_type)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  argp7 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg7; 
  if (argp7) arg7 = *argp7; 
  argp8 = *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jarg8; 
  if (argp8) arg8 = *argp8; 
  {
    try {
      result = (mae::fl::laban::relationship_bow *)new mae::fl::laban::relationship_bow(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::relationship_bow >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1RelationshipBow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  mae::fl::laban::e_relationship_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::e_relationship_type)((mae::fl::laban::relationship_bow const *)arg1)->get_type();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getGrasping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_grasping();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getPassing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_passing();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getHold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->get_hold();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getLeftEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->get_left_endpoint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getRightEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->get_right_endpoint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::relationship_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::relationship_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::relationship_bow const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::relationship_bow const *)arg1)->get_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_beat();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::relationship_bow const *)arg1)->get_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1symbolEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::relationship_bow const *)arg1)->symbol_equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->recreate(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::relationship_bow *arg1 = (mae::fl::laban::relationship_bow *) 0 ;
  std::shared_ptr< mae::fl::laban::relationship_bow const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::relationship_bow > **)&jarg1;
  arg1 = (mae::fl::laban::relationship_bow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::relationship_bow const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1castToRelationshipBow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg1 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp1 ;
  std::shared_ptr< mae::fl::laban::relationship_bow > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_relationship_bow_cast_to_relationship_bow(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::relationship_bow > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::relationship_bow >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IDegreeSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::i_degree_sign const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IDegreeSign_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::i_degree_sign *arg1 = (mae::fl::laban::mv::i_degree_sign *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::i_degree_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::i_degree_sign *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::i_degree_sign const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ELevelC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_level_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELevelC_1lvl(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::lvl(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELevelC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_level_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = new std::vector< mae::fl::laban::mv::e_level >((const std::vector< mae::fl::laban::mv::e_level > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELevelC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_level)mae::fl::laban::mv::e_level_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELevelC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_level_c *)new mae::fl::laban::mv::e_level_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_level_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELevelC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_level_c *arg1 = (mae::fl::laban::mv::e_level_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_level_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELevelVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_level > *)new std::vector< mae::fl::laban::mv::e_level >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELevelVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_level > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_level >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_level > *)new std::vector< mae::fl::laban::mv::e_level >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_level > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_level >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_level > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_level >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_level >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_level >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_level_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELevelVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_level >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_level >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_level_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_level const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELevelVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_level > *arg1 = (std::vector< mae::fl::laban::mv::e_level > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_level > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_M_1PI_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.14159265358979323846);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Pin(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  int arg2 ;
  mae::fl::laban::mv::pin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (mae::fl::laban::mv::pin *)new mae::fl::laban::mv::pin(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::pin >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Pin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Pin_1getLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_level)((mae::fl::laban::mv::pin const *)arg1)->get_level();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_Pin_1getHorizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::mv::pin const *)arg1)->get_horizontal();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Pin_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::pin const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Pin_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::pin *arg1 = (mae::fl::laban::mv::pin *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::pin > **)&jarg1;
  arg1 = (mae::fl::laban::mv::pin *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::pin const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Pin_1castToPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_pin_cast_to_pin(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1RoomDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  double arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::room_direction *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (unsigned int)jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::laban::room_direction *)new mae::fl::laban::room_direction(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::room_direction >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1RoomDirection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1getColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((mae::fl::laban::room_direction const *)arg1)->get_column();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1getMeasure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::room_direction const *)arg1)->get_measure();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1getBeat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::room_direction const *)arg1)->get_beat();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((mae::fl::laban::room_direction const *)arg1)->get_duration();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->get_direction();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::room_direction const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1symbolEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::room_direction const *)arg1)->symbol_equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1svg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1recreate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::map< int,int > arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::map< int,int > *argp2 ;
  std::shared_ptr< mae::fl::laban::i_movement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::map< int,int > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< int,int >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->recreate(arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::i_movement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::i_movement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::room_direction *arg1 = (mae::fl::laban::room_direction *) 0 ;
  std::shared_ptr< mae::fl::laban::room_direction const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::room_direction > **)&jarg1;
  arg1 = (mae::fl::laban::room_direction *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::room_direction const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1castToRoomDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::i_movement > arg1 ;
  std::shared_ptr< mae::fl::laban::i_movement > *argp1 ;
  std::shared_ptr< mae::fl::laban::room_direction > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::i_movement > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_room_direction_cast_to_room_direction(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::room_direction > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::room_direction >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1AccentSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  mae::fl::laban::mv::accent_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::accent_sign *)new mae::fl::laban::mv::accent_sign(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::accent_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1AccentSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AccentSign_1getAccent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::mv::accent_sign const *)arg1)->get_accent();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_AccentSign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::accent_sign const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AccentSign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AccentSign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AccentSign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::accent_sign *arg1 = (mae::fl::laban::mv::accent_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::accent_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::accent_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::accent_sign const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AccentSign_1castToAccentSign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::accent_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_accent_sign_cast_to_accent_sign(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::accent_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::accent_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EDynamicC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_dynamic_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDynamicC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_dynamic_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = new std::vector< mae::fl::laban::mv::e_dynamic >((const std::vector< mae::fl::laban::mv::e_dynamic > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDynamicC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_dynamic)mae::fl::laban::mv::e_dynamic_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDynamicC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_dynamic_c *)new mae::fl::laban::mv::e_dynamic_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_dynamic_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDynamicC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_dynamic_c *arg1 = (mae::fl::laban::mv::e_dynamic_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_dynamic_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDynamicVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_dynamic > *)new std::vector< mae::fl::laban::mv::e_dynamic >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDynamicVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_dynamic > *)new std::vector< mae::fl::laban::mv::e_dynamic >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_dynamic > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDynamicVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_dynamic >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_dynamic_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_dynamic const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDynamicVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_dynamic > *arg1 = (std::vector< mae::fl::laban::mv::e_dynamic > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_dynamic > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DynamicSign(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_dynamic arg1 ;
  mae::fl::laban::mv::dynamic_sign *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_dynamic)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::dynamic_sign *)new mae::fl::laban::mv::dynamic_sign(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::dynamic_sign >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1DynamicSign(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1getDynamic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_dynamic result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_dynamic)((mae::fl::laban::mv::dynamic_sign const *)arg1)->get_dynamic();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::dynamic_sign const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::dynamic_sign *arg1 = (mae::fl::laban::mv::dynamic_sign *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::dynamic_sign > **)&jarg1;
  arg1 = (mae::fl::laban::mv::dynamic_sign *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::dynamic_sign const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1castToDynamicSign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::dynamic_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_dynamic_sign_cast_to_dynamic_sign(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::dynamic_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::dynamic_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ECancelC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_cancel_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ECancelC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_cancel_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = new std::vector< mae::fl::laban::mv::e_cancel >((const std::vector< mae::fl::laban::mv::e_cancel > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ECancelC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_cancel)mae::fl::laban::mv::e_cancel_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ECancelC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_cancel_c *)new mae::fl::laban::mv::e_cancel_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_cancel_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ECancelC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_cancel_c *arg1 = (mae::fl::laban::mv::e_cancel_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_cancel_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ECancelVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_cancel > *)new std::vector< mae::fl::laban::mv::e_cancel >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ECancelVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_cancel > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_cancel >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_cancel > *)new std::vector< mae::fl::laban::mv::e_cancel >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_cancel > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_cancel >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_cancel > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_cancel >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ECancelVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_cancel >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_cancel >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_cancel_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_cancel const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ECancelVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_cancel > *arg1 = (std::vector< mae::fl::laban::mv::e_cancel > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_cancel > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1CancellationSymbol(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_cancel arg1 ;
  mae::fl::laban::mv::cancellation_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_cancel)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::cancellation_symbol *)new mae::fl::laban::mv::cancellation_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1CancellationSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1getCancel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_cancel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_cancel)((mae::fl::laban::mv::cancellation_symbol const *)arg1)->get_cancel();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::cancellation_symbol const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::cancellation_symbol *arg1 = (mae::fl::laban::mv::cancellation_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::cancellation_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::cancellation_symbol const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1castToCancellationSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_cancellation_symbol_cast_to_cancellation_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::cancellation_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ESpaceC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_space_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_space_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = new std::vector< mae::fl::laban::mv::e_space >((const std::vector< mae::fl::laban::mv::e_space > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESpaceC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_space)mae::fl::laban::mv::e_space_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_space_c *)new mae::fl::laban::mv::e_space_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_space_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESpaceC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_c *arg1 = (mae::fl::laban::mv::e_space_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_space > *)new std::vector< mae::fl::laban::mv::e_space >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_space > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_space >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_space > *)new std::vector< mae::fl::laban::mv::e_space >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_space >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_space > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_space >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_space >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_space >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_space_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_space >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_space_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_space const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESpaceVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_space > *arg1 = (std::vector< mae::fl::laban::mv::e_space > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_space_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space_direction)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_space_direction_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_space_direction_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_space_direction >((const std::vector< mae::fl::laban::mv::e_space_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_space_direction)mae::fl::laban::mv::e_space_direction_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceDirectionC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_space_direction_c *)new mae::fl::laban::mv::e_space_direction_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_space_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESpaceDirectionC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_space_direction_c *arg1 = (mae::fl::laban::mv::e_space_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_space_direction_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceDirectionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_space_direction > *)new std::vector< mae::fl::laban::mv::e_space_direction >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESpaceDirectionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_space_direction > *)new std::vector< mae::fl::laban::mv::e_space_direction >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_space_direction > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESpaceDirectionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_space_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_space_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_space_direction const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESpaceDirectionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_space_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_space_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_space_direction > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1SpaceMeasurement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::e_space_direction arg3 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (mae::fl::laban::mv::e_space_direction)jarg3; 
  {
    try {
      result = (mae::fl::laban::mv::space_measurement *)new mae::fl::laban::mv::space_measurement(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1SpaceMeasurement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_space arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::mv::space_measurement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_space)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::mv::space_measurement *)new mae::fl::laban::mv::space_measurement(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::space_measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1SpaceMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_space)((mae::fl::laban::mv::space_measurement const *)arg1)->get_type();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::mv::space_measurement const *)arg1)->get_degree();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_space_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_space_direction)((mae::fl::laban::mv::space_measurement const *)arg1)->get_direction();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::space_measurement const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1xml_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::space_measurement *arg1 = (mae::fl::laban::mv::space_measurement *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::space_measurement > **)&jarg1;
  arg1 = (mae::fl::laban::mv::space_measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::space_measurement const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1castToSpaceMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_space_measurement_cast_to_space_measurement(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::space_measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EDirectionC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_direction)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_direction_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDirectionC_1dir(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::fl::e_fl_direction arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::e_fl_direction)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::dir(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDirectionC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_direction_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_direction >((const std::vector< mae::fl::laban::mv::e_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDirectionC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_direction)mae::fl::laban::mv::e_direction_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDirectionC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_direction_c *)new mae::fl::laban::mv::e_direction_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDirectionC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_direction_c *arg1 = (mae::fl::laban::mv::e_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_direction_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDirectionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_direction > *)new std::vector< mae::fl::laban::mv::e_direction >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDirectionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_direction >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_direction > *)new std::vector< mae::fl::laban::mv::e_direction >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_direction >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_direction > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_direction >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDirectionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_direction const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDirectionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_direction > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EContactHookC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_contact_hook)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_contact_hook_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EContactHookC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_contact_hook_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = new std::vector< mae::fl::laban::mv::e_contact_hook >((const std::vector< mae::fl::laban::mv::e_contact_hook > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EContactHookC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_contact_hook)mae::fl::laban::mv::e_contact_hook_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EContactHookC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_contact_hook_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_contact_hook_c *)new mae::fl::laban::mv::e_contact_hook_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_contact_hook_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EContactHookC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_contact_hook_c *arg1 = (mae::fl::laban::mv::e_contact_hook_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_contact_hook_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EContactHookVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_contact_hook > *)new std::vector< mae::fl::laban::mv::e_contact_hook >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EContactHookVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_contact_hook > *)new std::vector< mae::fl::laban::mv::e_contact_hook >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_contact_hook > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EContactHookVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_contact_hook >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_contact_hook_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_contact_hook const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EContactHookVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_contact_hook > *arg1 = (std::vector< mae::fl::laban::mv::e_contact_hook > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_contact_hook > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jint jarg7) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  mae::fl::laban::mv::e_contact_hook arg7 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  arg7 = (mae::fl::laban::mv::e_contact_hook)jarg7; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > arg6 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp6 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  argp6 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg6; 
  if (argp6) arg6 = *argp6; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg5 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp5 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  argp5 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg5; 
  if (argp5) arg5 = *argp5; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4,arg5);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg4 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp4 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg4; 
  if (argp4) arg4 = *argp4; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3,arg4);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp3 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DirectionSymbol_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_level arg1 ;
  mae::fl::laban::mv::e_direction arg2 ;
  mae::fl::laban::mv::direction_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_level)jarg1; 
  arg2 = (mae::fl::laban::mv::e_direction)jarg2; 
  {
    try {
      result = (mae::fl::laban::mv::direction_symbol *)new mae::fl::laban::mv::direction_symbol(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::direction_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1DirectionSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getVertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_level result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_level)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_vertical();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getHorizontal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_direction)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_horizontal();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getModificationPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_modification_pin();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getRelationshipPin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_relationship_pin();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_dynamics();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getSpaceMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::space_measurement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->get_space_measurement();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::space_measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1getContactHook(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_contact_hook result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_contact_hook)((mae::fl::laban::mv::direction_symbol const *)arg1)->get_contact_hook();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::direction_symbol const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::direction_symbol *arg1 = (mae::fl::laban::mv::direction_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::direction_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::direction_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::direction_symbol const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1castToDirectionSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::direction_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_direction_symbol_cast_to_direction_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::direction_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::direction_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  {
    try {
      result = mae::fl::laban::mv::e_turn_direction_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::mv::e_turn_direction_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = new std::vector< mae::fl::laban::mv::e_turn_direction >((const std::vector< mae::fl::laban::mv::e_turn_direction > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::mv::e_turn_direction)mae::fl::laban::mv::e_turn_direction_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETurnDirectionC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::mv::e_turn_direction_c *)new mae::fl::laban::mv::e_turn_direction_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::mv::e_turn_direction_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ETurnDirectionC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::e_turn_direction_c *arg1 = (mae::fl::laban::mv::e_turn_direction_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::mv::e_turn_direction_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETurnDirectionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_turn_direction > *)new std::vector< mae::fl::laban::mv::e_turn_direction >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ETurnDirectionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type arg1 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::mv::e_turn_direction > *)new std::vector< mae::fl::laban::mv::e_turn_direction >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::mv::e_turn_direction > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *) &std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ETurnDirectionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::mv::e_turn_direction >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_mv_e_turn_direction_Sg__set(arg1,arg2,(enum mae::fl::laban::mv::e_turn_direction const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ETurnDirectionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::mv::e_turn_direction > *arg1 = (std::vector< mae::fl::laban::mv::e_turn_direction > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::mv::e_turn_direction > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1TurnSymbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > *argp3 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1TurnSymbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp2 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1TurnSymbol_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::e_turn_direction arg1 ;
  mae::fl::laban::mv::turn_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::mv::e_turn_direction)jarg1; 
  {
    try {
      result = (mae::fl::laban::mv::turn_symbol *)new mae::fl::laban::mv::turn_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::turn_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1TurnSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1getDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  mae::fl::laban::mv::e_turn_direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::mv::e_turn_direction)((mae::fl::laban::mv::turn_symbol const *)arg1)->get_direction();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1getDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->get_dynamics();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1getDegree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_degree_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->get_degree();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::turn_symbol const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::turn_symbol *arg1 = (mae::fl::laban::mv::turn_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::turn_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::turn_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::turn_symbol const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1castToTurnSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::turn_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_turn_symbol_cast_to_turn_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::turn_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::turn_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1VibrationSymbol_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > arg3 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > *argp3 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jarg3; 
  if (argp3) arg3 = *argp3; 
  {
    try {
      result = (mae::fl::laban::mv::vibration_symbol *)new mae::fl::laban::mv::vibration_symbol(arg1,arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1VibrationSymbol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::pin > *argp2 ;
  mae::fl::laban::mv::vibration_symbol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::mv::vibration_symbol *)new mae::fl::laban::mv::vibration_symbol(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::mv::vibration_symbol >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1VibrationSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1getDynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_dynamics();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1getDisplacement1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_displacement1();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1getDisplacement2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::pin > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->get_displacement2();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::pin >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::mv::vibration_symbol const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::mv::vibration_symbol *arg1 = (mae::fl::laban::mv::vibration_symbol *) 0 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::mv::vibration_symbol > **)&jarg1;
  arg1 = (mae::fl::laban::mv::vibration_symbol *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::mv::vibration_symbol const *)arg1)->str();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1castToVibrationSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > arg1 ;
  std::shared_ptr< mae::fl::laban::mv::i_symbol > *argp1 ;
  std::shared_ptr< mae::fl::laban::mv::vibration_symbol > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_mv_vibration_symbol_cast_to_vibration_symbol(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::mv::vibration_symbol > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::mv::vibration_symbol >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::i_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::i_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::i_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IPart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::i_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IPart_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_part *arg1 = (mae::fl::laban::ps::i_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1IEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1getFixedEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::i_endpoint const *)arg1)->get_fixed_end();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_endpoint *arg1 = (mae::fl::laban::ps::i_endpoint *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_endpoint > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_endpoint *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_endpoint const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EAreaC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_area_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EAreaC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_area_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = new std::vector< mae::fl::laban::ps::e_area >((const std::vector< mae::fl::laban::ps::e_area > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EAreaC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_area)mae::fl::laban::ps::e_area_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EAreaC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_area_c *)new mae::fl::laban::ps::e_area_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_area_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EAreaC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_area_c *arg1 = (mae::fl::laban::ps::e_area_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_area_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EAreaVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_area > *)new std::vector< mae::fl::laban::ps::e_area >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EAreaVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_area > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_area >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_area > *)new std::vector< mae::fl::laban::ps::e_area >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_area > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_area >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_area > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_area >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_area >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_area >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_area_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EAreaVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_area >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_area >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_area_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_area const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EAreaVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_area > *arg1 = (std::vector< mae::fl::laban::ps::e_area > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_area > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1AreaPart(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_area arg1 ;
  mae::fl::laban::ps::area_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_area)jarg1; 
  {
    try {
      result = (mae::fl::laban::ps::area_part *)new mae::fl::laban::ps::area_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::area_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1AreaPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_AreaPart_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_area result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_area)((mae::fl::laban::ps::area_part const *)arg1)->get_area();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AreaPart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AreaPart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AreaPart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AreaPart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_AreaPart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AreaPart_1getFixedEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::area_part const *)arg1)->get_fixed_end();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_AreaPart_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_AreaPart_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::area_part *arg1 = (mae::fl::laban::ps::area_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::area_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::area_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::area_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::area_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AreaPart_1castToAreaPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::area_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_area_part_cast_to_area_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::area_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::area_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ESideC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_side_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESideC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_side_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_side >((const std::vector< mae::fl::laban::ps::e_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESideC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_side)mae::fl::laban::ps::e_side_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESideC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_side_c *)new mae::fl::laban::ps::e_side_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESideC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_side_c *arg1 = (mae::fl::laban::ps::e_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_side_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESideVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_side > *)new std::vector< mae::fl::laban::ps::e_side >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ESideVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_side >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_side > *)new std::vector< mae::fl::laban::ps::e_side >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESideVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ESideVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESideVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_side >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ESideVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_side > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESideVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESideVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_side >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_side >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ESideVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_side >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_side_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ESideVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_side >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_side >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_side_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_side const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ESideVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_side > *arg1 = (std::vector< mae::fl::laban::ps::e_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_side > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1BodyPart(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  mae::fl::laban::ps::body_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::ps::body_part *)new mae::fl::laban::ps::body_part(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::body_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1BodyPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_BodyPart_1getSide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_side)((mae::fl::laban::ps::body_part const *)arg1)->get_side();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BodyPart_1getPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->get_part();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BodyPart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BodyPart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BodyPart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BodyPart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_BodyPart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::body_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_BodyPart_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::body_part *arg1 = (mae::fl::laban::ps::body_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::body_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::body_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::body_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::body_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BodyPart_1castToBodyPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::body_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_body_part_cast_to_body_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::body_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::body_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ILimb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ILimb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ILimb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ILimb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::i_limb const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ILimb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ILimb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::i_limb *arg1 = (mae::fl::laban::ps::i_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::i_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::i_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::i_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1CustomLimb_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::ps::custom_limb *)new mae::fl::laban::ps::custom_limb(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1CustomLimb_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1 ;
  mae::fl::laban::ps::custom_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = (mae::fl::laban::ps::custom_limb *)new mae::fl::laban::ps::custom_limb(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::custom_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1CustomLimb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1getFixedEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_fixed_end();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1getExtremity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->get_extremity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::custom_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::custom_limb *arg1 = (mae::fl::laban::ps::custom_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::custom_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::custom_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::custom_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1castToCustomLimb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::custom_limb > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_custom_limb_cast_to_custom_limb(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::custom_limb > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::custom_limb >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ELimbC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_limb_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_limb_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb >((const std::vector< mae::fl::laban::ps::e_limb > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELimbC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_limb)mae::fl::laban::ps::e_limb_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_limb_c *)new mae::fl::laban::ps::e_limb_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_limb_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELimbC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_c *arg1 = (mae::fl::laban::ps::e_limb_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_limb > *)new std::vector< mae::fl::laban::ps::e_limb >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_limb > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_limb >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_limb > *)new std::vector< mae::fl::laban::ps::e_limb >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_limb >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_limb > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_limb >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_limb >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_limb_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_limb const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELimbVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_limb > *arg1 = (std::vector< mae::fl::laban::ps::e_limb > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DefaultLimb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb arg1 ;
  mae::fl::laban::ps::default_limb *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb)jarg1; 
  {
    try {
      result = (mae::fl::laban::ps::default_limb *)new mae::fl::laban::ps::default_limb(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::default_limb >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1DefaultLimb(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1getLimb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_limb)((mae::fl::laban::ps::default_limb const *)arg1)->get_limb();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::default_limb const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::default_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::default_limb const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::default_limb *arg1 = (mae::fl::laban::ps::default_limb *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::default_limb > **)&jarg1;
  arg1 = (mae::fl::laban::ps::default_limb *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::default_limb const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1castToDefaultLimb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::default_limb > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_default_limb_cast_to_default_limb(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::default_limb > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::default_limb >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EDigitC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_digit_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDigitC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_digit_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = new std::vector< mae::fl::laban::ps::e_digit >((const std::vector< mae::fl::laban::ps::e_digit > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDigitC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_digit)mae::fl::laban::ps::e_digit_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDigitC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_digit_c *)new mae::fl::laban::ps::e_digit_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_digit_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDigitC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_digit_c *arg1 = (mae::fl::laban::ps::e_digit_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_digit_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDigitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_digit > *)new std::vector< mae::fl::laban::ps::e_digit >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EDigitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_digit > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_digit >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_digit > *)new std::vector< mae::fl::laban::ps::e_digit >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_digit > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_digit >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_digit > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_digit >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EDigitVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_digit >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_digit >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_digit_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_digit const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EDigitVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_digit > *arg1 = (std::vector< mae::fl::laban::ps::e_digit > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_digit > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1DigitPart(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_digit arg1 ;
  unsigned int arg2 ;
  mae::fl::laban::ps::digit_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_digit)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (mae::fl::laban::ps::digit_part *)new mae::fl::laban::ps::digit_part(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::digit_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1DigitPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_DigitPart_1getDigit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_digit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_digit)((mae::fl::laban::ps::digit_part const *)arg1)->get_digit();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DigitPart_1getKnuckle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((mae::fl::laban::ps::digit_part const *)arg1)->get_knuckle();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DigitPart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DigitPart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DigitPart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DigitPart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_DigitPart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DigitPart_1getFixedEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::digit_part const *)arg1)->get_fixed_end();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DigitPart_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_DigitPart_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::digit_part *arg1 = (mae::fl::laban::ps::digit_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::digit_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::digit_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::digit_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DigitPart_1castToDigitPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::digit_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_digit_part_cast_to_digit_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::digit_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::digit_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_ELimbSideC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_limb_side_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbSideC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_limb_side_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = new std::vector< mae::fl::laban::ps::e_limb_side >((const std::vector< mae::fl::laban::ps::e_limb_side > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELimbSideC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_limb_side)mae::fl::laban::ps::e_limb_side_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbSideC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_limb_side_c *)new mae::fl::laban::ps::e_limb_side_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_limb_side_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELimbSideC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_limb_side_c *arg1 = (mae::fl::laban::ps::e_limb_side_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_limb_side_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbSideVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_limb_side > *)new std::vector< mae::fl::laban::ps::e_limb_side >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1ELimbSideVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_limb_side > *)new std::vector< mae::fl::laban::ps::e_limb_side >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_limb_side > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_ELimbSideVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_limb_side >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_limb_side_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_limb_side const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1ELimbSideVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_limb_side > *arg1 = (std::vector< mae::fl::laban::ps::e_limb_side > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_limb_side > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1SurfacePart(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_limb_side arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > *argp2 ;
  mae::fl::laban::ps::surface_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (mae::fl::laban::ps::e_limb_side)jarg1; 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (mae::fl::laban::ps::surface_part *)new mae::fl::laban::ps::surface_part(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::surface_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1SurfacePart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1getLimbSide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_limb_side result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_limb_side)((mae::fl::laban::ps::surface_part const *)arg1)->get_limb_side();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1getLimb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_limb > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->get_limb();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::surface_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::surface_part *arg1 = (mae::fl::laban::ps::surface_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::surface_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::surface_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::surface_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1castToSurfacePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::surface_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_surface_part_cast_to_surface_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::surface_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::surface_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_EJointC_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  {
    try {
      result = mae::fl::laban::ps::e_joint_c::str(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EJointC_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = mae::fl::laban::ps::e_joint_c::vec();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = new std::vector< mae::fl::laban::ps::e_joint >((const std::vector< mae::fl::laban::ps::e_joint > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EJointC_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::e_joint)mae::fl::laban::ps::e_joint_c::parse(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EJointC(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (mae::fl::laban::ps::e_joint_c *)new mae::fl::laban::ps::e_joint_c();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(mae::fl::laban::ps::e_joint_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EJointC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::e_joint_c *arg1 = (mae::fl::laban::ps::e_joint_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::fl::laban::ps::e_joint_c **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EJointVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_joint > *)new std::vector< mae::fl::laban::ps::e_joint >();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1EJointVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type arg1 ;
  std::vector< mae::fl::laban::ps::e_joint > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< enum mae::fl::laban::ps::e_joint >::size_type)jarg1; 
  {
    try {
      result = (std::vector< mae::fl::laban::ps::e_joint > *)new std::vector< mae::fl::laban::ps::e_joint >(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< mae::fl::laban::ps::e_joint > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EJointVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->size();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_EJointVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  {
    try {
      result = ((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->capacity();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EJointVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (std::vector< enum mae::fl::laban::ps::e_joint >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_EJointVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< mae::fl::laban::ps::e_joint > const *)arg1)->empty();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EJointVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EJointVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *arg2 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  temp2 = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((std::vector< enum mae::fl::laban::ps::e_joint >::value_type const &)*arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_EJointVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type *) &std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_EJointVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  int arg2 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type *arg3 = 0 ;
  std::vector< enum mae::fl::laban::ps::e_joint >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< enum mae::fl::laban::ps::e_joint >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_mae_fl_laban_ps_e_joint_Sg__set(arg1,arg2,(enum mae::fl::laban::ps::e_joint const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1EJointVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< mae::fl::laban::ps::e_joint > *arg1 = (std::vector< mae::fl::laban::ps::e_joint > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< mae::fl::laban::ps::e_joint > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1JointPart(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::e_joint arg1 ;
  mae::fl::laban::ps::joint_part *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::fl::laban::ps::e_joint)jarg1; 
  {
    try {
      result = (mae::fl::laban::ps::joint_part *)new mae::fl::laban::ps::joint_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::joint_part >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1JointPart(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_maejava_MaeJavaJNI_JointPart_1getJoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  mae::fl::laban::ps::e_joint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (mae::fl::laban::ps::e_joint)((mae::fl::laban::ps::joint_part const *)arg1)->get_joint();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_JointPart_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_JointPart_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_JointPart_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_JointPart_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_JointPart_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_JointPart_1getFixedEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::joint_part const *)arg1)->get_fixed_end();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_JointPart_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_JointPart_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::joint_part *arg1 = (mae::fl::laban::ps::joint_part *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::joint_part > **)&jarg1;
  arg1 = (mae::fl::laban::ps::joint_part *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::joint_part const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_JointPart_1castToJointPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_part > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::joint_part > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_joint_part_cast_to_joint_part(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::joint_part > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::joint_part >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Prop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::prop *)new mae::fl::laban::ps::prop(arg1,arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_new_1Prop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  mae::fl::laban::ps::prop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (mae::fl::laban::ps::prop *)new mae::fl::laban::ps::prop(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr<  mae::fl::laban::ps::prop >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_maejava_MaeJavaJNI_delete_1Prop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->get_name();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->get_description();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1xml_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2,arg3);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1xml_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->xml(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1xml_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->xml();
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1svg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_maejava_MaeJavaJNI_Prop_1svg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jstring jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = ((mae::fl::laban::ps::prop const *)arg1)->svg(arg2,arg3,arg4,arg5,arg6);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_maejava_MaeJavaJNI_Prop_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::fl::laban::ps::prop *arg1 = (mae::fl::laban::ps::prop *) 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg2 ;
  std::shared_ptr< mae::fl::laban::ps::prop const > *smartarg1 = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr< const mae::fl::laban::ps::prop > **)&jarg1;
  arg1 = (mae::fl::laban::ps::prop *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  {
    try {
      result = (bool)((mae::fl::laban::ps::prop const *)arg1)->equals(arg2);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Prop_1castToProp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > arg1 ;
  std::shared_ptr< mae::fl::laban::ps::i_pre_sign > *argp1 ;
  std::shared_ptr< mae::fl::laban::ps::prop > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  {
    try {
      result = mae_fl_laban_ps_prop_cast_to_prop(arg1);
    } catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::shared_ptr< mae::fl::laban::ps::prop > **)&jresult = result ? new std::shared_ptr< mae::fl::laban::ps::prop >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_GeneralEnrichedPose_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::general_enriched_pose > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::general_enriched_pose > **)&jarg1;
    *(std::shared_ptr< mae::general_pose > **)&baseptr = argp1 ? new std::shared_ptr< mae::general_pose >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlSkeleton_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::fl_skeleton > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::fl_skeleton > **)&jarg1;
    *(std::shared_ptr< mae::general_skeleton > **)&baseptr = argp1 ? new std::shared_ptr< mae::general_skeleton >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlPoseDetector_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::fl_pose_detector > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::fl_pose_detector > **)&jarg1;
    *(std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_pose_detector< mae::fl::fl_skeleton > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceRecognizer_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::laban_sequence_recognizer > **)&jarg1;
    *(std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_sequence_recognizer< mae::fl::laban::laban_sequence > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_LabanSequenceGenerator_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::laban_sequence_generator > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::laban_sequence_generator > **)&jarg1;
    *(std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > > **)&baseptr = argp1 ? new std::shared_ptr< mae::i_sequence_generator< mae::fl::laban::laban_sequence > >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_FlMovementController_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(mae::movement_controller< mae::fl::fl_skeleton,mae::fl::laban::laban_sequence > **)&baseptr = *(mae::fl::fl_movement_controller **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Movement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::movement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::movement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Path_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::path > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::path > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RelationshipBow_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::relationship_bow > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::relationship_bow > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Pin_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::pin > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::pin > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_RoomDirection_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::room_direction > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::room_direction > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::i_movement > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::i_movement >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AccentSign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::accent_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::accent_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DynamicSign_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::dynamic_sign > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::dynamic_sign > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_dynamics_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CancellationSymbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::cancellation_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SpaceMeasurement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::space_measurement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::space_measurement > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_degree_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_degree_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DirectionSymbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::direction_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::direction_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_TurnSymbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::turn_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::turn_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_VibrationSymbol_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::mv::vibration_symbol > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::mv::vibration_symbol > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::mv::i_symbol > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::mv::i_symbol >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_IEndpoint_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_endpoint > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_AreaPart_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::area_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::area_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_BodyPart_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::body_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::body_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_ILimb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::i_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_CustomLimb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::custom_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::custom_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DefaultLimb_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::default_limb > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::default_limb > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_limb > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_limb >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_DigitPart_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::digit_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::digit_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_SurfacePart_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::surface_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::surface_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_part > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_part >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_JointPart_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::joint_part > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::joint_part > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_endpoint > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_endpoint >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_maejava_MaeJavaJNI_Prop_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< mae::fl::laban::ps::prop > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< mae::fl::laban::ps::prop > **)&jarg1;
    *(std::shared_ptr< mae::fl::laban::ps::i_pre_sign > **)&baseptr = argp1 ? new std::shared_ptr< mae::fl::laban::ps::i_pre_sign >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

