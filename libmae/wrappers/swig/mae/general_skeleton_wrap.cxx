/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


 	#include "../../../src/mae/e_bone.hpp"

SWIGINTERN std::vector< e_bone >::const_reference std_vector_Sl_e_bone_Sg__get(std::vector< e_bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_e_bone_Sg__set(std::vector< e_bone > *self,int i,std::vector< e_bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

 #include "../../../src/mae/bone.hpp"

SWIGINTERN std::vector< bone >::const_reference std_vector_Sl_bone_Sg__get(std::vector< bone > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bone_Sg__set(std::vector< bone > *self,int i,std::vector< bone >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

 #include "../../../src/mae/hierarchy_element.hpp"
 
SWIGINTERN std::vector< std::shared_ptr< hierarchy_element > >::const_reference std_vector_Sl_std_shared_ptr_Sl_hierarchy_element_Sg__Sg__get(std::vector< std::shared_ptr< hierarchy_element > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_hierarchy_element_Sg__Sg__set(std::vector< std::shared_ptr< hierarchy_element > > *self,int i,std::vector< std::shared_ptr< hierarchy_element > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	#include "../../../src/mae/hierarchy.hpp"


	#include "../../../src/mae/vec3d.hpp"


	#include "../../../src/mae/general_joint.hpp"


 #include "../../../src/mae/basis.hpp"
 

	#include "../../../src/mae/general_skeleton.hpp"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1e_1bone_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< e_bone > *)new std::vector< e_bone >();
  *(std::vector< e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1e_1bone_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< e_bone >::size_type arg1 ;
  std::vector< e_bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< e_bone >::size_type)jarg1; 
  result = (std::vector< e_bone > *)new std::vector< e_bone >(arg1);
  *(std::vector< e_bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  std::vector< e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  result = ((std::vector< e_bone > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  std::vector< e_bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  result = ((std::vector< e_bone > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  std::vector< e_bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  arg2 = (std::vector< e_bone >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  result = (bool)((std::vector< e_bone > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  std::vector< e_bone >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  arg2 = *(std::vector< e_bone >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< e_bone >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< e_bone >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  int arg2 ;
  std::vector< e_bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< e_bone >::value_type *) &std_vector_Sl_e_bone_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< e_bone >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_e_1bone_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  int arg2 ;
  std::vector< e_bone >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< e_bone >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< e_bone >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_e_bone_Sg__set(arg1,arg2,(e_bone const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1e_1bone_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< e_bone > *arg1 = (std::vector< e_bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< e_bone > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_HEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::HEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1UPPER_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_UPPER_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1FOREARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_FOREARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1WHOLE_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_LEFT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::LEFT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1THIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_THIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1SHANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_SHANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_RIGHT_1WHOLE_1LEG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone)mae::e_bone::RIGHT_WHOLE_LEG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_e_1bone_1c_1str(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  mae::e_bone arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = mae::e_bone_c::str(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_e_1bone_1c_1to_1int(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  mae::e_bone arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = (int)mae::e_bone_c::to_int(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_e_1bone_1c_1vec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< enum mae::e_bone > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::e_bone_c::vec();
  *(std::vector< mae::e_bone > **)&jresult = new std::vector< mae::e_bone >((const std::vector< mae::e_bone > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_e_1bone_1c_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string arg1 ;
  mae::e_bone result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (mae::e_bone)mae::e_bone_c::parse(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1e_1bone_1c(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::e_bone_c *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::e_bone_c *)new mae::e_bone_c();
  *(mae::e_bone_c **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1e_1bone_1c(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::e_bone_c *arg1 = (mae::e_bone_c *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::e_bone_c **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1bone_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bone > *)new std::vector< bone >();
  *(std::vector< bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1bone_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bone >::size_type arg1 ;
  std::vector< bone > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bone >::size_type)jarg1; 
  result = (std::vector< bone > *)new std::vector< bone >(arg1);
  *(std::vector< bone > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_bone_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  std::vector< bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  result = ((std::vector< bone > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_bone_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  std::vector< bone >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  result = ((std::vector< bone > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_bone_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  std::vector< bone >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  arg2 = (std::vector< bone >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_bone_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  result = (bool)((std::vector< bone > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_bone_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_bone_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  std::vector< bone >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  arg2 = *(std::vector< bone >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bone >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< bone >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_bone_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  int arg2 ;
  std::vector< bone >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bone >::value_type *) &std_vector_Sl_bone_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< bone >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_bone_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  int arg2 ;
  std::vector< bone >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bone > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< bone >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bone >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_bone_Sg__set(arg1,arg2,(bone const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1bone_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bone > *arg1 = (std::vector< bone > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bone > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1bone_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4);
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1bone_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  mae::bone *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (mae::bone *)new mae::bone(arg1,arg2,arg3,arg4,arg5);
  *(mae::bone **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1bone(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::bone *arg1 = (mae::bone *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::bone **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_bone_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = ((mae::bone const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1get_1from(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_from();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1get_1to(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_to();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_bone_1has_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (bool)((mae::bone const *)arg1)->has_middle_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1get_1middle_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::bone *arg1 = (mae::bone *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::bone **)&jarg1; 
  result = (int)((mae::bone const *)arg1)->get_middle_joint();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_bone_1default_1bones(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::vector< mae::bone > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::bone::default_bones();
  *(std::vector< mae::bone > **)&jresult = new std::vector< mae::bone >((const std::vector< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_bone_1create_1bone(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mae::e_bone arg1 ;
  SwigValueWrapper< mae::bone > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mae::e_bone)jarg1; 
  result = mae::bone::create_bone(arg1);
  *(mae::bone **)&jresult = new mae::bone((const mae::bone &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1RESERVED_1TOP_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_TOP_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_bone_1RESERVED_1RIGHT_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)mae::bone::RESERVED_RIGHT_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1element_1vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< hierarchy_element > > *)new std::vector< std::shared_ptr< hierarchy_element > >();
  *(std::vector< std::shared_ptr< hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1element_1vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::size_type arg1 ;
  std::vector< std::shared_ptr< hierarchy_element > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< hierarchy_element > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< hierarchy_element > > *)new std::vector< std::shared_ptr< hierarchy_element > >(arg1);
  *(std::vector< std::shared_ptr< hierarchy_element > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< hierarchy_element > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< hierarchy_element > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< hierarchy_element > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< hierarchy_element > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< hierarchy_element > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< hierarchy_element > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< hierarchy_element > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< hierarchy_element > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_hierarchy_element_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< hierarchy_element > >::value_type **)&jresult = *result ? new std::shared_ptr< hierarchy_element >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1vector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< hierarchy_element > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< hierarchy_element > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< hierarchy_element > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_hierarchy_element_Sg__Sg__set(arg1,arg2,(std::shared_ptr< hierarchy_element > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1hierarchy_1element_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< hierarchy_element > > *arg1 = (std::vector< std::shared_ptr< hierarchy_element > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< hierarchy_element > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  bool arg4 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3,arg4);
  *(mae::hierarchy_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  bool arg3 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2,arg3);
  *(mae::hierarchy_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1element_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (mae::hierarchy_element *)new mae::hierarchy_element(arg1,arg2);
  *(mae::hierarchy_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1hierarchy_1element(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1get_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (int)((mae::hierarchy_element const *)arg1)->get_id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1get_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = ((mae::hierarchy_element const *)arg1)->get_name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1is_1torso_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_torso_joint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1is_1dummy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_dummy();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1get_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (mae::hierarchy_element *)((mae::hierarchy_element const *)arg1)->get_parent();
  *(mae::hierarchy_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1is_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1is_1parent_1of(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((mae::hierarchy_element const *)arg1)->is_parent_of(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1get_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::hierarchy_element > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = ((mae::hierarchy_element const *)arg1)->get_children();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1push_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_front(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1push_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_front(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jboolean jarg4) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg3 ;
  bool arg4 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->insert(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg3 ;
  std::shared_ptr< mae::hierarchy_element > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  argp3 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg2 ;
  bool arg3 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->push_back(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1erase_1at_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->erase_at(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1erase_1at_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->erase_at(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::hierarchy_element > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1str_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((mae::hierarchy_element const *)arg1)->str(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_hierarchy_1element_1str_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy_element *arg1 = (mae::hierarchy_element *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy_element **)&jarg1; 
  result = ((mae::hierarchy_element const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::hierarchy *)new mae::hierarchy();
  *(mae::hierarchy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1hierarchy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg1 ;
  std::shared_ptr< mae::hierarchy_element > *argp1 ;
  mae::hierarchy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::hierarchy *)new mae::hierarchy(arg1);
  *(mae::hierarchy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::hierarchy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1get_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = ((mae::hierarchy const *)arg1)->get_root();
  *(std::shared_ptr< mae::hierarchy_element > **)&jresult = new std::shared_ptr< mae::hierarchy_element >((const std::shared_ptr< mae::hierarchy_element > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_hierarchy_1set_1root(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy_element > > arg2 ;
  std::shared_ptr< mae::hierarchy_element > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy_element > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy_element >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_root(arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1get_1element_1sequence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< mae::hierarchy_element > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = (arg1)->get_element_sequence();
  *(std::vector< std::shared_ptr< mae::hierarchy_element > > **)&jresult = new std::vector< std::shared_ptr< mae::hierarchy_element > >((const std::vector< std::shared_ptr< mae::hierarchy_element > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  int arg2 ;
  mae::hierarchy_element *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (mae::hierarchy_element *)((mae::hierarchy const *)arg1)->at(arg2);
  *(mae::hierarchy_element **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_hierarchy_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::hierarchy *arg1 = (mae::hierarchy *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::hierarchy **)&jarg1; 
  result = ((mae::hierarchy const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_hierarchy_1default_1hierarchy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy > > result;
  
  (void)jenv;
  (void)jcls;
  result = mae::hierarchy::default_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = new std::shared_ptr< mae::hierarchy >((const std::shared_ptr< mae::hierarchy > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1vec3d(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::vec3d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::vec3d *)new mae::vec3d(arg1,arg2,arg3);
  *(mae::vec3d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1vec3d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::vec3d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_vec3d_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_vec3d_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  result = (double)((mae::vec3d const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_vec3d_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_vec3d_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  result = (double)((mae::vec3d const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_vec3d_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_vec3d_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  result = (double)((mae::vec3d const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_vec3d_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::vec3d *arg1 = (mae::vec3d *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::vec3d **)&jarg1; 
  result = ((mae::vec3d const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1general_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::general_joint **)&jarg1; 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_joint *)new mae::general_joint();
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4,arg5);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3,arg4);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg1 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< mae::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2,arg3);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg1 ;
  double arg2 ;
  std::shared_ptr< mae::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (double)jarg2; 
  result = (mae::general_joint *)new mae::general_joint(arg1,arg2);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1joint_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg1 ;
  std::shared_ptr< mae::vec3d > *argp1 ;
  mae::general_joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::general_joint *)new mae::general_joint(arg1);
  *(mae::general_joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_x(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_general_1joint_1get_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (double)((mae::general_joint const *)arg1)->get_x();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_y(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_general_1joint_1get_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (double)((mae::general_joint const *)arg1)->get_y();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_z(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_general_1joint_1get_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (double)((mae::general_joint const *)arg1)->get_z();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set_valid(arg2);
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_general_1joint_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (bool)((mae::general_joint const *)arg1)->is_valid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_confidence(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_general_1joint_1get_1confidence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (double)(arg1)->get_confidence();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1joint_1set_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_rotation(arg2);
}


SWIGEXPORT jdouble JNICALL Java_w_1e_1boneJNI_general_1joint_1get_1rotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (double)(arg1)->get_rotation();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1joint_1vec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = (arg1)->vec();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_general_1joint_1equals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  mae::general_joint arg2 ;
  mae::general_joint *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(mae::general_joint **)&jarg1; 
  argp2 = *(mae::general_joint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mae::general_joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_w_1e_1boneJNI_general_1joint_1equals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::general_joint > > arg2 ;
  std::shared_ptr< mae::general_joint > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::general_joint > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::general_joint >");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((mae::general_joint const *)arg1)->equals(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_general_1joint_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_joint *arg1 = (mae::general_joint *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_joint **)&jarg1; 
  result = ((mae::general_joint const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg1 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg3 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg4 ;
  std::shared_ptr< mae::vec3d > *argp1 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  std::shared_ptr< mae::vec3d > *argp3 ;
  std::shared_ptr< mae::vec3d > *argp4 ;
  mae::basis *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::vec3d > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::shared_ptr< mae::vec3d > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(std::shared_ptr< mae::vec3d > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return 0;
  }
  arg4 = *argp4; 
  result = (mae::basis *)new mae::basis(arg1,arg2,arg3,arg4);
  *(mae::basis **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1basis(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::basis *arg1 = (mae::basis *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::basis **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_basis_1get_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  result = ((mae::basis const *)arg1)->get_u();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_basis_1get_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  result = ((mae::basis const *)arg1)->get_r();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_basis_1get_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  result = ((mae::basis const *)arg1)->get_t();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_basis_1get_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  result = ((mae::basis const *)arg1)->get_position_vector();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_basis_1set_1u(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_u(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_basis_1set_1r(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_r(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_basis_1set_1t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_t(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_basis_1set_1position_1vector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::basis *arg1 = (mae::basis *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_position_vector(arg2);
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_basis_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::basis *arg1 = (mae::basis *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::basis **)&jarg1; 
  result = ((mae::basis const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1skeleton_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (mae::general_skeleton *)new mae::general_skeleton();
  *(mae::general_skeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_new_1general_1skeleton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy > > arg1 ;
  std::shared_ptr< mae::hierarchy > *argp1 ;
  mae::general_skeleton *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(std::shared_ptr< mae::hierarchy > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy >");
    return 0;
  }
  arg1 = *argp1; 
  result = (mae::general_skeleton *)new mae::general_skeleton(arg1);
  *(mae::general_skeleton **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_delete_1general_1skeleton(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1set_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::general_joint > > arg3 ;
  std::shared_ptr< mae::general_joint > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::shared_ptr< mae::general_joint > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::general_joint >");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->set_joint(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1skeleton_1get_1joint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::shared_ptr< mae::general_joint > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((mae::general_skeleton const *)arg1)->get_joint(arg2);
  *(std::shared_ptr< mae::general_joint > **)&jresult = new std::shared_ptr< mae::general_joint >((const std::shared_ptr< mae::general_joint > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1skeleton_1get_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_hierarchy();
  *(std::shared_ptr< mae::hierarchy > **)&jresult = new std::shared_ptr< mae::hierarchy >((const std::shared_ptr< mae::hierarchy > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1set_1hierarchy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::hierarchy > > arg2 ;
  std::shared_ptr< mae::hierarchy > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::hierarchy > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::hierarchy >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_hierarchy(arg2);
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1set_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::bone > > arg2 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::bone >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_top_down(arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1skeleton_1get_1top_1down(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::bone > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_top_down();
  *(std::shared_ptr< mae::bone > **)&jresult = new std::shared_ptr< mae::bone >((const std::shared_ptr< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1set_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::bone > > arg2 ;
  std::shared_ptr< mae::bone > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::bone > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::bone >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_right_left(arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1skeleton_1get_1right_1left(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::bone > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_right_left();
  *(std::shared_ptr< mae::bone > **)&jresult = new std::shared_ptr< mae::bone >((const std::shared_ptr< mae::bone > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1set_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > arg2 ;
  std::shared_ptr< mae::vec3d > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  argp2 = *(std::shared_ptr< mae::vec3d > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< mae::vec3d >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_weight(arg2);
}


SWIGEXPORT jlong JNICALL Java_w_1e_1boneJNI_general_1skeleton_1get_1weight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  SwigValueWrapper< std::shared_ptr< mae::vec3d > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->get_weight();
  *(std::shared_ptr< mae::vec3d > **)&jresult = new std::shared_ptr< mae::vec3d >((const std::shared_ptr< mae::vec3d > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_general_1skeleton_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_w_1e_1boneJNI_general_1skeleton_1ply_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  result = ((mae::general_skeleton const *)arg1)->ply_str();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_w_1e_1boneJNI_general_1skeleton_1ply_1file(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  mae::general_skeleton *arg1 = (mae::general_skeleton *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mae::general_skeleton **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  ((mae::general_skeleton const *)arg1)->ply_file(arg2);
}


#ifdef __cplusplus
}
#endif

