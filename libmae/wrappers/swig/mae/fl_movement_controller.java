/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class fl_movement_controller {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected fl_movement_controller(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(fl_movement_controller obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        maewrapperJNI.delete_fl_movement_controller(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public fl_movement_controller(long pose_buffer_size, double framerate, boolean debug) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_0(pose_buffer_size, framerate, debug), true);
  }

  public fl_movement_controller(long pose_buffer_size, double framerate) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_1(pose_buffer_size, framerate), true);
  }

  public fl_movement_controller(long pose_buffer_size) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_2(pose_buffer_size), true);
  }

  public fl_movement_controller() {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_3(), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size, long beats_per_measure, long beat_duration, SWIGTYPE_p_laban__e_time_unit time_unit, double framerate, boolean debug) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_4(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size, beats_per_measure, beat_duration, SWIGTYPE_p_laban__e_time_unit.getCPtr(time_unit), framerate, debug), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size, long beats_per_measure, long beat_duration, SWIGTYPE_p_laban__e_time_unit time_unit, double framerate) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_5(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size, beats_per_measure, beat_duration, SWIGTYPE_p_laban__e_time_unit.getCPtr(time_unit), framerate), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size, long beats_per_measure, long beat_duration, SWIGTYPE_p_laban__e_time_unit time_unit) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_6(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size, beats_per_measure, beat_duration, SWIGTYPE_p_laban__e_time_unit.getCPtr(time_unit)), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size, long beats_per_measure, long beat_duration) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_7(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size, beats_per_measure, beat_duration), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size, long beats_per_measure) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_8(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size, beats_per_measure), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions, long pose_buffer_size) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_9(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions), pose_buffer_size), true);
  }

  public fl_movement_controller(SWIGTYPE_p_std__vectorT_bone_t body_parts, SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t column_definitions) {
    this(maewrapperJNI.new_fl_movement_controller__SWIG_10(SWIGTYPE_p_std__vectorT_bone_t.getCPtr(body_parts), SWIGTYPE_p_std__vectorT_std__shared_ptrT_laban__column_definition_t_t.getCPtr(column_definitions)), true);
  }

  public void next_frame(int timestamp, SWIGTYPE_p_std__shared_ptrT_general_skeleton_t skeleton) {
    maewrapperJNI.fl_movement_controller_next_frame(swigCPtr, this, timestamp, SWIGTYPE_p_std__shared_ptrT_general_skeleton_t.getCPtr(skeleton));
  }

  public void set_recognition_tolerance(double tolerance) {
    maewrapperJNI.fl_movement_controller_set_recognition_tolerance(swigCPtr, this, tolerance);
  }

}
